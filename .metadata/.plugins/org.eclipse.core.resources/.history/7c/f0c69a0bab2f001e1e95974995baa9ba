#include "API_uart.h"

#define TIMEOUT 0xFFFF

/* UART handler declaration */
UART_HandleTypeDef UartHandle;

// Mensajes de inicialización

uint8_t baudRate=9000;

char msgInit[]="\n\r Se inició la uart\n\r ";
char msgInitBaudRate[]="\n\r Baud Rate:\n\r ";
char msgInitWordLength[]="\n\r Word length:\n\r ";

static void Error_Handler(void);

/*##-1- Configure the UART peripheral ######################################*/
bool_t uartInit(void)
{
	bool_t ret=false;

	  /* Put the USART peripheral in the Asynchronous mode (UART Mode) */
	  /* UART configured as follows:
	      - Word Length = 8 Bits (7 data bit + 1 parity bit) :
		                  BE CAREFUL : Program 7 data bits + 1 parity bit in PC HyperTerminal
	      - Stop Bit    = One Stop bit
	      - Parity      = ODD parity
	      - BaudRate    = 9600 baud
	      - Hardware flow control disabled (RTS and CTS signals) */
	  UartHandle.Instance        = USARTx;

	  UartHandle.Init.BaudRate   = 9600;
	  UartHandle.Init.WordLength = UART_WORDLENGTH_8B;
	  UartHandle.Init.StopBits   = UART_STOPBITS_1;
	  UartHandle.Init.Parity     = UART_PARITY_ODD;
	  UartHandle.Init.HwFlowCtl  = UART_HWCONTROL_NONE;
	  UartHandle.Init.Mode       = UART_MODE_TX_RX;
	  UartHandle.Init.OverSampling = UART_OVERSAMPLING_16;
	  if (HAL_UART_Init(&UartHandle) != HAL_OK)
	  {
	    /* Initialization Error */
		ret=true;
	    Error_Handler();
	  }

	  // se indica que el puerto inició y se muestran dos parámetros de configuración
	  uartSendString(msgInit);
	  uartSendString(msgInitBaudRate);
	  uartSendString(msgInitWordLength);
}

void uartSendString(uint8_t * pstring)
{
  uint16_t Size=sizeof(pstring);
  HAL_UART_Transmit(&UartHandle, pstring, Size, TIMEOUT);
}

void uartSendStringSize(uint8_t * pstring, uint16_t size)
{
	  HAL_UART_Transmit(&UartHandle, pstring, size, TIMEOUT);
}

void uartReceiveStringSize(uint8_t * pstringReceive, uint16_t size)
{
	HAL_UART_Receive(&UartHandle, pstringReceive, size, TIMEOUT);

}

PUTCHAR_PROTOTYPE
{
  /* Place your implementation of fputc here */
  /* e.g. write a character to the USART3 and Loop until the end of transmission */
  HAL_UART_Transmit(&UartHandle, (uint8_t *)&ch, 1, 0xFFFF);

  return ch;
}

static void Error_Handler(void)
{
  /* Turn LED2 on */
  BSP_LED_On(LED2);
  while (1)
  {
  }
}
