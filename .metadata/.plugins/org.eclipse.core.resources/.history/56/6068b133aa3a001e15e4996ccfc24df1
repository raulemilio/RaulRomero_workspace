/* USER CODE BEGIN Header */
/**
  ******************************************************************************
  * @file           : main.c
  * @brief          : Main program body
  ******************************************************************************
  * @attention
  *
  *
  ******************************************************************************
  */

#include "main.h"
#include "BMPXX80.h"
#include "LCD44780.h"
#include "port.h"
#include "delays.h"
#include <stdio.h>
#include <string.h>

#define TEMPERATURE_ALARM 28
#define TEMPERATURE_MIN   0
#define TEMPERATURE_MAX   30

typedef enum{
	INIT,
	CONNECT,
	MEASURE,
	RANGE,
}fsmState_t;

static float temperature;

#ifdef __GNUC__
/* With GCC, small printf (option LD Linker->Libraries->Small printf
   set to 'Yes') calls __io_putchar() */
#define PUTCHAR_PROTOTYPE int __io_putchar(int ch)
#else
#define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif /* __GNUC__ */

void SystemClock_Config(void);

void FSM_Init(void);
void FSM_Connect(void);
uint8_t FSM_Measure(void);
void FSM_Range(void);

int main(void)
{

  HAL_Init();
  SystemClock_Config();

  fsmState_t fsm_state=INIT;
  uint8_t error;

  while (1)
  {
	  switch (fsm_state) {

	  	  	  case INIT:
	  	  		    FSM_Init();
	                fsm_state=CONNECT;
	  	  	  break;

	  	  	  case CONNECT:
	  	  		    FSM_Connect();
	  	  		    fsm_state=MEASURE;
	  	  	  break;

	  	  	  case MEASURE:
	  	  		    error=FSM_Measure();

	  	  		    if(error==0){
		  	  		    fsm_state=RANGE;
	  	  		    }else
	  	  		    	if(error==-1)
	  	  		    	{
	  	  		    	fsm_state=CONNECT;
	  	  		    	}
	  	  		    printf("Error %d \n",error);
	  	  	  break;

	  	  	  case RANGE:
	  	  		    FSM_Range();
	  	  		    fsm_state=MEASURE;
	  	  	  break;

	  	  	  default:

	  	  	  break;
	  	  }
  }
  /* USER CODE END 3 */
}
//*********************************************************************************************
void FSM_Init(void)
{
	  MX_GPIO_Init();
	  MX_SPI1_Init();
	  MX_USART3_UART_Init();
	  MX_I2C2_Init();

	  LCD44780_Init();
}
void FSM_Connect(void)
{
	 BMP280_Init(&hspi1, BMP280_TEMPERATURE_16BIT, BMP280_FORCEDMODE);
	 LCD44780_Backlight(1); // Turn on backlight
	 HAL_Delay(3000);
}
uint8_t FSM_Measure()
{
	  uint8_t ret;
	  temperature=BMP280_ReadTemperature();

	  if (TEMPERATURE_MIN<temperature<TEMPERATURE_MAX){
		  UART_Send_Temperature(temperature);
		  LCD44780_UpdateTemperature(temperature);
		  ret =0;
	  }else
	  {
		  LCD44780_SensorTemperatureError();
		  UART_SensorTemperatureError();
		  ret -1;
	  }
	  return ret;
}
void FSM_Range()
{
	if(temperature>TEMPERATURE_ALARM)
	{
		LCD44780_TemperatureAlarm();
		UART_TemperatureAlarm();
	}

}
//***************************************************************************************
PUTCHAR_PROTOTYPE
{
  /* Place your implementation of fputc here */
  /* e.g. write a character to the USART3 and Loop until the end of transmission */
  HAL_UART_Transmit(&huart3, (uint8_t *)&ch, 1, 0xFFFF);
  return ch;
}
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
  {
    Error_Handler();
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
  {
    Error_Handler();
  }
}

/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {
  }
  /* USER CODE END Error_Handler_Debug */
}

#ifdef  USE_FULL_ASSERT
/**
  * @brief  Reports the name of the source file and the source line number
  *         where the assert_param error has occurred.
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
     ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
#endif /* USE_FULL_ASSERT */
