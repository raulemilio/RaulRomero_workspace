
TF_Termometro2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000073dc  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004ac  08007590  08007590  00017590  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007a3c  08007a3c  000201e0  2**0
                  CONTENTS
  4 .ARM          00000008  08007a3c  08007a3c  00017a3c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007a44  08007a44  000201e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007a44  08007a44  00017a44  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007a48  08007a48  00017a48  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  20000000  08007a4c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000201e0  2**0
                  CONTENTS
 10 .bss          0000022c  200001e0  200001e0  000201e0  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000040c  2000040c  000201e0  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000fa71  00000000  00000000  00020210  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000021f2  00000000  00000000  0002fc81  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000d18  00000000  00000000  00031e78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000c38  00000000  00000000  00032b90  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00024de2  00000000  00000000  000337c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000108bc  00000000  00000000  000585aa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d7fe8  00000000  00000000  00068e66  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00140e4e  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000047e0  00000000  00000000  00140ea0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	200001e0 	.word	0x200001e0
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08007574 	.word	0x08007574

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	200001e4 	.word	0x200001e4
 80001ec:	08007574 	.word	0x08007574

080001f0 <strlen>:
 80001f0:	4603      	mov	r3, r0
 80001f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001f6:	2a00      	cmp	r2, #0
 80001f8:	d1fb      	bne.n	80001f2 <strlen+0x2>
 80001fa:	1a18      	subs	r0, r3, r0
 80001fc:	3801      	subs	r0, #1
 80001fe:	4770      	bx	lr

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	; 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	3c01      	subs	r4, #1
 80003dc:	bf28      	it	cs
 80003de:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003e2:	d2e9      	bcs.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_dmul>:
 8000618:	b570      	push	{r4, r5, r6, lr}
 800061a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800061e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000622:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000626:	bf1d      	ittte	ne
 8000628:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800062c:	ea94 0f0c 	teqne	r4, ip
 8000630:	ea95 0f0c 	teqne	r5, ip
 8000634:	f000 f8de 	bleq	80007f4 <__aeabi_dmul+0x1dc>
 8000638:	442c      	add	r4, r5
 800063a:	ea81 0603 	eor.w	r6, r1, r3
 800063e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000642:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000646:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800064a:	bf18      	it	ne
 800064c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000650:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000654:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000658:	d038      	beq.n	80006cc <__aeabi_dmul+0xb4>
 800065a:	fba0 ce02 	umull	ip, lr, r0, r2
 800065e:	f04f 0500 	mov.w	r5, #0
 8000662:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000666:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800066a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800066e:	f04f 0600 	mov.w	r6, #0
 8000672:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000676:	f09c 0f00 	teq	ip, #0
 800067a:	bf18      	it	ne
 800067c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000680:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000684:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000688:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800068c:	d204      	bcs.n	8000698 <__aeabi_dmul+0x80>
 800068e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000692:	416d      	adcs	r5, r5
 8000694:	eb46 0606 	adc.w	r6, r6, r6
 8000698:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800069c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ac:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006b0:	bf88      	it	hi
 80006b2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006b6:	d81e      	bhi.n	80006f6 <__aeabi_dmul+0xde>
 80006b8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006bc:	bf08      	it	eq
 80006be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006c2:	f150 0000 	adcs.w	r0, r0, #0
 80006c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006d0:	ea46 0101 	orr.w	r1, r6, r1
 80006d4:	ea40 0002 	orr.w	r0, r0, r2
 80006d8:	ea81 0103 	eor.w	r1, r1, r3
 80006dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e0:	bfc2      	ittt	gt
 80006e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	popgt	{r4, r5, r6, pc}
 80006ec:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006f0:	f04f 0e00 	mov.w	lr, #0
 80006f4:	3c01      	subs	r4, #1
 80006f6:	f300 80ab 	bgt.w	8000850 <__aeabi_dmul+0x238>
 80006fa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006fe:	bfde      	ittt	le
 8000700:	2000      	movle	r0, #0
 8000702:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000706:	bd70      	pople	{r4, r5, r6, pc}
 8000708:	f1c4 0400 	rsb	r4, r4, #0
 800070c:	3c20      	subs	r4, #32
 800070e:	da35      	bge.n	800077c <__aeabi_dmul+0x164>
 8000710:	340c      	adds	r4, #12
 8000712:	dc1b      	bgt.n	800074c <__aeabi_dmul+0x134>
 8000714:	f104 0414 	add.w	r4, r4, #20
 8000718:	f1c4 0520 	rsb	r5, r4, #32
 800071c:	fa00 f305 	lsl.w	r3, r0, r5
 8000720:	fa20 f004 	lsr.w	r0, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea40 0002 	orr.w	r0, r0, r2
 800072c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000734:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000738:	fa21 f604 	lsr.w	r6, r1, r4
 800073c:	eb42 0106 	adc.w	r1, r2, r6
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 040c 	rsb	r4, r4, #12
 8000750:	f1c4 0520 	rsb	r5, r4, #32
 8000754:	fa00 f304 	lsl.w	r3, r0, r4
 8000758:	fa20 f005 	lsr.w	r0, r0, r5
 800075c:	fa01 f204 	lsl.w	r2, r1, r4
 8000760:	ea40 0002 	orr.w	r0, r0, r2
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000768:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800076c:	f141 0100 	adc.w	r1, r1, #0
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 0520 	rsb	r5, r4, #32
 8000780:	fa00 f205 	lsl.w	r2, r0, r5
 8000784:	ea4e 0e02 	orr.w	lr, lr, r2
 8000788:	fa20 f304 	lsr.w	r3, r0, r4
 800078c:	fa01 f205 	lsl.w	r2, r1, r5
 8000790:	ea43 0302 	orr.w	r3, r3, r2
 8000794:	fa21 f004 	lsr.w	r0, r1, r4
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800079c:	fa21 f204 	lsr.w	r2, r1, r4
 80007a0:	ea20 0002 	bic.w	r0, r0, r2
 80007a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ac:	bf08      	it	eq
 80007ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b2:	bd70      	pop	{r4, r5, r6, pc}
 80007b4:	f094 0f00 	teq	r4, #0
 80007b8:	d10f      	bne.n	80007da <__aeabi_dmul+0x1c2>
 80007ba:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007be:	0040      	lsls	r0, r0, #1
 80007c0:	eb41 0101 	adc.w	r1, r1, r1
 80007c4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3c01      	subeq	r4, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1a6>
 80007ce:	ea41 0106 	orr.w	r1, r1, r6
 80007d2:	f095 0f00 	teq	r5, #0
 80007d6:	bf18      	it	ne
 80007d8:	4770      	bxne	lr
 80007da:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007de:	0052      	lsls	r2, r2, #1
 80007e0:	eb43 0303 	adc.w	r3, r3, r3
 80007e4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3d01      	subeq	r5, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1c6>
 80007ee:	ea43 0306 	orr.w	r3, r3, r6
 80007f2:	4770      	bx	lr
 80007f4:	ea94 0f0c 	teq	r4, ip
 80007f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007fc:	bf18      	it	ne
 80007fe:	ea95 0f0c 	teqne	r5, ip
 8000802:	d00c      	beq.n	800081e <__aeabi_dmul+0x206>
 8000804:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000808:	bf18      	it	ne
 800080a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080e:	d1d1      	bne.n	80007b4 <__aeabi_dmul+0x19c>
 8000810:	ea81 0103 	eor.w	r1, r1, r3
 8000814:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000818:	f04f 0000 	mov.w	r0, #0
 800081c:	bd70      	pop	{r4, r5, r6, pc}
 800081e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000822:	bf06      	itte	eq
 8000824:	4610      	moveq	r0, r2
 8000826:	4619      	moveq	r1, r3
 8000828:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082c:	d019      	beq.n	8000862 <__aeabi_dmul+0x24a>
 800082e:	ea94 0f0c 	teq	r4, ip
 8000832:	d102      	bne.n	800083a <__aeabi_dmul+0x222>
 8000834:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000838:	d113      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800083a:	ea95 0f0c 	teq	r5, ip
 800083e:	d105      	bne.n	800084c <__aeabi_dmul+0x234>
 8000840:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000844:	bf1c      	itt	ne
 8000846:	4610      	movne	r0, r2
 8000848:	4619      	movne	r1, r3
 800084a:	d10a      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800084c:	ea81 0103 	eor.w	r1, r1, r3
 8000850:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000854:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000858:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800085c:	f04f 0000 	mov.w	r0, #0
 8000860:	bd70      	pop	{r4, r5, r6, pc}
 8000862:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000866:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800086a:	bd70      	pop	{r4, r5, r6, pc}

0800086c <__aeabi_ddiv>:
 800086c:	b570      	push	{r4, r5, r6, lr}
 800086e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000872:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000876:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800087a:	bf1d      	ittte	ne
 800087c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000880:	ea94 0f0c 	teqne	r4, ip
 8000884:	ea95 0f0c 	teqne	r5, ip
 8000888:	f000 f8a7 	bleq	80009da <__aeabi_ddiv+0x16e>
 800088c:	eba4 0405 	sub.w	r4, r4, r5
 8000890:	ea81 0e03 	eor.w	lr, r1, r3
 8000894:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000898:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800089c:	f000 8088 	beq.w	80009b0 <__aeabi_ddiv+0x144>
 80008a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008a4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008c4:	429d      	cmp	r5, r3
 80008c6:	bf08      	it	eq
 80008c8:	4296      	cmpeq	r6, r2
 80008ca:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ce:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008d2:	d202      	bcs.n	80008da <__aeabi_ddiv+0x6e>
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	1ab6      	subs	r6, r6, r2
 80008dc:	eb65 0503 	sbc.w	r5, r5, r3
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ea:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000948:	ea55 0e06 	orrs.w	lr, r5, r6
 800094c:	d018      	beq.n	8000980 <__aeabi_ddiv+0x114>
 800094e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000952:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000956:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800095a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800095e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000962:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000966:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800096a:	d1c0      	bne.n	80008ee <__aeabi_ddiv+0x82>
 800096c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000970:	d10b      	bne.n	800098a <__aeabi_ddiv+0x11e>
 8000972:	ea41 0100 	orr.w	r1, r1, r0
 8000976:	f04f 0000 	mov.w	r0, #0
 800097a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800097e:	e7b6      	b.n	80008ee <__aeabi_ddiv+0x82>
 8000980:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000984:	bf04      	itt	eq
 8000986:	4301      	orreq	r1, r0
 8000988:	2000      	moveq	r0, #0
 800098a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800098e:	bf88      	it	hi
 8000990:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000994:	f63f aeaf 	bhi.w	80006f6 <__aeabi_dmul+0xde>
 8000998:	ebb5 0c03 	subs.w	ip, r5, r3
 800099c:	bf04      	itt	eq
 800099e:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009a6:	f150 0000 	adcs.w	r0, r0, #0
 80009aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	pop	{r4, r5, r6, pc}
 80009b0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009bc:	bfc2      	ittt	gt
 80009be:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	popgt	{r4, r5, r6, pc}
 80009c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009cc:	f04f 0e00 	mov.w	lr, #0
 80009d0:	3c01      	subs	r4, #1
 80009d2:	e690      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009d4:	ea45 0e06 	orr.w	lr, r5, r6
 80009d8:	e68d      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009de:	ea94 0f0c 	teq	r4, ip
 80009e2:	bf08      	it	eq
 80009e4:	ea95 0f0c 	teqeq	r5, ip
 80009e8:	f43f af3b 	beq.w	8000862 <__aeabi_dmul+0x24a>
 80009ec:	ea94 0f0c 	teq	r4, ip
 80009f0:	d10a      	bne.n	8000a08 <__aeabi_ddiv+0x19c>
 80009f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009f6:	f47f af34 	bne.w	8000862 <__aeabi_dmul+0x24a>
 80009fa:	ea95 0f0c 	teq	r5, ip
 80009fe:	f47f af25 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a02:	4610      	mov	r0, r2
 8000a04:	4619      	mov	r1, r3
 8000a06:	e72c      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a08:	ea95 0f0c 	teq	r5, ip
 8000a0c:	d106      	bne.n	8000a1c <__aeabi_ddiv+0x1b0>
 8000a0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a12:	f43f aefd 	beq.w	8000810 <__aeabi_dmul+0x1f8>
 8000a16:	4610      	mov	r0, r2
 8000a18:	4619      	mov	r1, r3
 8000a1a:	e722      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a20:	bf18      	it	ne
 8000a22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a26:	f47f aec5 	bne.w	80007b4 <__aeabi_dmul+0x19c>
 8000a2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a2e:	f47f af0d 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a36:	f47f aeeb 	bne.w	8000810 <__aeabi_dmul+0x1f8>
 8000a3a:	e712      	b.n	8000862 <__aeabi_dmul+0x24a>

08000a3c <__gedf2>:
 8000a3c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a40:	e006      	b.n	8000a50 <__cmpdf2+0x4>
 8000a42:	bf00      	nop

08000a44 <__ledf2>:
 8000a44:	f04f 0c01 	mov.w	ip, #1
 8000a48:	e002      	b.n	8000a50 <__cmpdf2+0x4>
 8000a4a:	bf00      	nop

08000a4c <__cmpdf2>:
 8000a4c:	f04f 0c01 	mov.w	ip, #1
 8000a50:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a54:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a66:	d01b      	beq.n	8000aa0 <__cmpdf2+0x54>
 8000a68:	b001      	add	sp, #4
 8000a6a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a6e:	bf0c      	ite	eq
 8000a70:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a74:	ea91 0f03 	teqne	r1, r3
 8000a78:	bf02      	ittt	eq
 8000a7a:	ea90 0f02 	teqeq	r0, r2
 8000a7e:	2000      	moveq	r0, #0
 8000a80:	4770      	bxeq	lr
 8000a82:	f110 0f00 	cmn.w	r0, #0
 8000a86:	ea91 0f03 	teq	r1, r3
 8000a8a:	bf58      	it	pl
 8000a8c:	4299      	cmppl	r1, r3
 8000a8e:	bf08      	it	eq
 8000a90:	4290      	cmpeq	r0, r2
 8000a92:	bf2c      	ite	cs
 8000a94:	17d8      	asrcs	r0, r3, #31
 8000a96:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a9a:	f040 0001 	orr.w	r0, r0, #1
 8000a9e:	4770      	bx	lr
 8000aa0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d102      	bne.n	8000ab0 <__cmpdf2+0x64>
 8000aaa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aae:	d107      	bne.n	8000ac0 <__cmpdf2+0x74>
 8000ab0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d1d6      	bne.n	8000a68 <__cmpdf2+0x1c>
 8000aba:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000abe:	d0d3      	beq.n	8000a68 <__cmpdf2+0x1c>
 8000ac0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdrcmple>:
 8000ac8:	4684      	mov	ip, r0
 8000aca:	4610      	mov	r0, r2
 8000acc:	4662      	mov	r2, ip
 8000ace:	468c      	mov	ip, r1
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	4663      	mov	r3, ip
 8000ad4:	e000      	b.n	8000ad8 <__aeabi_cdcmpeq>
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdcmpeq>:
 8000ad8:	b501      	push	{r0, lr}
 8000ada:	f7ff ffb7 	bl	8000a4c <__cmpdf2>
 8000ade:	2800      	cmp	r0, #0
 8000ae0:	bf48      	it	mi
 8000ae2:	f110 0f00 	cmnmi.w	r0, #0
 8000ae6:	bd01      	pop	{r0, pc}

08000ae8 <__aeabi_dcmpeq>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff fff4 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000af0:	bf0c      	ite	eq
 8000af2:	2001      	moveq	r0, #1
 8000af4:	2000      	movne	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmplt>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff ffea 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b04:	bf34      	ite	cc
 8000b06:	2001      	movcc	r0, #1
 8000b08:	2000      	movcs	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmple>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff ffe0 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b18:	bf94      	ite	ls
 8000b1a:	2001      	movls	r0, #1
 8000b1c:	2000      	movhi	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmpge>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff ffce 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b2c:	bf94      	ite	ls
 8000b2e:	2001      	movls	r0, #1
 8000b30:	2000      	movhi	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmpgt>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffc4 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b40:	bf34      	ite	cc
 8000b42:	2001      	movcc	r0, #1
 8000b44:	2000      	movcs	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmpun>:
 8000b4c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x10>
 8000b56:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b5a:	d10a      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x20>
 8000b66:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b6a:	d102      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b6c:	f04f 0000 	mov.w	r0, #0
 8000b70:	4770      	bx	lr
 8000b72:	f04f 0001 	mov.w	r0, #1
 8000b76:	4770      	bx	lr

08000b78 <__aeabi_d2iz>:
 8000b78:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b7c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b80:	d215      	bcs.n	8000bae <__aeabi_d2iz+0x36>
 8000b82:	d511      	bpl.n	8000ba8 <__aeabi_d2iz+0x30>
 8000b84:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b88:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b8c:	d912      	bls.n	8000bb4 <__aeabi_d2iz+0x3c>
 8000b8e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b92:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b96:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b9a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b9e:	fa23 f002 	lsr.w	r0, r3, r2
 8000ba2:	bf18      	it	ne
 8000ba4:	4240      	negne	r0, r0
 8000ba6:	4770      	bx	lr
 8000ba8:	f04f 0000 	mov.w	r0, #0
 8000bac:	4770      	bx	lr
 8000bae:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bb2:	d105      	bne.n	8000bc0 <__aeabi_d2iz+0x48>
 8000bb4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bb8:	bf08      	it	eq
 8000bba:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bbe:	4770      	bx	lr
 8000bc0:	f04f 0000 	mov.w	r0, #0
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop

08000bc8 <__aeabi_uldivmod>:
 8000bc8:	b953      	cbnz	r3, 8000be0 <__aeabi_uldivmod+0x18>
 8000bca:	b94a      	cbnz	r2, 8000be0 <__aeabi_uldivmod+0x18>
 8000bcc:	2900      	cmp	r1, #0
 8000bce:	bf08      	it	eq
 8000bd0:	2800      	cmpeq	r0, #0
 8000bd2:	bf1c      	itt	ne
 8000bd4:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000bd8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000bdc:	f000 b974 	b.w	8000ec8 <__aeabi_idiv0>
 8000be0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000be4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000be8:	f000 f806 	bl	8000bf8 <__udivmoddi4>
 8000bec:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bf0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bf4:	b004      	add	sp, #16
 8000bf6:	4770      	bx	lr

08000bf8 <__udivmoddi4>:
 8000bf8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bfc:	9d08      	ldr	r5, [sp, #32]
 8000bfe:	4604      	mov	r4, r0
 8000c00:	468e      	mov	lr, r1
 8000c02:	2b00      	cmp	r3, #0
 8000c04:	d14d      	bne.n	8000ca2 <__udivmoddi4+0xaa>
 8000c06:	428a      	cmp	r2, r1
 8000c08:	4694      	mov	ip, r2
 8000c0a:	d969      	bls.n	8000ce0 <__udivmoddi4+0xe8>
 8000c0c:	fab2 f282 	clz	r2, r2
 8000c10:	b152      	cbz	r2, 8000c28 <__udivmoddi4+0x30>
 8000c12:	fa01 f302 	lsl.w	r3, r1, r2
 8000c16:	f1c2 0120 	rsb	r1, r2, #32
 8000c1a:	fa20 f101 	lsr.w	r1, r0, r1
 8000c1e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c22:	ea41 0e03 	orr.w	lr, r1, r3
 8000c26:	4094      	lsls	r4, r2
 8000c28:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000c2c:	0c21      	lsrs	r1, r4, #16
 8000c2e:	fbbe f6f8 	udiv	r6, lr, r8
 8000c32:	fa1f f78c 	uxth.w	r7, ip
 8000c36:	fb08 e316 	mls	r3, r8, r6, lr
 8000c3a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000c3e:	fb06 f107 	mul.w	r1, r6, r7
 8000c42:	4299      	cmp	r1, r3
 8000c44:	d90a      	bls.n	8000c5c <__udivmoddi4+0x64>
 8000c46:	eb1c 0303 	adds.w	r3, ip, r3
 8000c4a:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000c4e:	f080 811f 	bcs.w	8000e90 <__udivmoddi4+0x298>
 8000c52:	4299      	cmp	r1, r3
 8000c54:	f240 811c 	bls.w	8000e90 <__udivmoddi4+0x298>
 8000c58:	3e02      	subs	r6, #2
 8000c5a:	4463      	add	r3, ip
 8000c5c:	1a5b      	subs	r3, r3, r1
 8000c5e:	b2a4      	uxth	r4, r4
 8000c60:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c64:	fb08 3310 	mls	r3, r8, r0, r3
 8000c68:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c6c:	fb00 f707 	mul.w	r7, r0, r7
 8000c70:	42a7      	cmp	r7, r4
 8000c72:	d90a      	bls.n	8000c8a <__udivmoddi4+0x92>
 8000c74:	eb1c 0404 	adds.w	r4, ip, r4
 8000c78:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000c7c:	f080 810a 	bcs.w	8000e94 <__udivmoddi4+0x29c>
 8000c80:	42a7      	cmp	r7, r4
 8000c82:	f240 8107 	bls.w	8000e94 <__udivmoddi4+0x29c>
 8000c86:	4464      	add	r4, ip
 8000c88:	3802      	subs	r0, #2
 8000c8a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c8e:	1be4      	subs	r4, r4, r7
 8000c90:	2600      	movs	r6, #0
 8000c92:	b11d      	cbz	r5, 8000c9c <__udivmoddi4+0xa4>
 8000c94:	40d4      	lsrs	r4, r2
 8000c96:	2300      	movs	r3, #0
 8000c98:	e9c5 4300 	strd	r4, r3, [r5]
 8000c9c:	4631      	mov	r1, r6
 8000c9e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ca2:	428b      	cmp	r3, r1
 8000ca4:	d909      	bls.n	8000cba <__udivmoddi4+0xc2>
 8000ca6:	2d00      	cmp	r5, #0
 8000ca8:	f000 80ef 	beq.w	8000e8a <__udivmoddi4+0x292>
 8000cac:	2600      	movs	r6, #0
 8000cae:	e9c5 0100 	strd	r0, r1, [r5]
 8000cb2:	4630      	mov	r0, r6
 8000cb4:	4631      	mov	r1, r6
 8000cb6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cba:	fab3 f683 	clz	r6, r3
 8000cbe:	2e00      	cmp	r6, #0
 8000cc0:	d14a      	bne.n	8000d58 <__udivmoddi4+0x160>
 8000cc2:	428b      	cmp	r3, r1
 8000cc4:	d302      	bcc.n	8000ccc <__udivmoddi4+0xd4>
 8000cc6:	4282      	cmp	r2, r0
 8000cc8:	f200 80f9 	bhi.w	8000ebe <__udivmoddi4+0x2c6>
 8000ccc:	1a84      	subs	r4, r0, r2
 8000cce:	eb61 0303 	sbc.w	r3, r1, r3
 8000cd2:	2001      	movs	r0, #1
 8000cd4:	469e      	mov	lr, r3
 8000cd6:	2d00      	cmp	r5, #0
 8000cd8:	d0e0      	beq.n	8000c9c <__udivmoddi4+0xa4>
 8000cda:	e9c5 4e00 	strd	r4, lr, [r5]
 8000cde:	e7dd      	b.n	8000c9c <__udivmoddi4+0xa4>
 8000ce0:	b902      	cbnz	r2, 8000ce4 <__udivmoddi4+0xec>
 8000ce2:	deff      	udf	#255	; 0xff
 8000ce4:	fab2 f282 	clz	r2, r2
 8000ce8:	2a00      	cmp	r2, #0
 8000cea:	f040 8092 	bne.w	8000e12 <__udivmoddi4+0x21a>
 8000cee:	eba1 010c 	sub.w	r1, r1, ip
 8000cf2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cf6:	fa1f fe8c 	uxth.w	lr, ip
 8000cfa:	2601      	movs	r6, #1
 8000cfc:	0c20      	lsrs	r0, r4, #16
 8000cfe:	fbb1 f3f7 	udiv	r3, r1, r7
 8000d02:	fb07 1113 	mls	r1, r7, r3, r1
 8000d06:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d0a:	fb0e f003 	mul.w	r0, lr, r3
 8000d0e:	4288      	cmp	r0, r1
 8000d10:	d908      	bls.n	8000d24 <__udivmoddi4+0x12c>
 8000d12:	eb1c 0101 	adds.w	r1, ip, r1
 8000d16:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000d1a:	d202      	bcs.n	8000d22 <__udivmoddi4+0x12a>
 8000d1c:	4288      	cmp	r0, r1
 8000d1e:	f200 80cb 	bhi.w	8000eb8 <__udivmoddi4+0x2c0>
 8000d22:	4643      	mov	r3, r8
 8000d24:	1a09      	subs	r1, r1, r0
 8000d26:	b2a4      	uxth	r4, r4
 8000d28:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d2c:	fb07 1110 	mls	r1, r7, r0, r1
 8000d30:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000d34:	fb0e fe00 	mul.w	lr, lr, r0
 8000d38:	45a6      	cmp	lr, r4
 8000d3a:	d908      	bls.n	8000d4e <__udivmoddi4+0x156>
 8000d3c:	eb1c 0404 	adds.w	r4, ip, r4
 8000d40:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000d44:	d202      	bcs.n	8000d4c <__udivmoddi4+0x154>
 8000d46:	45a6      	cmp	lr, r4
 8000d48:	f200 80bb 	bhi.w	8000ec2 <__udivmoddi4+0x2ca>
 8000d4c:	4608      	mov	r0, r1
 8000d4e:	eba4 040e 	sub.w	r4, r4, lr
 8000d52:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000d56:	e79c      	b.n	8000c92 <__udivmoddi4+0x9a>
 8000d58:	f1c6 0720 	rsb	r7, r6, #32
 8000d5c:	40b3      	lsls	r3, r6
 8000d5e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d62:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d66:	fa20 f407 	lsr.w	r4, r0, r7
 8000d6a:	fa01 f306 	lsl.w	r3, r1, r6
 8000d6e:	431c      	orrs	r4, r3
 8000d70:	40f9      	lsrs	r1, r7
 8000d72:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d76:	fa00 f306 	lsl.w	r3, r0, r6
 8000d7a:	fbb1 f8f9 	udiv	r8, r1, r9
 8000d7e:	0c20      	lsrs	r0, r4, #16
 8000d80:	fa1f fe8c 	uxth.w	lr, ip
 8000d84:	fb09 1118 	mls	r1, r9, r8, r1
 8000d88:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d8c:	fb08 f00e 	mul.w	r0, r8, lr
 8000d90:	4288      	cmp	r0, r1
 8000d92:	fa02 f206 	lsl.w	r2, r2, r6
 8000d96:	d90b      	bls.n	8000db0 <__udivmoddi4+0x1b8>
 8000d98:	eb1c 0101 	adds.w	r1, ip, r1
 8000d9c:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000da0:	f080 8088 	bcs.w	8000eb4 <__udivmoddi4+0x2bc>
 8000da4:	4288      	cmp	r0, r1
 8000da6:	f240 8085 	bls.w	8000eb4 <__udivmoddi4+0x2bc>
 8000daa:	f1a8 0802 	sub.w	r8, r8, #2
 8000dae:	4461      	add	r1, ip
 8000db0:	1a09      	subs	r1, r1, r0
 8000db2:	b2a4      	uxth	r4, r4
 8000db4:	fbb1 f0f9 	udiv	r0, r1, r9
 8000db8:	fb09 1110 	mls	r1, r9, r0, r1
 8000dbc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000dc0:	fb00 fe0e 	mul.w	lr, r0, lr
 8000dc4:	458e      	cmp	lr, r1
 8000dc6:	d908      	bls.n	8000dda <__udivmoddi4+0x1e2>
 8000dc8:	eb1c 0101 	adds.w	r1, ip, r1
 8000dcc:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000dd0:	d26c      	bcs.n	8000eac <__udivmoddi4+0x2b4>
 8000dd2:	458e      	cmp	lr, r1
 8000dd4:	d96a      	bls.n	8000eac <__udivmoddi4+0x2b4>
 8000dd6:	3802      	subs	r0, #2
 8000dd8:	4461      	add	r1, ip
 8000dda:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000dde:	fba0 9402 	umull	r9, r4, r0, r2
 8000de2:	eba1 010e 	sub.w	r1, r1, lr
 8000de6:	42a1      	cmp	r1, r4
 8000de8:	46c8      	mov	r8, r9
 8000dea:	46a6      	mov	lr, r4
 8000dec:	d356      	bcc.n	8000e9c <__udivmoddi4+0x2a4>
 8000dee:	d053      	beq.n	8000e98 <__udivmoddi4+0x2a0>
 8000df0:	b15d      	cbz	r5, 8000e0a <__udivmoddi4+0x212>
 8000df2:	ebb3 0208 	subs.w	r2, r3, r8
 8000df6:	eb61 010e 	sbc.w	r1, r1, lr
 8000dfa:	fa01 f707 	lsl.w	r7, r1, r7
 8000dfe:	fa22 f306 	lsr.w	r3, r2, r6
 8000e02:	40f1      	lsrs	r1, r6
 8000e04:	431f      	orrs	r7, r3
 8000e06:	e9c5 7100 	strd	r7, r1, [r5]
 8000e0a:	2600      	movs	r6, #0
 8000e0c:	4631      	mov	r1, r6
 8000e0e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e12:	f1c2 0320 	rsb	r3, r2, #32
 8000e16:	40d8      	lsrs	r0, r3
 8000e18:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e1c:	fa21 f303 	lsr.w	r3, r1, r3
 8000e20:	4091      	lsls	r1, r2
 8000e22:	4301      	orrs	r1, r0
 8000e24:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e28:	fa1f fe8c 	uxth.w	lr, ip
 8000e2c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000e30:	fb07 3610 	mls	r6, r7, r0, r3
 8000e34:	0c0b      	lsrs	r3, r1, #16
 8000e36:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000e3a:	fb00 f60e 	mul.w	r6, r0, lr
 8000e3e:	429e      	cmp	r6, r3
 8000e40:	fa04 f402 	lsl.w	r4, r4, r2
 8000e44:	d908      	bls.n	8000e58 <__udivmoddi4+0x260>
 8000e46:	eb1c 0303 	adds.w	r3, ip, r3
 8000e4a:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000e4e:	d22f      	bcs.n	8000eb0 <__udivmoddi4+0x2b8>
 8000e50:	429e      	cmp	r6, r3
 8000e52:	d92d      	bls.n	8000eb0 <__udivmoddi4+0x2b8>
 8000e54:	3802      	subs	r0, #2
 8000e56:	4463      	add	r3, ip
 8000e58:	1b9b      	subs	r3, r3, r6
 8000e5a:	b289      	uxth	r1, r1
 8000e5c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000e60:	fb07 3316 	mls	r3, r7, r6, r3
 8000e64:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e68:	fb06 f30e 	mul.w	r3, r6, lr
 8000e6c:	428b      	cmp	r3, r1
 8000e6e:	d908      	bls.n	8000e82 <__udivmoddi4+0x28a>
 8000e70:	eb1c 0101 	adds.w	r1, ip, r1
 8000e74:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000e78:	d216      	bcs.n	8000ea8 <__udivmoddi4+0x2b0>
 8000e7a:	428b      	cmp	r3, r1
 8000e7c:	d914      	bls.n	8000ea8 <__udivmoddi4+0x2b0>
 8000e7e:	3e02      	subs	r6, #2
 8000e80:	4461      	add	r1, ip
 8000e82:	1ac9      	subs	r1, r1, r3
 8000e84:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000e88:	e738      	b.n	8000cfc <__udivmoddi4+0x104>
 8000e8a:	462e      	mov	r6, r5
 8000e8c:	4628      	mov	r0, r5
 8000e8e:	e705      	b.n	8000c9c <__udivmoddi4+0xa4>
 8000e90:	4606      	mov	r6, r0
 8000e92:	e6e3      	b.n	8000c5c <__udivmoddi4+0x64>
 8000e94:	4618      	mov	r0, r3
 8000e96:	e6f8      	b.n	8000c8a <__udivmoddi4+0x92>
 8000e98:	454b      	cmp	r3, r9
 8000e9a:	d2a9      	bcs.n	8000df0 <__udivmoddi4+0x1f8>
 8000e9c:	ebb9 0802 	subs.w	r8, r9, r2
 8000ea0:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000ea4:	3801      	subs	r0, #1
 8000ea6:	e7a3      	b.n	8000df0 <__udivmoddi4+0x1f8>
 8000ea8:	4646      	mov	r6, r8
 8000eaa:	e7ea      	b.n	8000e82 <__udivmoddi4+0x28a>
 8000eac:	4620      	mov	r0, r4
 8000eae:	e794      	b.n	8000dda <__udivmoddi4+0x1e2>
 8000eb0:	4640      	mov	r0, r8
 8000eb2:	e7d1      	b.n	8000e58 <__udivmoddi4+0x260>
 8000eb4:	46d0      	mov	r8, sl
 8000eb6:	e77b      	b.n	8000db0 <__udivmoddi4+0x1b8>
 8000eb8:	3b02      	subs	r3, #2
 8000eba:	4461      	add	r1, ip
 8000ebc:	e732      	b.n	8000d24 <__udivmoddi4+0x12c>
 8000ebe:	4630      	mov	r0, r6
 8000ec0:	e709      	b.n	8000cd6 <__udivmoddi4+0xde>
 8000ec2:	4464      	add	r4, ip
 8000ec4:	3802      	subs	r0, #2
 8000ec6:	e742      	b.n	8000d4e <__udivmoddi4+0x156>

08000ec8 <__aeabi_idiv0>:
 8000ec8:	4770      	bx	lr
 8000eca:	bf00      	nop

08000ecc <BMP280_Read8>:
// Implementaciones

//Privadas
/*************************************************************************************/
static uint8_t BMP280_Read8(uint8_t addr)
{
 8000ecc:	b580      	push	{r7, lr}
 8000ece:	b084      	sub	sp, #16
 8000ed0:	af00      	add	r7, sp, #0
 8000ed2:	4603      	mov	r3, r0
 8000ed4:	71fb      	strb	r3, [r7, #7]
    uint8_t tmp[2];
	tmp[0] = addr;
 8000ed6:	79fb      	ldrb	r3, [r7, #7]
 8000ed8:	733b      	strb	r3, [r7, #12]
	tmp[0] |= (1<<BMP280_MODE_BIT_RW); // READ 0
 8000eda:	7b3b      	ldrb	r3, [r7, #12]
 8000edc:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000ee0:	b2db      	uxtb	r3, r3
 8000ee2:	733b      	strb	r3, [r7, #12]
	BMP280_SPI_TransmitReceive(tmp,BMP280_SIZE_8,BMP280_TIMEOUT);
 8000ee4:	f107 030c 	add.w	r3, r7, #12
 8000ee8:	220a      	movs	r2, #10
 8000eea:	2102      	movs	r1, #2
 8000eec:	4618      	mov	r0, r3
 8000eee:	f000 fcd7 	bl	80018a0 <BMP280_SPI_TransmitReceive>
	return tmp[1];
 8000ef2:	7b7b      	ldrb	r3, [r7, #13]
}
 8000ef4:	4618      	mov	r0, r3
 8000ef6:	3710      	adds	r7, #16
 8000ef8:	46bd      	mov	sp, r7
 8000efa:	bd80      	pop	{r7, pc}

08000efc <BMP280_Read16>:

static uint16_t BMP280_Read16(uint8_t addr)
{
 8000efc:	b580      	push	{r7, lr}
 8000efe:	b084      	sub	sp, #16
 8000f00:	af00      	add	r7, sp, #0
 8000f02:	4603      	mov	r3, r0
 8000f04:	71fb      	strb	r3, [r7, #7]
	uint8_t tmp[3];
	tmp[0] = addr;
 8000f06:	79fb      	ldrb	r3, [r7, #7]
 8000f08:	733b      	strb	r3, [r7, #12]
	tmp[0] |= (1<<BMP280_MODE_BIT_RW); // READ 0
 8000f0a:	7b3b      	ldrb	r3, [r7, #12]
 8000f0c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000f10:	b2db      	uxtb	r3, r3
 8000f12:	733b      	strb	r3, [r7, #12]
	BMP280_SPI_TransmitReceive(tmp,BMP280_SIZE_16,BMP280_TIMEOUT);
 8000f14:	f107 030c 	add.w	r3, r7, #12
 8000f18:	220a      	movs	r2, #10
 8000f1a:	2103      	movs	r1, #3
 8000f1c:	4618      	mov	r0, r3
 8000f1e:	f000 fcbf 	bl	80018a0 <BMP280_SPI_TransmitReceive>
	return ((tmp[1] << 8) | tmp[2]);
 8000f22:	7b7b      	ldrb	r3, [r7, #13]
 8000f24:	021b      	lsls	r3, r3, #8
 8000f26:	b21a      	sxth	r2, r3
 8000f28:	7bbb      	ldrb	r3, [r7, #14]
 8000f2a:	b21b      	sxth	r3, r3
 8000f2c:	4313      	orrs	r3, r2
 8000f2e:	b21b      	sxth	r3, r3
 8000f30:	b29b      	uxth	r3, r3
}
 8000f32:	4618      	mov	r0, r3
 8000f34:	3710      	adds	r7, #16
 8000f36:	46bd      	mov	sp, r7
 8000f38:	bd80      	pop	{r7, pc}

08000f3a <BMP280_Read16LE>:

static uint16_t BMP280_Read16LE(uint8_t addr)
{
 8000f3a:	b580      	push	{r7, lr}
 8000f3c:	b084      	sub	sp, #16
 8000f3e:	af00      	add	r7, sp, #0
 8000f40:	4603      	mov	r3, r0
 8000f42:	71fb      	strb	r3, [r7, #7]
	uint16_t tmp;
	tmp = BMP280_Read16(addr);
 8000f44:	79fb      	ldrb	r3, [r7, #7]
 8000f46:	4618      	mov	r0, r3
 8000f48:	f7ff ffd8 	bl	8000efc <BMP280_Read16>
 8000f4c:	4603      	mov	r3, r0
 8000f4e:	81fb      	strh	r3, [r7, #14]
	return (tmp >> 8) | (tmp << 8);
 8000f50:	89fb      	ldrh	r3, [r7, #14]
 8000f52:	0a1b      	lsrs	r3, r3, #8
 8000f54:	b29b      	uxth	r3, r3
 8000f56:	b21a      	sxth	r2, r3
 8000f58:	89fb      	ldrh	r3, [r7, #14]
 8000f5a:	021b      	lsls	r3, r3, #8
 8000f5c:	b21b      	sxth	r3, r3
 8000f5e:	4313      	orrs	r3, r2
 8000f60:	b21b      	sxth	r3, r3
 8000f62:	b29b      	uxth	r3, r3
}
 8000f64:	4618      	mov	r0, r3
 8000f66:	3710      	adds	r7, #16
 8000f68:	46bd      	mov	sp, r7
 8000f6a:	bd80      	pop	{r7, pc}

08000f6c <BMP280_Write8>:

static void BMP280_Write8(uint8_t address, uint8_t data)
{
 8000f6c:	b580      	push	{r7, lr}
 8000f6e:	b084      	sub	sp, #16
 8000f70:	af00      	add	r7, sp, #0
 8000f72:	4603      	mov	r3, r0
 8000f74:	460a      	mov	r2, r1
 8000f76:	71fb      	strb	r3, [r7, #7]
 8000f78:	4613      	mov	r3, r2
 8000f7a:	71bb      	strb	r3, [r7, #6]
	uint8_t tmp[2];
	tmp[0] = address;
 8000f7c:	79fb      	ldrb	r3, [r7, #7]
 8000f7e:	733b      	strb	r3, [r7, #12]
	tmp[0] &=~(1<<BMP280_MODE_BIT_RW); // WRITE 1
 8000f80:	7b3b      	ldrb	r3, [r7, #12]
 8000f82:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000f86:	b2db      	uxtb	r3, r3
 8000f88:	733b      	strb	r3, [r7, #12]
	tmp[1] = data;
 8000f8a:	79bb      	ldrb	r3, [r7, #6]
 8000f8c:	737b      	strb	r3, [r7, #13]
	BMP280_SPI_TransmitReceive(tmp,BMP280_SIZE_8,BMP280_TIMEOUT);
 8000f8e:	f107 030c 	add.w	r3, r7, #12
 8000f92:	220a      	movs	r2, #10
 8000f94:	2102      	movs	r1, #2
 8000f96:	4618      	mov	r0, r3
 8000f98:	f000 fc82 	bl	80018a0 <BMP280_SPI_TransmitReceive>
}
 8000f9c:	bf00      	nop
 8000f9e:	3710      	adds	r7, #16
 8000fa0:	46bd      	mov	sp, r7
 8000fa2:	bd80      	pop	{r7, pc}

08000fa4 <BMP280_Read24>:

static uint32_t BMP280_Read24(uint8_t addr)
{
 8000fa4:	b580      	push	{r7, lr}
 8000fa6:	b084      	sub	sp, #16
 8000fa8:	af00      	add	r7, sp, #0
 8000faa:	4603      	mov	r3, r0
 8000fac:	71fb      	strb	r3, [r7, #7]
	uint8_t tmp[4];
	tmp[0] = addr;
 8000fae:	79fb      	ldrb	r3, [r7, #7]
 8000fb0:	733b      	strb	r3, [r7, #12]
	tmp[0] |= (1<<BMP280_MODE_BIT_RW); // READ 0
 8000fb2:	7b3b      	ldrb	r3, [r7, #12]
 8000fb4:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000fb8:	b2db      	uxtb	r3, r3
 8000fba:	733b      	strb	r3, [r7, #12]
	BMP280_SPI_TransmitReceive(tmp,BMP280_SIZE_24,BMP280_TIMEOUT);
 8000fbc:	f107 030c 	add.w	r3, r7, #12
 8000fc0:	220a      	movs	r2, #10
 8000fc2:	2103      	movs	r1, #3
 8000fc4:	4618      	mov	r0, r3
 8000fc6:	f000 fc6b 	bl	80018a0 <BMP280_SPI_TransmitReceive>
	return ((tmp[1] << 16) | tmp[2] << 8 | tmp[3]);
 8000fca:	7b7b      	ldrb	r3, [r7, #13]
 8000fcc:	041a      	lsls	r2, r3, #16
 8000fce:	7bbb      	ldrb	r3, [r7, #14]
 8000fd0:	021b      	lsls	r3, r3, #8
 8000fd2:	4313      	orrs	r3, r2
 8000fd4:	7bfa      	ldrb	r2, [r7, #15]
 8000fd6:	4313      	orrs	r3, r2
}
 8000fd8:	4618      	mov	r0, r3
 8000fda:	3710      	adds	r7, #16
 8000fdc:	46bd      	mov	sp, r7
 8000fde:	bd80      	pop	{r7, pc}

08000fe0 <BMP280_Init>:
/*************************************************************************************/
//Públicas
uint8_t BMP280_Init(SPI_HandleTypeDef *spi_handler, uint8_t temperature_resolution, uint8_t mode)
{
 8000fe0:	b580      	push	{r7, lr}
 8000fe2:	b086      	sub	sp, #24
 8000fe4:	af00      	add	r7, sp, #0
 8000fe6:	6078      	str	r0, [r7, #4]
 8000fe8:	460b      	mov	r3, r1
 8000fea:	70fb      	strb	r3, [r7, #3]
 8000fec:	4613      	mov	r3, r2
 8000fee:	70bb      	strb	r3, [r7, #2]
	spi_h = spi_handler;
 8000ff0:	4a31      	ldr	r2, [pc, #196]	; (80010b8 <BMP280_Init+0xd8>)
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	6013      	str	r3, [r2, #0]
	uint8_t ret;
	uint8_t id;
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_RESET);
 8000ff6:	2200      	movs	r2, #0
 8000ff8:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000ffc:	482f      	ldr	r0, [pc, #188]	; (80010bc <BMP280_Init+0xdc>)
 8000ffe:	f001 fb27 	bl	8002650 <HAL_GPIO_WritePin>
	HAL_Delay(5);
 8001002:	2005      	movs	r0, #5
 8001004:	f001 f86e 	bl	80020e4 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_SET);
 8001008:	2201      	movs	r2, #1
 800100a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800100e:	482b      	ldr	r0, [pc, #172]	; (80010bc <BMP280_Init+0xdc>)
 8001010:	f001 fb1e 	bl	8002650 <HAL_GPIO_WritePin>

	if (mode > BMP280_NORMALMODE)
 8001014:	78bb      	ldrb	r3, [r7, #2]
 8001016:	2b03      	cmp	r3, #3
 8001018:	d901      	bls.n	800101e <BMP280_Init+0x3e>
	    mode = BMP280_NORMALMODE;
 800101a:	2303      	movs	r3, #3
 800101c:	70bb      	strb	r3, [r7, #2]
	_mode = mode;
 800101e:	4a28      	ldr	r2, [pc, #160]	; (80010c0 <BMP280_Init+0xe0>)
 8001020:	78bb      	ldrb	r3, [r7, #2]
 8001022:	7013      	strb	r3, [r2, #0]
	if(mode == BMP280_FORCEDMODE)
 8001024:	78bb      	ldrb	r3, [r7, #2]
 8001026:	2b01      	cmp	r3, #1
 8001028:	d101      	bne.n	800102e <BMP280_Init+0x4e>
		mode = BMP280_SLEEPMODE;
 800102a:	2300      	movs	r3, #0
 800102c:	70bb      	strb	r3, [r7, #2]

	if (temperature_resolution > BMP280_TEMPERATURE_20BIT)
 800102e:	78fb      	ldrb	r3, [r7, #3]
 8001030:	2b05      	cmp	r3, #5
 8001032:	d901      	bls.n	8001038 <BMP280_Init+0x58>
		temperature_resolution = BMP280_TEMPERATURE_20BIT;
 8001034:	2305      	movs	r3, #5
 8001036:	70fb      	strb	r3, [r7, #3]
	_temperature_res = temperature_resolution;
 8001038:	4a22      	ldr	r2, [pc, #136]	; (80010c4 <BMP280_Init+0xe4>)
 800103a:	78fb      	ldrb	r3, [r7, #3]
 800103c:	7013      	strb	r3, [r2, #0]

	for(int i=0;i<ESPERA_DEVICE;i++)
 800103e:	2300      	movs	r3, #0
 8001040:	613b      	str	r3, [r7, #16]
 8001042:	e00f      	b.n	8001064 <BMP280_Init+0x84>
	{
		id=BMP280_Read8(BMP280_CHIPID);
 8001044:	20d0      	movs	r0, #208	; 0xd0
 8001046:	f7ff ff41 	bl	8000ecc <BMP280_Read8>
 800104a:	4603      	mov	r3, r0
 800104c:	73fb      	strb	r3, [r7, #15]
		if (id==BMP280_DEVICE_ID){
 800104e:	7bfb      	ldrb	r3, [r7, #15]
 8001050:	2b58      	cmp	r3, #88	; 0x58
 8001052:	d102      	bne.n	800105a <BMP280_Init+0x7a>
			ret=0;// sensor detectado
 8001054:	2300      	movs	r3, #0
 8001056:	75fb      	strb	r3, [r7, #23]
			break;
 8001058:	e007      	b.n	800106a <BMP280_Init+0x8a>
		}else
		{
			ret=-1;
 800105a:	23ff      	movs	r3, #255	; 0xff
 800105c:	75fb      	strb	r3, [r7, #23]
	for(int i=0;i<ESPERA_DEVICE;i++)
 800105e:	693b      	ldr	r3, [r7, #16]
 8001060:	3301      	adds	r3, #1
 8001062:	613b      	str	r3, [r7, #16]
 8001064:	693b      	ldr	r3, [r7, #16]
 8001066:	2b09      	cmp	r3, #9
 8001068:	ddec      	ble.n	8001044 <BMP280_Init+0x64>
	}

	//while(BMP280_Read8(BMP280_CHIPID) != BMP280_DEVICE_ID);

	//Calibración
	t1 = BMP280_Read16LE(BMP280_DIG_T1);
 800106a:	2088      	movs	r0, #136	; 0x88
 800106c:	f7ff ff65 	bl	8000f3a <BMP280_Read16LE>
 8001070:	4603      	mov	r3, r0
 8001072:	461a      	mov	r2, r3
 8001074:	4b14      	ldr	r3, [pc, #80]	; (80010c8 <BMP280_Init+0xe8>)
 8001076:	801a      	strh	r2, [r3, #0]
	t2 = BMP280_Read16LE(BMP280_DIG_T2);
 8001078:	208a      	movs	r0, #138	; 0x8a
 800107a:	f7ff ff5e 	bl	8000f3a <BMP280_Read16LE>
 800107e:	4603      	mov	r3, r0
 8001080:	b21a      	sxth	r2, r3
 8001082:	4b12      	ldr	r3, [pc, #72]	; (80010cc <BMP280_Init+0xec>)
 8001084:	801a      	strh	r2, [r3, #0]
	t3 = BMP280_Read16LE(BMP280_DIG_T3);
 8001086:	208c      	movs	r0, #140	; 0x8c
 8001088:	f7ff ff57 	bl	8000f3a <BMP280_Read16LE>
 800108c:	4603      	mov	r3, r0
 800108e:	b21a      	sxth	r2, r3
 8001090:	4b0f      	ldr	r3, [pc, #60]	; (80010d0 <BMP280_Init+0xf0>)
 8001092:	801a      	strh	r2, [r3, #0]

	BMP280_Write8(BMP280_CONTROL, (temperature_resolution<< BMP280_BIT_RESOLUTION )| mode);
 8001094:	78fb      	ldrb	r3, [r7, #3]
 8001096:	015b      	lsls	r3, r3, #5
 8001098:	b25a      	sxtb	r2, r3
 800109a:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800109e:	4313      	orrs	r3, r2
 80010a0:	b25b      	sxtb	r3, r3
 80010a2:	b2db      	uxtb	r3, r3
 80010a4:	4619      	mov	r1, r3
 80010a6:	20f4      	movs	r0, #244	; 0xf4
 80010a8:	f7ff ff60 	bl	8000f6c <BMP280_Write8>
	return ret;
 80010ac:	7dfb      	ldrb	r3, [r7, #23]
}
 80010ae:	4618      	mov	r0, r3
 80010b0:	3718      	adds	r7, #24
 80010b2:	46bd      	mov	sp, r7
 80010b4:	bd80      	pop	{r7, pc}
 80010b6:	bf00      	nop
 80010b8:	200001fc 	.word	0x200001fc
 80010bc:	40020c00 	.word	0x40020c00
 80010c0:	20000201 	.word	0x20000201
 80010c4:	20000200 	.word	0x20000200
 80010c8:	20000206 	.word	0x20000206
 80010cc:	20000202 	.word	0x20000202
 80010d0:	20000204 	.word	0x20000204

080010d4 <BMP280_ReadTemperature>:

float BMP280_ReadTemperature(void)
{
 80010d4:	b580      	push	{r7, lr}
 80010d6:	b086      	sub	sp, #24
 80010d8:	af00      	add	r7, sp, #0
  int32_t var1, var2;

  if(_mode == BMP280_FORCEDMODE)
 80010da:	4b3d      	ldr	r3, [pc, #244]	; (80011d0 <BMP280_ReadTemperature+0xfc>)
 80010dc:	781b      	ldrb	r3, [r3, #0]
 80010de:	2b01      	cmp	r3, #1
 80010e0:	d16d      	bne.n	80011be <BMP280_ReadTemperature+0xea>
  {
	  uint8_t mode;
	  uint8_t ctrl = BMP280_Read8(BMP280_CONTROL);// Se verifica el modo FORCE
 80010e2:	20f4      	movs	r0, #244	; 0xf4
 80010e4:	f7ff fef2 	bl	8000ecc <BMP280_Read8>
 80010e8:	4603      	mov	r3, r0
 80010ea:	75fb      	strb	r3, [r7, #23]
	  ctrl &= ~(0x03);
 80010ec:	7dfb      	ldrb	r3, [r7, #23]
 80010ee:	f023 0303 	bic.w	r3, r3, #3
 80010f2:	75fb      	strb	r3, [r7, #23]
	  ctrl |= BMP280_FORCEDMODE;
 80010f4:	7dfb      	ldrb	r3, [r7, #23]
 80010f6:	f043 0301 	orr.w	r3, r3, #1
 80010fa:	75fb      	strb	r3, [r7, #23]
	  // Debido a que no puede accederse al dato si no está en FORCEMODE
	  // Se carga FORCEMODE
	  BMP280_Write8(BMP280_CONTROL, ctrl);
 80010fc:	7dfb      	ldrb	r3, [r7, #23]
 80010fe:	4619      	mov	r1, r3
 8001100:	20f4      	movs	r0, #244	; 0xf4
 8001102:	f7ff ff33 	bl	8000f6c <BMP280_Write8>
	  mode = BMP280_Read8(BMP280_CONTROL);
 8001106:	20f4      	movs	r0, #244	; 0xf4
 8001108:	f7ff fee0 	bl	8000ecc <BMP280_Read8>
 800110c:	4603      	mov	r3, r0
 800110e:	75bb      	strb	r3, [r7, #22]
	  mode &= 0x03;
 8001110:	7dbb      	ldrb	r3, [r7, #22]
 8001112:	f003 0303 	and.w	r3, r3, #3
 8001116:	75bb      	strb	r3, [r7, #22]

	  if(mode == BMP280_FORCEDMODE)
 8001118:	7dbb      	ldrb	r3, [r7, #22]
 800111a:	2b01      	cmp	r3, #1
 800111c:	d14f      	bne.n	80011be <BMP280_ReadTemperature+0xea>
		  // SLEEPMODE
		  // Solo puede leerse el dato cuando terminó la conversión,
		  // es decir en SLEEPMODE.
		  while(1)
		  {
			  mode = BMP280_Read8(BMP280_CONTROL);
 800111e:	20f4      	movs	r0, #244	; 0xf4
 8001120:	f7ff fed4 	bl	8000ecc <BMP280_Read8>
 8001124:	4603      	mov	r3, r0
 8001126:	75bb      	strb	r3, [r7, #22]
			  mode &= 0x03;
 8001128:	7dbb      	ldrb	r3, [r7, #22]
 800112a:	f003 0303 	and.w	r3, r3, #3
 800112e:	75bb      	strb	r3, [r7, #22]
			  if(mode == BMP280_SLEEPMODE)
 8001130:	7dbb      	ldrb	r3, [r7, #22]
 8001132:	2b00      	cmp	r3, #0
 8001134:	d000      	beq.n	8001138 <BMP280_ReadTemperature+0x64>
			  mode = BMP280_Read8(BMP280_CONTROL);
 8001136:	e7f2      	b.n	800111e <BMP280_ReadTemperature+0x4a>
				  break;
 8001138:	bf00      	nop
		  }
		  // Ecuación de conversión dada por el fabricante
		  // Temperatura en grados Celsius
		  int32_t adc_T = BMP280_Read24(BMP280_TEMPDATA);
 800113a:	20fa      	movs	r0, #250	; 0xfa
 800113c:	f7ff ff32 	bl	8000fa4 <BMP280_Read24>
 8001140:	4603      	mov	r3, r0
 8001142:	613b      	str	r3, [r7, #16]
		  adc_T >>= 4;
 8001144:	693b      	ldr	r3, [r7, #16]
 8001146:	111b      	asrs	r3, r3, #4
 8001148:	613b      	str	r3, [r7, #16]

		  var1  = ((((adc_T>>3) - ((int32_t)t1 <<1))) *
 800114a:	693b      	ldr	r3, [r7, #16]
 800114c:	10da      	asrs	r2, r3, #3
 800114e:	4b21      	ldr	r3, [pc, #132]	; (80011d4 <BMP280_ReadTemperature+0x100>)
 8001150:	881b      	ldrh	r3, [r3, #0]
 8001152:	005b      	lsls	r3, r3, #1
 8001154:	1ad3      	subs	r3, r2, r3
				  ((int32_t)t2)) >> 11;
 8001156:	4a20      	ldr	r2, [pc, #128]	; (80011d8 <BMP280_ReadTemperature+0x104>)
 8001158:	f9b2 2000 	ldrsh.w	r2, [r2]
		  var1  = ((((adc_T>>3) - ((int32_t)t1 <<1))) *
 800115c:	fb02 f303 	mul.w	r3, r2, r3
 8001160:	12db      	asrs	r3, r3, #11
 8001162:	60fb      	str	r3, [r7, #12]

		  var2  = (((((adc_T>>4) - ((int32_t)t1)) *
 8001164:	693b      	ldr	r3, [r7, #16]
 8001166:	111b      	asrs	r3, r3, #4
 8001168:	4a1a      	ldr	r2, [pc, #104]	; (80011d4 <BMP280_ReadTemperature+0x100>)
 800116a:	8812      	ldrh	r2, [r2, #0]
 800116c:	1a9b      	subs	r3, r3, r2
				  ((adc_T>>4) - ((int32_t)t1))) >> 12) *
 800116e:	693a      	ldr	r2, [r7, #16]
 8001170:	1112      	asrs	r2, r2, #4
 8001172:	4918      	ldr	r1, [pc, #96]	; (80011d4 <BMP280_ReadTemperature+0x100>)
 8001174:	8809      	ldrh	r1, [r1, #0]
 8001176:	1a52      	subs	r2, r2, r1
		  var2  = (((((adc_T>>4) - ((int32_t)t1)) *
 8001178:	fb02 f303 	mul.w	r3, r2, r3
				  ((adc_T>>4) - ((int32_t)t1))) >> 12) *
 800117c:	131b      	asrs	r3, r3, #12
				  ((int32_t)t3)) >> 14;
 800117e:	4a17      	ldr	r2, [pc, #92]	; (80011dc <BMP280_ReadTemperature+0x108>)
 8001180:	f9b2 2000 	ldrsh.w	r2, [r2]
				  ((adc_T>>4) - ((int32_t)t1))) >> 12) *
 8001184:	fb02 f303 	mul.w	r3, r2, r3
		  var2  = (((((adc_T>>4) - ((int32_t)t1)) *
 8001188:	139b      	asrs	r3, r3, #14
 800118a:	60bb      	str	r3, [r7, #8]

		  t_fine = var1 + var2;
 800118c:	68fa      	ldr	r2, [r7, #12]
 800118e:	68bb      	ldr	r3, [r7, #8]
 8001190:	4413      	add	r3, r2
 8001192:	4a13      	ldr	r2, [pc, #76]	; (80011e0 <BMP280_ReadTemperature+0x10c>)
 8001194:	6013      	str	r3, [r2, #0]

		  float T  = (t_fine * 5 + 128) >> 8;
 8001196:	4b12      	ldr	r3, [pc, #72]	; (80011e0 <BMP280_ReadTemperature+0x10c>)
 8001198:	681a      	ldr	r2, [r3, #0]
 800119a:	4613      	mov	r3, r2
 800119c:	009b      	lsls	r3, r3, #2
 800119e:	4413      	add	r3, r2
 80011a0:	3380      	adds	r3, #128	; 0x80
 80011a2:	121b      	asrs	r3, r3, #8
 80011a4:	ee07 3a90 	vmov	s15, r3
 80011a8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80011ac:	edc7 7a01 	vstr	s15, [r7, #4]
		  return T/100;
 80011b0:	edd7 7a01 	vldr	s15, [r7, #4]
 80011b4:	eddf 6a0b 	vldr	s13, [pc, #44]	; 80011e4 <BMP280_ReadTemperature+0x110>
 80011b8:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80011bc:	e001      	b.n	80011c2 <BMP280_ReadTemperature+0xee>
	  }
  }
  return -99;
 80011be:	ed9f 7a0a 	vldr	s14, [pc, #40]	; 80011e8 <BMP280_ReadTemperature+0x114>
}
 80011c2:	eef0 7a47 	vmov.f32	s15, s14
 80011c6:	eeb0 0a67 	vmov.f32	s0, s15
 80011ca:	3718      	adds	r7, #24
 80011cc:	46bd      	mov	sp, r7
 80011ce:	bd80      	pop	{r7, pc}
 80011d0:	20000201 	.word	0x20000201
 80011d4:	20000206 	.word	0x20000206
 80011d8:	20000202 	.word	0x20000202
 80011dc:	20000204 	.word	0x20000204
 80011e0:	20000208 	.word	0x20000208
 80011e4:	42c80000 	.word	0x42c80000
 80011e8:	c2c60000 	.word	0xc2c60000

080011ec <FSM_Termometro_Init>:
// Implementaciones

//Privadas*****************************************************************************/
//Configuración e inicialización de puertos y periféricos
static void FSM_Termometro_Init(void)
{
 80011ec:	b5f0      	push	{r4, r5, r6, r7, lr}
 80011ee:	b093      	sub	sp, #76	; 0x4c
 80011f0:	af12      	add	r7, sp, #72	; 0x48
	  setSPI_Port_Name(hspi1);
 80011f2:	4c1b      	ldr	r4, [pc, #108]	; (8001260 <FSM_Termometro_Init+0x74>)
 80011f4:	4668      	mov	r0, sp
 80011f6:	f104 0310 	add.w	r3, r4, #16
 80011fa:	2248      	movs	r2, #72	; 0x48
 80011fc:	4619      	mov	r1, r3
 80011fe:	f003 fa41 	bl	8004684 <memcpy>
 8001202:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8001206:	f000 fa7b 	bl	8001700 <setSPI_Port_Name>
	  setI2C_Port_Name(hi2c2);
 800120a:	4c16      	ldr	r4, [pc, #88]	; (8001264 <FSM_Termometro_Init+0x78>)
 800120c:	4668      	mov	r0, sp
 800120e:	f104 0310 	add.w	r3, r4, #16
 8001212:	2244      	movs	r2, #68	; 0x44
 8001214:	4619      	mov	r1, r3
 8001216:	f003 fa35 	bl	8004684 <memcpy>
 800121a:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800121e:	f000 fa87 	bl	8001730 <setI2C_Port_Name>
	  setUART_Port_Name(huart3);
 8001222:	4e11      	ldr	r6, [pc, #68]	; (8001268 <FSM_Termometro_Init+0x7c>)
 8001224:	466d      	mov	r5, sp
 8001226:	f106 0410 	add.w	r4, r6, #16
 800122a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800122c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800122e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001230:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001232:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001234:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001236:	6823      	ldr	r3, [r4, #0]
 8001238:	602b      	str	r3, [r5, #0]
 800123a:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 800123e:	f000 fa8f 	bl	8001760 <setUART_Port_Name>

	  MX_GPIO_Init();
 8001242:	f000 faa5 	bl	8001790 <MX_GPIO_Init>
	  MX_SPI_Init();
 8001246:	f000 faf5 	bl	8001834 <MX_SPI_Init>
	  MX_USART_UART_Init();
 800124a:	f000 fbbf 	bl	80019cc <MX_USART_UART_Init>
	  MX_I2C_Init();
 800124e:	f000 fb4d 	bl	80018ec <MX_I2C_Init>
	  LCD44780_Init();
 8001252:	f000 f99b 	bl	800158c <LCD44780_Init>
}
 8001256:	bf00      	nop
 8001258:	3704      	adds	r7, #4
 800125a:	46bd      	mov	sp, r7
 800125c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800125e:	bf00      	nop
 8001260:	2000020c 	.word	0x2000020c
 8001264:	20000264 	.word	0x20000264
 8001268:	200002b8 	.word	0x200002b8

0800126c <FSM_Termometro_Connect>:
// La medición se realiza en modo Forzado (FORCEMODE) y a la frecuencia de muestreo menor
// Verificación de la conexión del sensor con el microprocesador
// ver datasheet BMP280
static uint8_t FSM_Termometro_Connect(void)
{
 800126c:	b580      	push	{r7, lr}
 800126e:	b082      	sub	sp, #8
 8001270:	af00      	add	r7, sp, #0
	 uint8_t ret;
	 ret=BMP280_Init(&hspi1, BMP280_TEMPERATURE_16BIT, BMP280_FORCEDMODE);
 8001272:	2201      	movs	r2, #1
 8001274:	2101      	movs	r1, #1
 8001276:	480b      	ldr	r0, [pc, #44]	; (80012a4 <FSM_Termometro_Connect+0x38>)
 8001278:	f7ff feb2 	bl	8000fe0 <BMP280_Init>
 800127c:	4603      	mov	r3, r0
 800127e:	71fb      	strb	r3, [r7, #7]
	 HAL_Delay(500);
 8001280:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001284:	f000 ff2e 	bl	80020e4 <HAL_Delay>

	 if (ret!=0){
 8001288:	79fb      	ldrb	r3, [r7, #7]
 800128a:	2b00      	cmp	r3, #0
 800128c:	d005      	beq.n	800129a <FSM_Termometro_Connect+0x2e>
		  ret =-1; // No se detectó el sensor
 800128e:	23ff      	movs	r3, #255	; 0xff
 8001290:	71fb      	strb	r3, [r7, #7]
		  UART_SensorConnectError();
 8001292:	f000 fbf9 	bl	8001a88 <UART_SensorConnectError>
		  LCD44780_SensorConnectError();
 8001296:	f000 fa1b 	bl	80016d0 <LCD44780_SensorConnectError>
	  }
	 return ret;
 800129a:	79fb      	ldrb	r3, [r7, #7]
}
 800129c:	4618      	mov	r0, r3
 800129e:	3708      	adds	r7, #8
 80012a0:	46bd      	mov	sp, r7
 80012a2:	bd80      	pop	{r7, pc}
 80012a4:	2000020c 	.word	0x2000020c

080012a8 <FSM_Termometro_Measure>:

int8_t FSM_Termometro_Measure(void)
{
 80012a8:	b580      	push	{r7, lr}
 80012aa:	b082      	sub	sp, #8
 80012ac:	af00      	add	r7, sp, #0
	  int8_t ret;
	  temperature=BMP280_ReadTemperature();
 80012ae:	f7ff ff11 	bl	80010d4 <BMP280_ReadTemperature>
 80012b2:	eef0 7a40 	vmov.f32	s15, s0
 80012b6:	4b19      	ldr	r3, [pc, #100]	; (800131c <FSM_Termometro_Measure+0x74>)
 80012b8:	edc3 7a00 	vstr	s15, [r3]

	  if ((temperature<TEMPERATURE_MAX) && (temperature>TEMPERATURE_MIN)){
 80012bc:	4b17      	ldr	r3, [pc, #92]	; (800131c <FSM_Termometro_Measure+0x74>)
 80012be:	edd3 7a00 	vldr	s15, [r3]
 80012c2:	ed9f 7a17 	vldr	s14, [pc, #92]	; 8001320 <FSM_Termometro_Measure+0x78>
 80012c6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80012ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80012ce:	d518      	bpl.n	8001302 <FSM_Termometro_Measure+0x5a>
 80012d0:	4b12      	ldr	r3, [pc, #72]	; (800131c <FSM_Termometro_Measure+0x74>)
 80012d2:	edd3 7a00 	vldr	s15, [r3]
 80012d6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80012da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80012de:	dd10      	ble.n	8001302 <FSM_Termometro_Measure+0x5a>
		  UART_Send_Temperature(temperature);
 80012e0:	4b0e      	ldr	r3, [pc, #56]	; (800131c <FSM_Termometro_Measure+0x74>)
 80012e2:	edd3 7a00 	vldr	s15, [r3]
 80012e6:	eeb0 0a67 	vmov.f32	s0, s15
 80012ea:	f000 fb99 	bl	8001a20 <UART_Send_Temperature>
		  LCD44780_UpdateTemperature(temperature);
 80012ee:	4b0b      	ldr	r3, [pc, #44]	; (800131c <FSM_Termometro_Measure+0x74>)
 80012f0:	edd3 7a00 	vldr	s15, [r3]
 80012f4:	eeb0 0a67 	vmov.f32	s0, s15
 80012f8:	f000 f97a 	bl	80015f0 <LCD44780_UpdateTemperature>
		  ret =0; // Dentro del rango
 80012fc:	2300      	movs	r3, #0
 80012fe:	71fb      	strb	r3, [r7, #7]
 8001300:	e005      	b.n	800130e <FSM_Termometro_Measure+0x66>
	  }else
	  	  {
		  	  LCD44780_SensorTemperatureError();
 8001302:	f000 f9cd 	bl	80016a0 <LCD44780_SensorTemperatureError>
		  	  UART_SensorTemperatureError();
 8001306:	f000 fbb1 	bl	8001a6c <UART_SensorTemperatureError>
		  	  ret=-1; // Fuera del rango
 800130a:	23ff      	movs	r3, #255	; 0xff
 800130c:	71fb      	strb	r3, [r7, #7]
	  	  }
	  return ret;
 800130e:	f997 3007 	ldrsb.w	r3, [r7, #7]
}
 8001312:	4618      	mov	r0, r3
 8001314:	3708      	adds	r7, #8
 8001316:	46bd      	mov	sp, r7
 8001318:	bd80      	pop	{r7, pc}
 800131a:	bf00      	nop
 800131c:	20000300 	.word	0x20000300
 8001320:	42480000 	.word	0x42480000

08001324 <FSM_Termometro_Range>:

static void FSM_Termometro_Range(void)
{
 8001324:	b580      	push	{r7, lr}
 8001326:	af00      	add	r7, sp, #0
	if(temperature>TEMPERATURE_ALARM)
 8001328:	4b08      	ldr	r3, [pc, #32]	; (800134c <FSM_Termometro_Range+0x28>)
 800132a:	edd3 7a00 	vldr	s15, [r3]
 800132e:	eeb3 7a0c 	vmov.f32	s14, #60	; 0x41e00000  28.0
 8001332:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001336:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800133a:	dc00      	bgt.n	800133e <FSM_Termometro_Range+0x1a>
	{
		LCD44780_TemperatureAlarm();
		UART_TemperatureAlarm();
	}
}
 800133c:	e003      	b.n	8001346 <FSM_Termometro_Range+0x22>
		LCD44780_TemperatureAlarm();
 800133e:	f000 f999 	bl	8001674 <LCD44780_TemperatureAlarm>
		UART_TemperatureAlarm();
 8001342:	f000 fb85 	bl	8001a50 <UART_TemperatureAlarm>
}
 8001346:	bf00      	nop
 8001348:	bd80      	pop	{r7, pc}
 800134a:	bf00      	nop
 800134c:	20000300 	.word	0x20000300

08001350 <FSM_Termometro_Update>:

// La máquina está diseñada a partir de la máquina de estados propuesta en el datasheet
// del sensor
// Se adaptó la máquina para que el sistema soporte conexiones/desconexiones del sensor
void FSM_Termometro_Update(void)
{
 8001350:	b580      	push	{r7, lr}
 8001352:	af00      	add	r7, sp, #0
	  switch (fsm_state) {
 8001354:	4b2b      	ldr	r3, [pc, #172]	; (8001404 <FSM_Termometro_Update+0xb4>)
 8001356:	781b      	ldrb	r3, [r3, #0]
 8001358:	2b03      	cmp	r3, #3
 800135a:	d849      	bhi.n	80013f0 <FSM_Termometro_Update+0xa0>
 800135c:	a201      	add	r2, pc, #4	; (adr r2, 8001364 <FSM_Termometro_Update+0x14>)
 800135e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001362:	bf00      	nop
 8001364:	08001375 	.word	0x08001375
 8001368:	08001381 	.word	0x08001381
 800136c:	080013b3 	.word	0x080013b3
 8001370:	080013e5 	.word	0x080013e5

	  	  	  case INIT:
	  	  		    FSM_Termometro_Init();
 8001374:	f7ff ff3a 	bl	80011ec <FSM_Termometro_Init>
	                fsm_state=CONNECT;
 8001378:	4b22      	ldr	r3, [pc, #136]	; (8001404 <FSM_Termometro_Update+0xb4>)
 800137a:	2201      	movs	r2, #1
 800137c:	701a      	strb	r2, [r3, #0]
	  	  	  break;
 800137e:	e03e      	b.n	80013fe <FSM_Termometro_Update+0xae>

	  	  	  case CONNECT:
	  	  		    errorConnect=FSM_Termometro_Connect();
 8001380:	f7ff ff74 	bl	800126c <FSM_Termometro_Connect>
 8001384:	4603      	mov	r3, r0
 8001386:	b25a      	sxtb	r2, r3
 8001388:	4b1f      	ldr	r3, [pc, #124]	; (8001408 <FSM_Termometro_Update+0xb8>)
 800138a:	701a      	strb	r2, [r3, #0]
	  	  		    if(errorConnect==CONNECT_OK){
 800138c:	4b1e      	ldr	r3, [pc, #120]	; (8001408 <FSM_Termometro_Update+0xb8>)
 800138e:	f993 3000 	ldrsb.w	r3, [r3]
 8001392:	2b00      	cmp	r3, #0
 8001394:	d103      	bne.n	800139e <FSM_Termometro_Update+0x4e>
		  	  		    fsm_state=MEASURE;
 8001396:	4b1b      	ldr	r3, [pc, #108]	; (8001404 <FSM_Termometro_Update+0xb4>)
 8001398:	2202      	movs	r2, #2
 800139a:	701a      	strb	r2, [r3, #0]
	  	  		    }else
	  	  		    	if(errorConnect==CONNECT_ERROR)
	  	  		    	{
	  	  		    	fsm_state=INIT;
	  	  		    	}
	  	  	  break;
 800139c:	e02c      	b.n	80013f8 <FSM_Termometro_Update+0xa8>
	  	  		    	if(errorConnect==CONNECT_ERROR)
 800139e:	4b1a      	ldr	r3, [pc, #104]	; (8001408 <FSM_Termometro_Update+0xb8>)
 80013a0:	f993 3000 	ldrsb.w	r3, [r3]
 80013a4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80013a8:	d126      	bne.n	80013f8 <FSM_Termometro_Update+0xa8>
	  	  		    	fsm_state=INIT;
 80013aa:	4b16      	ldr	r3, [pc, #88]	; (8001404 <FSM_Termometro_Update+0xb4>)
 80013ac:	2200      	movs	r2, #0
 80013ae:	701a      	strb	r2, [r3, #0]
	  	  	  break;
 80013b0:	e022      	b.n	80013f8 <FSM_Termometro_Update+0xa8>

	  	  	  case MEASURE:
	  	  		    errorMeasure=FSM_Termometro_Measure();
 80013b2:	f7ff ff79 	bl	80012a8 <FSM_Termometro_Measure>
 80013b6:	4603      	mov	r3, r0
 80013b8:	461a      	mov	r2, r3
 80013ba:	4b14      	ldr	r3, [pc, #80]	; (800140c <FSM_Termometro_Update+0xbc>)
 80013bc:	701a      	strb	r2, [r3, #0]
	  	  		    if(errorMeasure==MEASURE_OK){
 80013be:	4b13      	ldr	r3, [pc, #76]	; (800140c <FSM_Termometro_Update+0xbc>)
 80013c0:	f993 3000 	ldrsb.w	r3, [r3]
 80013c4:	2b00      	cmp	r3, #0
 80013c6:	d103      	bne.n	80013d0 <FSM_Termometro_Update+0x80>
		  	  		    fsm_state=RANGE;
 80013c8:	4b0e      	ldr	r3, [pc, #56]	; (8001404 <FSM_Termometro_Update+0xb4>)
 80013ca:	2203      	movs	r2, #3
 80013cc:	701a      	strb	r2, [r3, #0]
	  	  		    }else
	  	  		    	if(errorMeasure==MEASURE_ERROR)
	  	  		    	{
	  	  		    	fsm_state=CONNECT;
	  	  		    	}
	  	  	  break;
 80013ce:	e015      	b.n	80013fc <FSM_Termometro_Update+0xac>
	  	  		    	if(errorMeasure==MEASURE_ERROR)
 80013d0:	4b0e      	ldr	r3, [pc, #56]	; (800140c <FSM_Termometro_Update+0xbc>)
 80013d2:	f993 3000 	ldrsb.w	r3, [r3]
 80013d6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80013da:	d10f      	bne.n	80013fc <FSM_Termometro_Update+0xac>
	  	  		    	fsm_state=CONNECT;
 80013dc:	4b09      	ldr	r3, [pc, #36]	; (8001404 <FSM_Termometro_Update+0xb4>)
 80013de:	2201      	movs	r2, #1
 80013e0:	701a      	strb	r2, [r3, #0]
	  	  	  break;
 80013e2:	e00b      	b.n	80013fc <FSM_Termometro_Update+0xac>

	  	  	  case RANGE:
	  	  		    FSM_Termometro_Range();
 80013e4:	f7ff ff9e 	bl	8001324 <FSM_Termometro_Range>
	  	  		    fsm_state=MEASURE;
 80013e8:	4b06      	ldr	r3, [pc, #24]	; (8001404 <FSM_Termometro_Update+0xb4>)
 80013ea:	2202      	movs	r2, #2
 80013ec:	701a      	strb	r2, [r3, #0]
	  	  	  break;
 80013ee:	e006      	b.n	80013fe <FSM_Termometro_Update+0xae>

	  	  	  default:
	  	  		fsm_state=INIT;
 80013f0:	4b04      	ldr	r3, [pc, #16]	; (8001404 <FSM_Termometro_Update+0xb4>)
 80013f2:	2200      	movs	r2, #0
 80013f4:	701a      	strb	r2, [r3, #0]
	  	  	  break;
 80013f6:	e002      	b.n	80013fe <FSM_Termometro_Update+0xae>
	  	  	  break;
 80013f8:	bf00      	nop
 80013fa:	e000      	b.n	80013fe <FSM_Termometro_Update+0xae>
	  	  	  break;
 80013fc:	bf00      	nop
	  	  }
}
 80013fe:	bf00      	nop
 8001400:	bd80      	pop	{r7, pc}
 8001402:	bf00      	nop
 8001404:	200002fc 	.word	0x200002fc
 8001408:	200002fd 	.word	0x200002fd
 800140c:	200002fe 	.word	0x200002fe

08001410 <LCD44780_TransmitReceive>:
static void LCD44780_Backlight(uint8_t state);

//Implementaciones

/*FUNCIONES DE COMUNICACIÓN*************************************************/
static void LCD44780_TransmitReceive(uint8_t nibble, uint8_t rs) {
 8001410:	b580      	push	{r7, lr}
 8001412:	b084      	sub	sp, #16
 8001414:	af00      	add	r7, sp, #0
 8001416:	4603      	mov	r3, r0
 8001418:	460a      	mov	r2, r1
 800141a:	71fb      	strb	r3, [r7, #7]
 800141c:	4613      	mov	r3, r2
 800141e:	71bb      	strb	r3, [r7, #6]
  uint8_t data = nibble << D4_BIT;
 8001420:	79fb      	ldrb	r3, [r7, #7]
 8001422:	011b      	lsls	r3, r3, #4
 8001424:	73fb      	strb	r3, [r7, #15]
  data |= rs << RS_BIT;
 8001426:	7bfa      	ldrb	r2, [r7, #15]
 8001428:	79bb      	ldrb	r3, [r7, #6]
 800142a:	4313      	orrs	r3, r2
 800142c:	73fb      	strb	r3, [r7, #15]
  data |= backlight_state << BL_BIT;
 800142e:	4b09      	ldr	r3, [pc, #36]	; (8001454 <LCD44780_TransmitReceive+0x44>)
 8001430:	781b      	ldrb	r3, [r3, #0]
 8001432:	00db      	lsls	r3, r3, #3
 8001434:	b25a      	sxtb	r2, r3
 8001436:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800143a:	4313      	orrs	r3, r2
 800143c:	b25b      	sxtb	r3, r3
 800143e:	73fb      	strb	r3, [r7, #15]
  //Comunicación por I2C
  LCDHD44780_I2C_PCF8574T_TransmitReceive(data,I2C_SIZE,I2C_TIMEOUT);
 8001440:	7bfb      	ldrb	r3, [r7, #15]
 8001442:	2264      	movs	r2, #100	; 0x64
 8001444:	2101      	movs	r1, #1
 8001446:	4618      	mov	r0, r3
 8001448:	f000 fa90 	bl	800196c <LCDHD44780_I2C_PCF8574T_TransmitReceive>

}
 800144c:	bf00      	nop
 800144e:	3710      	adds	r7, #16
 8001450:	46bd      	mov	sp, r7
 8001452:	bd80      	pop	{r7, pc}
 8001454:	20000000 	.word	0x20000000

08001458 <LCD44780_SendCmd>:

static void LCD44780_SendCmd(uint8_t cmd) {
 8001458:	b580      	push	{r7, lr}
 800145a:	b084      	sub	sp, #16
 800145c:	af00      	add	r7, sp, #0
 800145e:	4603      	mov	r3, r0
 8001460:	71fb      	strb	r3, [r7, #7]
  uint8_t upper_nibble = cmd >> 4;
 8001462:	79fb      	ldrb	r3, [r7, #7]
 8001464:	091b      	lsrs	r3, r3, #4
 8001466:	73fb      	strb	r3, [r7, #15]
  uint8_t lower_nibble = cmd & 0x0F;
 8001468:	79fb      	ldrb	r3, [r7, #7]
 800146a:	f003 030f 	and.w	r3, r3, #15
 800146e:	73bb      	strb	r3, [r7, #14]
  LCD44780_TransmitReceive(upper_nibble, MODE_CMD);
 8001470:	7bfb      	ldrb	r3, [r7, #15]
 8001472:	2100      	movs	r1, #0
 8001474:	4618      	mov	r0, r3
 8001476:	f7ff ffcb 	bl	8001410 <LCD44780_TransmitReceive>
  LCD44780_TransmitReceive(lower_nibble, MODE_CMD);
 800147a:	7bbb      	ldrb	r3, [r7, #14]
 800147c:	2100      	movs	r1, #0
 800147e:	4618      	mov	r0, r3
 8001480:	f7ff ffc6 	bl	8001410 <LCD44780_TransmitReceive>
  if (cmd == CMD_INIT_0 || cmd == CMD_INIT_2) {
 8001484:	79fb      	ldrb	r3, [r7, #7]
 8001486:	2b01      	cmp	r3, #1
 8001488:	d002      	beq.n	8001490 <LCD44780_SendCmd+0x38>
 800148a:	79fb      	ldrb	r3, [r7, #7]
 800148c:	2b02      	cmp	r3, #2
 800148e:	d102      	bne.n	8001496 <LCD44780_SendCmd+0x3e>
    HAL_Delay(2);
 8001490:	2002      	movs	r0, #2
 8001492:	f000 fe27 	bl	80020e4 <HAL_Delay>
  }
}
 8001496:	bf00      	nop
 8001498:	3710      	adds	r7, #16
 800149a:	46bd      	mov	sp, r7
 800149c:	bd80      	pop	{r7, pc}

0800149e <LCD44780_SendData>:

static void LCD44780_SendData(uint8_t data) {
 800149e:	b580      	push	{r7, lr}
 80014a0:	b084      	sub	sp, #16
 80014a2:	af00      	add	r7, sp, #0
 80014a4:	4603      	mov	r3, r0
 80014a6:	71fb      	strb	r3, [r7, #7]
  uint8_t upper_nibble = data >> 4;
 80014a8:	79fb      	ldrb	r3, [r7, #7]
 80014aa:	091b      	lsrs	r3, r3, #4
 80014ac:	73fb      	strb	r3, [r7, #15]
  uint8_t lower_nibble = data & 0x0F;
 80014ae:	79fb      	ldrb	r3, [r7, #7]
 80014b0:	f003 030f 	and.w	r3, r3, #15
 80014b4:	73bb      	strb	r3, [r7, #14]
  LCD44780_TransmitReceive(upper_nibble, MODE_DATA);
 80014b6:	7bfb      	ldrb	r3, [r7, #15]
 80014b8:	2101      	movs	r1, #1
 80014ba:	4618      	mov	r0, r3
 80014bc:	f7ff ffa8 	bl	8001410 <LCD44780_TransmitReceive>
  LCD44780_TransmitReceive(lower_nibble, MODE_DATA);
 80014c0:	7bbb      	ldrb	r3, [r7, #14]
 80014c2:	2101      	movs	r1, #1
 80014c4:	4618      	mov	r0, r3
 80014c6:	f7ff ffa3 	bl	8001410 <LCD44780_TransmitReceive>
}
 80014ca:	bf00      	nop
 80014cc:	3710      	adds	r7, #16
 80014ce:	46bd      	mov	sp, r7
 80014d0:	bd80      	pop	{r7, pc}

080014d2 <LCD44780_WriteString>:

static void LCD44780_WriteString(char *str) {
 80014d2:	b580      	push	{r7, lr}
 80014d4:	b082      	sub	sp, #8
 80014d6:	af00      	add	r7, sp, #0
 80014d8:	6078      	str	r0, [r7, #4]
  while (*str) {
 80014da:	e006      	b.n	80014ea <LCD44780_WriteString+0x18>
	  LCD44780_SendData(*str++);
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	1c5a      	adds	r2, r3, #1
 80014e0:	607a      	str	r2, [r7, #4]
 80014e2:	781b      	ldrb	r3, [r3, #0]
 80014e4:	4618      	mov	r0, r3
 80014e6:	f7ff ffda 	bl	800149e <LCD44780_SendData>
  while (*str) {
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	781b      	ldrb	r3, [r3, #0]
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	d1f4      	bne.n	80014dc <LCD44780_WriteString+0xa>
  }
}
 80014f2:	bf00      	nop
 80014f4:	bf00      	nop
 80014f6:	3708      	adds	r7, #8
 80014f8:	46bd      	mov	sp, r7
 80014fa:	bd80      	pop	{r7, pc}

080014fc <LCD44780_SetCursor>:

static void LCD44780_SetCursor(uint8_t row, uint8_t column) {
 80014fc:	b580      	push	{r7, lr}
 80014fe:	b084      	sub	sp, #16
 8001500:	af00      	add	r7, sp, #0
 8001502:	4603      	mov	r3, r0
 8001504:	460a      	mov	r2, r1
 8001506:	71fb      	strb	r3, [r7, #7]
 8001508:	4613      	mov	r3, r2
 800150a:	71bb      	strb	r3, [r7, #6]
    uint8_t address;
    switch (row) {
 800150c:	79fb      	ldrb	r3, [r7, #7]
 800150e:	2b00      	cmp	r3, #0
 8001510:	d002      	beq.n	8001518 <LCD44780_SetCursor+0x1c>
 8001512:	2b01      	cmp	r3, #1
 8001514:	d003      	beq.n	800151e <LCD44780_SetCursor+0x22>
 8001516:	e005      	b.n	8001524 <LCD44780_SetCursor+0x28>
        case 0:
            address = 0x00;
 8001518:	2300      	movs	r3, #0
 800151a:	73fb      	strb	r3, [r7, #15]
            break;
 800151c:	e004      	b.n	8001528 <LCD44780_SetCursor+0x2c>
        case 1:
            address = 0x40;
 800151e:	2340      	movs	r3, #64	; 0x40
 8001520:	73fb      	strb	r3, [r7, #15]
            break;
 8001522:	e001      	b.n	8001528 <LCD44780_SetCursor+0x2c>
        default:
            address = 0x00;
 8001524:	2300      	movs	r3, #0
 8001526:	73fb      	strb	r3, [r7, #15]
    }
    address += column;
 8001528:	7bfa      	ldrb	r2, [r7, #15]
 800152a:	79bb      	ldrb	r3, [r7, #6]
 800152c:	4413      	add	r3, r2
 800152e:	73fb      	strb	r3, [r7, #15]
    LCD44780_SendCmd(0x80 | address);
 8001530:	7bfb      	ldrb	r3, [r7, #15]
 8001532:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001536:	b2db      	uxtb	r3, r3
 8001538:	4618      	mov	r0, r3
 800153a:	f7ff ff8d 	bl	8001458 <LCD44780_SendCmd>
}
 800153e:	bf00      	nop
 8001540:	3710      	adds	r7, #16
 8001542:	46bd      	mov	sp, r7
 8001544:	bd80      	pop	{r7, pc}

08001546 <LCD44780_Clear>:

static void LCD44780_Clear(void) {
 8001546:	b580      	push	{r7, lr}
 8001548:	af00      	add	r7, sp, #0
	LCD44780_SendCmd(CMD_INIT_0);
 800154a:	2001      	movs	r0, #1
 800154c:	f7ff ff84 	bl	8001458 <LCD44780_SendCmd>
    HAL_Delay(2);
 8001550:	2002      	movs	r0, #2
 8001552:	f000 fdc7 	bl	80020e4 <HAL_Delay>
}
 8001556:	bf00      	nop
 8001558:	bd80      	pop	{r7, pc}
	...

0800155c <LCD44780_Backlight>:
// Encendido de la iluminación
static void LCD44780_Backlight(uint8_t state) {
 800155c:	b480      	push	{r7}
 800155e:	b083      	sub	sp, #12
 8001560:	af00      	add	r7, sp, #0
 8001562:	4603      	mov	r3, r0
 8001564:	71fb      	strb	r3, [r7, #7]
  if (state) {
 8001566:	79fb      	ldrb	r3, [r7, #7]
 8001568:	2b00      	cmp	r3, #0
 800156a:	d003      	beq.n	8001574 <LCD44780_Backlight+0x18>
    backlight_state = BLACKLIGHT_ON;
 800156c:	4b06      	ldr	r3, [pc, #24]	; (8001588 <LCD44780_Backlight+0x2c>)
 800156e:	2201      	movs	r2, #1
 8001570:	701a      	strb	r2, [r3, #0]
  } else {
    backlight_state = BLACKLIGHT_OFF;
  }
}
 8001572:	e002      	b.n	800157a <LCD44780_Backlight+0x1e>
    backlight_state = BLACKLIGHT_OFF;
 8001574:	4b04      	ldr	r3, [pc, #16]	; (8001588 <LCD44780_Backlight+0x2c>)
 8001576:	2200      	movs	r2, #0
 8001578:	701a      	strb	r2, [r3, #0]
}
 800157a:	bf00      	nop
 800157c:	370c      	adds	r7, #12
 800157e:	46bd      	mov	sp, r7
 8001580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001584:	4770      	bx	lr
 8001586:	bf00      	nop
 8001588:	20000000 	.word	0x20000000

0800158c <LCD44780_Init>:
/******************************************************************************/

//Publicas
/*FUNCIONES DE USUARIO*************************************************/
void LCD44780_Init() {
 800158c:	b580      	push	{r7, lr}
 800158e:	af00      	add	r7, sp, #0
  HAL_Delay(50);
 8001590:	2032      	movs	r0, #50	; 0x32
 8001592:	f000 fda7 	bl	80020e4 <HAL_Delay>
  LCD44780_TransmitReceive(CMD_INIT_1, MODE_CMD);
 8001596:	2100      	movs	r1, #0
 8001598:	2003      	movs	r0, #3
 800159a:	f7ff ff39 	bl	8001410 <LCD44780_TransmitReceive>
  HAL_Delay(5);
 800159e:	2005      	movs	r0, #5
 80015a0:	f000 fda0 	bl	80020e4 <HAL_Delay>
  LCD44780_TransmitReceive(CMD_INIT_1, MODE_CMD);
 80015a4:	2100      	movs	r1, #0
 80015a6:	2003      	movs	r0, #3
 80015a8:	f7ff ff32 	bl	8001410 <LCD44780_TransmitReceive>
  HAL_Delay(1);
 80015ac:	2001      	movs	r0, #1
 80015ae:	f000 fd99 	bl	80020e4 <HAL_Delay>
  LCD44780_TransmitReceive(CMD_INIT_1, MODE_CMD);
 80015b2:	2100      	movs	r1, #0
 80015b4:	2003      	movs	r0, #3
 80015b6:	f7ff ff2b 	bl	8001410 <LCD44780_TransmitReceive>
  HAL_Delay(1);
 80015ba:	2001      	movs	r0, #1
 80015bc:	f000 fd92 	bl	80020e4 <HAL_Delay>
  LCD44780_TransmitReceive(CMD_INIT_2, MODE_CMD);
 80015c0:	2100      	movs	r1, #0
 80015c2:	2002      	movs	r0, #2
 80015c4:	f7ff ff24 	bl	8001410 <LCD44780_TransmitReceive>
  LCD44780_SendCmd(0x28);
 80015c8:	2028      	movs	r0, #40	; 0x28
 80015ca:	f7ff ff45 	bl	8001458 <LCD44780_SendCmd>
  LCD44780_SendCmd(0x0C);
 80015ce:	200c      	movs	r0, #12
 80015d0:	f7ff ff42 	bl	8001458 <LCD44780_SendCmd>
  LCD44780_SendCmd(0x06);
 80015d4:	2006      	movs	r0, #6
 80015d6:	f7ff ff3f 	bl	8001458 <LCD44780_SendCmd>
  LCD44780_SendCmd(0x01);
 80015da:	2001      	movs	r0, #1
 80015dc:	f7ff ff3c 	bl	8001458 <LCD44780_SendCmd>
  HAL_Delay(2);
 80015e0:	2002      	movs	r0, #2
 80015e2:	f000 fd7f 	bl	80020e4 <HAL_Delay>
  LCD44780_Backlight(BLACKLIGHT_ON);
 80015e6:	2001      	movs	r0, #1
 80015e8:	f7ff ffb8 	bl	800155c <LCD44780_Backlight>
}
 80015ec:	bf00      	nop
 80015ee:	bd80      	pop	{r7, pc}

080015f0 <LCD44780_UpdateTemperature>:
void LCD44780_UpdateTemperature(float temperature)
{
 80015f0:	b580      	push	{r7, lr}
 80015f2:	b088      	sub	sp, #32
 80015f4:	af00      	add	r7, sp, #0
 80015f6:	ed87 0a01 	vstr	s0, [r7, #4]
		  char *labelTemperature = "Temperatura:";
 80015fa:	4b1b      	ldr	r3, [pc, #108]	; (8001668 <LCD44780_UpdateTemperature+0x78>)
 80015fc:	61fb      	str	r3, [r7, #28]
		  char *labelTemperatureUnit = "C";
 80015fe:	4b1b      	ldr	r3, [pc, #108]	; (800166c <LCD44780_UpdateTemperature+0x7c>)
 8001600:	61bb      	str	r3, [r7, #24]
		  char temperatureString[10];

		  sprintf(temperatureString, "%.2f", temperature);
 8001602:	6878      	ldr	r0, [r7, #4]
 8001604:	f7fe ffb0 	bl	8000568 <__aeabi_f2d>
 8001608:	4602      	mov	r2, r0
 800160a:	460b      	mov	r3, r1
 800160c:	f107 000c 	add.w	r0, r7, #12
 8001610:	4917      	ldr	r1, [pc, #92]	; (8001670 <LCD44780_UpdateTemperature+0x80>)
 8001612:	f003 fd45 	bl	80050a0 <siprintf>
		  LCD44780_Clear();
 8001616:	f7ff ff96 	bl	8001546 <LCD44780_Clear>
		  LCD44780_SetCursor(0, 0);
 800161a:	2100      	movs	r1, #0
 800161c:	2000      	movs	r0, #0
 800161e:	f7ff ff6d 	bl	80014fc <LCD44780_SetCursor>
		  LCD44780_WriteString(labelTemperature);
 8001622:	69f8      	ldr	r0, [r7, #28]
 8001624:	f7ff ff55 	bl	80014d2 <LCD44780_WriteString>
		  LCD44780_SetCursor(1, 0);
 8001628:	2100      	movs	r1, #0
 800162a:	2001      	movs	r0, #1
 800162c:	f7ff ff66 	bl	80014fc <LCD44780_SetCursor>
		  LCD44780_WriteString(temperatureString);
 8001630:	f107 030c 	add.w	r3, r7, #12
 8001634:	4618      	mov	r0, r3
 8001636:	f7ff ff4c 	bl	80014d2 <LCD44780_WriteString>
		  memset(temperatureString, 0, sizeof(temperatureString));
 800163a:	f107 030c 	add.w	r3, r7, #12
 800163e:	220a      	movs	r2, #10
 8001640:	2100      	movs	r1, #0
 8001642:	4618      	mov	r0, r3
 8001644:	f003 f82c 	bl	80046a0 <memset>
		  LCD44780_SetCursor(1, 6);
 8001648:	2106      	movs	r1, #6
 800164a:	2001      	movs	r0, #1
 800164c:	f7ff ff56 	bl	80014fc <LCD44780_SetCursor>
		  LCD44780_WriteString(labelTemperatureUnit );
 8001650:	69b8      	ldr	r0, [r7, #24]
 8001652:	f7ff ff3e 	bl	80014d2 <LCD44780_WriteString>
		  HAL_Delay(500);
 8001656:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800165a:	f000 fd43 	bl	80020e4 <HAL_Delay>
}
 800165e:	bf00      	nop
 8001660:	3720      	adds	r7, #32
 8001662:	46bd      	mov	sp, r7
 8001664:	bd80      	pop	{r7, pc}
 8001666:	bf00      	nop
 8001668:	08007590 	.word	0x08007590
 800166c:	080075a0 	.word	0x080075a0
 8001670:	080075a4 	.word	0x080075a4

08001674 <LCD44780_TemperatureAlarm>:

void LCD44780_TemperatureAlarm()
{
 8001674:	b580      	push	{r7, lr}
 8001676:	b082      	sub	sp, #8
 8001678:	af00      	add	r7, sp, #0
	  char *labelTemperatureAlarm = "Alarma";
 800167a:	4b08      	ldr	r3, [pc, #32]	; (800169c <LCD44780_TemperatureAlarm+0x28>)
 800167c:	607b      	str	r3, [r7, #4]
	  LCD44780_SetCursor(1, 9);
 800167e:	2109      	movs	r1, #9
 8001680:	2001      	movs	r0, #1
 8001682:	f7ff ff3b 	bl	80014fc <LCD44780_SetCursor>
	  LCD44780_WriteString(labelTemperatureAlarm );
 8001686:	6878      	ldr	r0, [r7, #4]
 8001688:	f7ff ff23 	bl	80014d2 <LCD44780_WriteString>
	  HAL_Delay(500);
 800168c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001690:	f000 fd28 	bl	80020e4 <HAL_Delay>
}
 8001694:	bf00      	nop
 8001696:	3708      	adds	r7, #8
 8001698:	46bd      	mov	sp, r7
 800169a:	bd80      	pop	{r7, pc}
 800169c:	080075ac 	.word	0x080075ac

080016a0 <LCD44780_SensorTemperatureError>:
void LCD44780_SensorTemperatureError()
{
 80016a0:	b580      	push	{r7, lr}
 80016a2:	b082      	sub	sp, #8
 80016a4:	af00      	add	r7, sp, #0
	  char *labelSensorTemperatureError = "Error de sensor";
 80016a6:	4b09      	ldr	r3, [pc, #36]	; (80016cc <LCD44780_SensorTemperatureError+0x2c>)
 80016a8:	607b      	str	r3, [r7, #4]
	  LCD44780_Clear();
 80016aa:	f7ff ff4c 	bl	8001546 <LCD44780_Clear>
	  LCD44780_SetCursor(1, 0);
 80016ae:	2100      	movs	r1, #0
 80016b0:	2001      	movs	r0, #1
 80016b2:	f7ff ff23 	bl	80014fc <LCD44780_SetCursor>
	  LCD44780_WriteString(labelSensorTemperatureError );
 80016b6:	6878      	ldr	r0, [r7, #4]
 80016b8:	f7ff ff0b 	bl	80014d2 <LCD44780_WriteString>
	  HAL_Delay(500);
 80016bc:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80016c0:	f000 fd10 	bl	80020e4 <HAL_Delay>
}
 80016c4:	bf00      	nop
 80016c6:	3708      	adds	r7, #8
 80016c8:	46bd      	mov	sp, r7
 80016ca:	bd80      	pop	{r7, pc}
 80016cc:	080075b4 	.word	0x080075b4

080016d0 <LCD44780_SensorConnectError>:
void LCD44780_SensorConnectError()
{
 80016d0:	b580      	push	{r7, lr}
 80016d2:	b082      	sub	sp, #8
 80016d4:	af00      	add	r7, sp, #0
	  char *labelSensorConnectError = "Error de Conn";
 80016d6:	4b09      	ldr	r3, [pc, #36]	; (80016fc <LCD44780_SensorConnectError+0x2c>)
 80016d8:	607b      	str	r3, [r7, #4]
	  LCD44780_Clear();
 80016da:	f7ff ff34 	bl	8001546 <LCD44780_Clear>
	  LCD44780_SetCursor(1, 0);
 80016de:	2100      	movs	r1, #0
 80016e0:	2001      	movs	r0, #1
 80016e2:	f7ff ff0b 	bl	80014fc <LCD44780_SetCursor>
	  LCD44780_WriteString(labelSensorConnectError );
 80016e6:	6878      	ldr	r0, [r7, #4]
 80016e8:	f7ff fef3 	bl	80014d2 <LCD44780_WriteString>
	  HAL_Delay(500);
 80016ec:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80016f0:	f000 fcf8 	bl	80020e4 <HAL_Delay>
}
 80016f4:	bf00      	nop
 80016f6:	3708      	adds	r7, #8
 80016f8:	46bd      	mov	sp, r7
 80016fa:	bd80      	pop	{r7, pc}
 80016fc:	080075c4 	.word	0x080075c4

08001700 <setSPI_Port_Name>:

//Funciones Públicas

/*****************************************************************************************/
void setSPI_Port_Name(SPI_HandleTypeDef hspiX)
{
 8001700:	b084      	sub	sp, #16
 8001702:	b580      	push	{r7, lr}
 8001704:	af00      	add	r7, sp, #0
 8001706:	f107 0c08 	add.w	ip, r7, #8
 800170a:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	hspi=hspiX;
 800170e:	4b07      	ldr	r3, [pc, #28]	; (800172c <setSPI_Port_Name+0x2c>)
 8001710:	4618      	mov	r0, r3
 8001712:	f107 0308 	add.w	r3, r7, #8
 8001716:	2258      	movs	r2, #88	; 0x58
 8001718:	4619      	mov	r1, r3
 800171a:	f002 ffb3 	bl	8004684 <memcpy>
}
 800171e:	bf00      	nop
 8001720:	46bd      	mov	sp, r7
 8001722:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001726:	b004      	add	sp, #16
 8001728:	4770      	bx	lr
 800172a:	bf00      	nop
 800172c:	20000304 	.word	0x20000304

08001730 <setI2C_Port_Name>:
void setI2C_Port_Name(I2C_HandleTypeDef hi2cX)
{
 8001730:	b084      	sub	sp, #16
 8001732:	b580      	push	{r7, lr}
 8001734:	af00      	add	r7, sp, #0
 8001736:	f107 0c08 	add.w	ip, r7, #8
 800173a:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	hi2c=hi2cX;
 800173e:	4b07      	ldr	r3, [pc, #28]	; (800175c <setI2C_Port_Name+0x2c>)
 8001740:	4618      	mov	r0, r3
 8001742:	f107 0308 	add.w	r3, r7, #8
 8001746:	2254      	movs	r2, #84	; 0x54
 8001748:	4619      	mov	r1, r3
 800174a:	f002 ff9b 	bl	8004684 <memcpy>
}
 800174e:	bf00      	nop
 8001750:	46bd      	mov	sp, r7
 8001752:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001756:	b004      	add	sp, #16
 8001758:	4770      	bx	lr
 800175a:	bf00      	nop
 800175c:	2000035c 	.word	0x2000035c

08001760 <setUART_Port_Name>:
void setUART_Port_Name(UART_HandleTypeDef huartX)
{
 8001760:	b084      	sub	sp, #16
 8001762:	b580      	push	{r7, lr}
 8001764:	af00      	add	r7, sp, #0
 8001766:	f107 0c08 	add.w	ip, r7, #8
 800176a:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	huart=huartX;
 800176e:	4b07      	ldr	r3, [pc, #28]	; (800178c <setUART_Port_Name+0x2c>)
 8001770:	4618      	mov	r0, r3
 8001772:	f107 0308 	add.w	r3, r7, #8
 8001776:	2244      	movs	r2, #68	; 0x44
 8001778:	4619      	mov	r1, r3
 800177a:	f002 ff83 	bl	8004684 <memcpy>
}
 800177e:	bf00      	nop
 8001780:	46bd      	mov	sp, r7
 8001782:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001786:	b004      	add	sp, #16
 8001788:	4770      	bx	lr
 800178a:	bf00      	nop
 800178c:	200003b0 	.word	0x200003b0

08001790 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
void MX_GPIO_Init(void)
{
 8001790:	b580      	push	{r7, lr}
 8001792:	b088      	sub	sp, #32
 8001794:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001796:	f107 030c 	add.w	r3, r7, #12
 800179a:	2200      	movs	r2, #0
 800179c:	601a      	str	r2, [r3, #0]
 800179e:	605a      	str	r2, [r3, #4]
 80017a0:	609a      	str	r2, [r3, #8]
 80017a2:	60da      	str	r2, [r3, #12]
 80017a4:	611a      	str	r2, [r3, #16]
  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80017a6:	2300      	movs	r3, #0
 80017a8:	60bb      	str	r3, [r7, #8]
 80017aa:	4b20      	ldr	r3, [pc, #128]	; (800182c <MX_GPIO_Init+0x9c>)
 80017ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017ae:	4a1f      	ldr	r2, [pc, #124]	; (800182c <MX_GPIO_Init+0x9c>)
 80017b0:	f043 0320 	orr.w	r3, r3, #32
 80017b4:	6313      	str	r3, [r2, #48]	; 0x30
 80017b6:	4b1d      	ldr	r3, [pc, #116]	; (800182c <MX_GPIO_Init+0x9c>)
 80017b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017ba:	f003 0320 	and.w	r3, r3, #32
 80017be:	60bb      	str	r3, [r7, #8]
 80017c0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80017c2:	2300      	movs	r3, #0
 80017c4:	607b      	str	r3, [r7, #4]
 80017c6:	4b19      	ldr	r3, [pc, #100]	; (800182c <MX_GPIO_Init+0x9c>)
 80017c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017ca:	4a18      	ldr	r2, [pc, #96]	; (800182c <MX_GPIO_Init+0x9c>)
 80017cc:	f043 0301 	orr.w	r3, r3, #1
 80017d0:	6313      	str	r3, [r2, #48]	; 0x30
 80017d2:	4b16      	ldr	r3, [pc, #88]	; (800182c <MX_GPIO_Init+0x9c>)
 80017d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017d6:	f003 0301 	and.w	r3, r3, #1
 80017da:	607b      	str	r3, [r7, #4]
 80017dc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80017de:	2300      	movs	r3, #0
 80017e0:	603b      	str	r3, [r7, #0]
 80017e2:	4b12      	ldr	r3, [pc, #72]	; (800182c <MX_GPIO_Init+0x9c>)
 80017e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017e6:	4a11      	ldr	r2, [pc, #68]	; (800182c <MX_GPIO_Init+0x9c>)
 80017e8:	f043 0308 	orr.w	r3, r3, #8
 80017ec:	6313      	str	r3, [r2, #48]	; 0x30
 80017ee:	4b0f      	ldr	r3, [pc, #60]	; (800182c <MX_GPIO_Init+0x9c>)
 80017f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017f2:	f003 0308 	and.w	r3, r3, #8
 80017f6:	603b      	str	r3, [r7, #0]
 80017f8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, SPI_ENABLE_PIN, GPIO_PIN_RESET);
 80017fa:	2200      	movs	r2, #0
 80017fc:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001800:	480b      	ldr	r0, [pc, #44]	; (8001830 <MX_GPIO_Init+0xa0>)
 8001802:	f000 ff25 	bl	8002650 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PD14 */
  GPIO_InitStruct.Pin = SPI_ENABLE_PIN;
 8001806:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800180a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800180c:	2301      	movs	r3, #1
 800180e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001810:	2300      	movs	r3, #0
 8001812:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001814:	2300      	movs	r3, #0
 8001816:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001818:	f107 030c 	add.w	r3, r7, #12
 800181c:	4619      	mov	r1, r3
 800181e:	4804      	ldr	r0, [pc, #16]	; (8001830 <MX_GPIO_Init+0xa0>)
 8001820:	f000 fd6a 	bl	80022f8 <HAL_GPIO_Init>
}
 8001824:	bf00      	nop
 8001826:	3720      	adds	r7, #32
 8001828:	46bd      	mov	sp, r7
 800182a:	bd80      	pop	{r7, pc}
 800182c:	40023800 	.word	0x40023800
 8001830:	40020c00 	.word	0x40020c00

08001834 <MX_SPI_Init>:
/*****************************************************************************************/

void MX_SPI_Init(void)
{
 8001834:	b580      	push	{r7, lr}
 8001836:	af00      	add	r7, sp, #0
  hspi.Instance = SPI1;
 8001838:	4b17      	ldr	r3, [pc, #92]	; (8001898 <MX_SPI_Init+0x64>)
 800183a:	4a18      	ldr	r2, [pc, #96]	; (800189c <MX_SPI_Init+0x68>)
 800183c:	601a      	str	r2, [r3, #0]
  hspi.Init.Mode = SPI_MODE_MASTER;
 800183e:	4b16      	ldr	r3, [pc, #88]	; (8001898 <MX_SPI_Init+0x64>)
 8001840:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001844:	605a      	str	r2, [r3, #4]
  hspi.Init.Direction = SPI_DIRECTION_2LINES;
 8001846:	4b14      	ldr	r3, [pc, #80]	; (8001898 <MX_SPI_Init+0x64>)
 8001848:	2200      	movs	r2, #0
 800184a:	609a      	str	r2, [r3, #8]
  hspi.Init.DataSize = SPI_DATASIZE_8BIT;
 800184c:	4b12      	ldr	r3, [pc, #72]	; (8001898 <MX_SPI_Init+0x64>)
 800184e:	2200      	movs	r2, #0
 8001850:	60da      	str	r2, [r3, #12]
  hspi.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001852:	4b11      	ldr	r3, [pc, #68]	; (8001898 <MX_SPI_Init+0x64>)
 8001854:	2200      	movs	r2, #0
 8001856:	611a      	str	r2, [r3, #16]
  hspi.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001858:	4b0f      	ldr	r3, [pc, #60]	; (8001898 <MX_SPI_Init+0x64>)
 800185a:	2200      	movs	r2, #0
 800185c:	615a      	str	r2, [r3, #20]
  hspi.Init.NSS = SPI_NSS_SOFT;
 800185e:	4b0e      	ldr	r3, [pc, #56]	; (8001898 <MX_SPI_Init+0x64>)
 8001860:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001864:	619a      	str	r2, [r3, #24]
  hspi.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8001866:	4b0c      	ldr	r3, [pc, #48]	; (8001898 <MX_SPI_Init+0x64>)
 8001868:	2220      	movs	r2, #32
 800186a:	61da      	str	r2, [r3, #28]
  hspi.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800186c:	4b0a      	ldr	r3, [pc, #40]	; (8001898 <MX_SPI_Init+0x64>)
 800186e:	2200      	movs	r2, #0
 8001870:	621a      	str	r2, [r3, #32]
  hspi.Init.TIMode = SPI_TIMODE_DISABLE;
 8001872:	4b09      	ldr	r3, [pc, #36]	; (8001898 <MX_SPI_Init+0x64>)
 8001874:	2200      	movs	r2, #0
 8001876:	625a      	str	r2, [r3, #36]	; 0x24
  hspi.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001878:	4b07      	ldr	r3, [pc, #28]	; (8001898 <MX_SPI_Init+0x64>)
 800187a:	2200      	movs	r2, #0
 800187c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi.Init.CRCPolynomial = 10;
 800187e:	4b06      	ldr	r3, [pc, #24]	; (8001898 <MX_SPI_Init+0x64>)
 8001880:	220a      	movs	r2, #10
 8001882:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi) != HAL_OK)
 8001884:	4804      	ldr	r0, [pc, #16]	; (8001898 <MX_SPI_Init+0x64>)
 8001886:	f002 f81b 	bl	80038c0 <HAL_SPI_Init>
 800188a:	4603      	mov	r3, r0
 800188c:	2b00      	cmp	r3, #0
 800188e:	d001      	beq.n	8001894 <MX_SPI_Init+0x60>
  {
    Error_Handler();
 8001890:	f000 f984 	bl	8001b9c <Error_Handler>
  }
}
 8001894:	bf00      	nop
 8001896:	bd80      	pop	{r7, pc}
 8001898:	20000304 	.word	0x20000304
 800189c:	40013000 	.word	0x40013000

080018a0 <BMP280_SPI_TransmitReceive>:
void BMP280_SPI_TransmitReceive(uint8_t buffer[2],uint8_t size,uint8_t timeOut)
{
 80018a0:	b580      	push	{r7, lr}
 80018a2:	b084      	sub	sp, #16
 80018a4:	af02      	add	r7, sp, #8
 80018a6:	6078      	str	r0, [r7, #4]
 80018a8:	460b      	mov	r3, r1
 80018aa:	70fb      	strb	r3, [r7, #3]
 80018ac:	4613      	mov	r3, r2
 80018ae:	70bb      	strb	r3, [r7, #2]
	HAL_GPIO_WritePin(GPIOD, SPI_ENABLE_PIN, GPIO_PIN_RESET);
 80018b0:	2200      	movs	r2, #0
 80018b2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80018b6:	480b      	ldr	r0, [pc, #44]	; (80018e4 <BMP280_SPI_TransmitReceive+0x44>)
 80018b8:	f000 feca 	bl	8002650 <HAL_GPIO_WritePin>
	HAL_SPI_TransmitReceive(&hspi, buffer, buffer, size, timeOut);
 80018bc:	78fb      	ldrb	r3, [r7, #3]
 80018be:	b29a      	uxth	r2, r3
 80018c0:	78bb      	ldrb	r3, [r7, #2]
 80018c2:	9300      	str	r3, [sp, #0]
 80018c4:	4613      	mov	r3, r2
 80018c6:	687a      	ldr	r2, [r7, #4]
 80018c8:	6879      	ldr	r1, [r7, #4]
 80018ca:	4807      	ldr	r0, [pc, #28]	; (80018e8 <BMP280_SPI_TransmitReceive+0x48>)
 80018cc:	f002 f881 	bl	80039d2 <HAL_SPI_TransmitReceive>
	HAL_GPIO_WritePin(GPIOD, SPI_ENABLE_PIN, GPIO_PIN_SET);
 80018d0:	2201      	movs	r2, #1
 80018d2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80018d6:	4803      	ldr	r0, [pc, #12]	; (80018e4 <BMP280_SPI_TransmitReceive+0x44>)
 80018d8:	f000 feba 	bl	8002650 <HAL_GPIO_WritePin>
}
 80018dc:	bf00      	nop
 80018de:	3708      	adds	r7, #8
 80018e0:	46bd      	mov	sp, r7
 80018e2:	bd80      	pop	{r7, pc}
 80018e4:	40020c00 	.word	0x40020c00
 80018e8:	20000304 	.word	0x20000304

080018ec <MX_I2C_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
void MX_I2C_Init(void)
{
 80018ec:	b580      	push	{r7, lr}
 80018ee:	af00      	add	r7, sp, #0
  hi2c.Instance = I2C2;
 80018f0:	4b1b      	ldr	r3, [pc, #108]	; (8001960 <MX_I2C_Init+0x74>)
 80018f2:	4a1c      	ldr	r2, [pc, #112]	; (8001964 <MX_I2C_Init+0x78>)
 80018f4:	601a      	str	r2, [r3, #0]
  hi2c.Init.ClockSpeed = 100000;
 80018f6:	4b1a      	ldr	r3, [pc, #104]	; (8001960 <MX_I2C_Init+0x74>)
 80018f8:	4a1b      	ldr	r2, [pc, #108]	; (8001968 <MX_I2C_Init+0x7c>)
 80018fa:	605a      	str	r2, [r3, #4]
  hi2c.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80018fc:	4b18      	ldr	r3, [pc, #96]	; (8001960 <MX_I2C_Init+0x74>)
 80018fe:	2200      	movs	r2, #0
 8001900:	609a      	str	r2, [r3, #8]
  hi2c.Init.OwnAddress1 = 0;
 8001902:	4b17      	ldr	r3, [pc, #92]	; (8001960 <MX_I2C_Init+0x74>)
 8001904:	2200      	movs	r2, #0
 8001906:	60da      	str	r2, [r3, #12]
  hi2c.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001908:	4b15      	ldr	r3, [pc, #84]	; (8001960 <MX_I2C_Init+0x74>)
 800190a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800190e:	611a      	str	r2, [r3, #16]
  hi2c.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001910:	4b13      	ldr	r3, [pc, #76]	; (8001960 <MX_I2C_Init+0x74>)
 8001912:	2200      	movs	r2, #0
 8001914:	615a      	str	r2, [r3, #20]
  hi2c.Init.OwnAddress2 = 0;
 8001916:	4b12      	ldr	r3, [pc, #72]	; (8001960 <MX_I2C_Init+0x74>)
 8001918:	2200      	movs	r2, #0
 800191a:	619a      	str	r2, [r3, #24]
  hi2c.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800191c:	4b10      	ldr	r3, [pc, #64]	; (8001960 <MX_I2C_Init+0x74>)
 800191e:	2200      	movs	r2, #0
 8001920:	61da      	str	r2, [r3, #28]
  hi2c.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001922:	4b0f      	ldr	r3, [pc, #60]	; (8001960 <MX_I2C_Init+0x74>)
 8001924:	2200      	movs	r2, #0
 8001926:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c) != HAL_OK)
 8001928:	480d      	ldr	r0, [pc, #52]	; (8001960 <MX_I2C_Init+0x74>)
 800192a:	f000 feab 	bl	8002684 <HAL_I2C_Init>
 800192e:	4603      	mov	r3, r0
 8001930:	2b00      	cmp	r3, #0
 8001932:	d001      	beq.n	8001938 <MX_I2C_Init+0x4c>
  {
    Error_Handler();
 8001934:	f000 f932 	bl	8001b9c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001938:	2100      	movs	r1, #0
 800193a:	4809      	ldr	r0, [pc, #36]	; (8001960 <MX_I2C_Init+0x74>)
 800193c:	f001 faed 	bl	8002f1a <HAL_I2CEx_ConfigAnalogFilter>
 8001940:	4603      	mov	r3, r0
 8001942:	2b00      	cmp	r3, #0
 8001944:	d001      	beq.n	800194a <MX_I2C_Init+0x5e>
  {
    Error_Handler();
 8001946:	f000 f929 	bl	8001b9c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c, 0) != HAL_OK)
 800194a:	2100      	movs	r1, #0
 800194c:	4804      	ldr	r0, [pc, #16]	; (8001960 <MX_I2C_Init+0x74>)
 800194e:	f001 fb20 	bl	8002f92 <HAL_I2CEx_ConfigDigitalFilter>
 8001952:	4603      	mov	r3, r0
 8001954:	2b00      	cmp	r3, #0
 8001956:	d001      	beq.n	800195c <MX_I2C_Init+0x70>
  {
    Error_Handler();
 8001958:	f000 f920 	bl	8001b9c <Error_Handler>
  }
}
 800195c:	bf00      	nop
 800195e:	bd80      	pop	{r7, pc}
 8001960:	2000035c 	.word	0x2000035c
 8001964:	40005800 	.word	0x40005800
 8001968:	000186a0 	.word	0x000186a0

0800196c <LCDHD44780_I2C_PCF8574T_TransmitReceive>:

void LCDHD44780_I2C_PCF8574T_TransmitReceive(uint8_t data,uint8_t size,uint8_t timeOut)
{
 800196c:	b580      	push	{r7, lr}
 800196e:	b084      	sub	sp, #16
 8001970:	af02      	add	r7, sp, #8
 8001972:	4603      	mov	r3, r0
 8001974:	71fb      	strb	r3, [r7, #7]
 8001976:	460b      	mov	r3, r1
 8001978:	71bb      	strb	r3, [r7, #6]
 800197a:	4613      	mov	r3, r2
 800197c:	717b      	strb	r3, [r7, #5]
	data |= 1 << EN_BIT; // protocolo i2c
 800197e:	79fb      	ldrb	r3, [r7, #7]
 8001980:	f043 0304 	orr.w	r3, r3, #4
 8001984:	b2db      	uxtb	r3, r3
 8001986:	71fb      	strb	r3, [r7, #7]
	HAL_I2C_Master_Transmit(&hi2c, I2C_ADDR << 1, &data, size, timeOut);
 8001988:	79bb      	ldrb	r3, [r7, #6]
 800198a:	b299      	uxth	r1, r3
 800198c:	797b      	ldrb	r3, [r7, #5]
 800198e:	1dfa      	adds	r2, r7, #7
 8001990:	9300      	str	r3, [sp, #0]
 8001992:	460b      	mov	r3, r1
 8001994:	214e      	movs	r1, #78	; 0x4e
 8001996:	480c      	ldr	r0, [pc, #48]	; (80019c8 <LCDHD44780_I2C_PCF8574T_TransmitReceive+0x5c>)
 8001998:	f000 ffb8 	bl	800290c <HAL_I2C_Master_Transmit>
	HAL_Delay(1);
 800199c:	2001      	movs	r0, #1
 800199e:	f000 fba1 	bl	80020e4 <HAL_Delay>
	data &= ~(1 << EN_BIT);// protocolo i2c
 80019a2:	79fb      	ldrb	r3, [r7, #7]
 80019a4:	f023 0304 	bic.w	r3, r3, #4
 80019a8:	b2db      	uxtb	r3, r3
 80019aa:	71fb      	strb	r3, [r7, #7]
	HAL_I2C_Master_Transmit(&hi2c, I2C_ADDR << 1, &data, size, timeOut);
 80019ac:	79bb      	ldrb	r3, [r7, #6]
 80019ae:	b299      	uxth	r1, r3
 80019b0:	797b      	ldrb	r3, [r7, #5]
 80019b2:	1dfa      	adds	r2, r7, #7
 80019b4:	9300      	str	r3, [sp, #0]
 80019b6:	460b      	mov	r3, r1
 80019b8:	214e      	movs	r1, #78	; 0x4e
 80019ba:	4803      	ldr	r0, [pc, #12]	; (80019c8 <LCDHD44780_I2C_PCF8574T_TransmitReceive+0x5c>)
 80019bc:	f000 ffa6 	bl	800290c <HAL_I2C_Master_Transmit>
}
 80019c0:	bf00      	nop
 80019c2:	3708      	adds	r7, #8
 80019c4:	46bd      	mov	sp, r7
 80019c6:	bd80      	pop	{r7, pc}
 80019c8:	2000035c 	.word	0x2000035c

080019cc <MX_USART_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
void MX_USART_UART_Init(void)
{
 80019cc:	b580      	push	{r7, lr}
 80019ce:	af00      	add	r7, sp, #0
  huart.Instance = USART3;
 80019d0:	4b11      	ldr	r3, [pc, #68]	; (8001a18 <MX_USART_UART_Init+0x4c>)
 80019d2:	4a12      	ldr	r2, [pc, #72]	; (8001a1c <MX_USART_UART_Init+0x50>)
 80019d4:	601a      	str	r2, [r3, #0]
  huart.Init.BaudRate = 9600;
 80019d6:	4b10      	ldr	r3, [pc, #64]	; (8001a18 <MX_USART_UART_Init+0x4c>)
 80019d8:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80019dc:	605a      	str	r2, [r3, #4]
  huart.Init.WordLength = UART_WORDLENGTH_8B;
 80019de:	4b0e      	ldr	r3, [pc, #56]	; (8001a18 <MX_USART_UART_Init+0x4c>)
 80019e0:	2200      	movs	r2, #0
 80019e2:	609a      	str	r2, [r3, #8]
  huart.Init.StopBits = UART_STOPBITS_1;
 80019e4:	4b0c      	ldr	r3, [pc, #48]	; (8001a18 <MX_USART_UART_Init+0x4c>)
 80019e6:	2200      	movs	r2, #0
 80019e8:	60da      	str	r2, [r3, #12]
  huart.Init.Parity = UART_PARITY_ODD;
 80019ea:	4b0b      	ldr	r3, [pc, #44]	; (8001a18 <MX_USART_UART_Init+0x4c>)
 80019ec:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 80019f0:	611a      	str	r2, [r3, #16]
  huart.Init.Mode = UART_MODE_TX_RX;
 80019f2:	4b09      	ldr	r3, [pc, #36]	; (8001a18 <MX_USART_UART_Init+0x4c>)
 80019f4:	220c      	movs	r2, #12
 80019f6:	615a      	str	r2, [r3, #20]
  huart.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80019f8:	4b07      	ldr	r3, [pc, #28]	; (8001a18 <MX_USART_UART_Init+0x4c>)
 80019fa:	2200      	movs	r2, #0
 80019fc:	619a      	str	r2, [r3, #24]
  huart.Init.OverSampling = UART_OVERSAMPLING_16;
 80019fe:	4b06      	ldr	r3, [pc, #24]	; (8001a18 <MX_USART_UART_Init+0x4c>)
 8001a00:	2200      	movs	r2, #0
 8001a02:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart) != HAL_OK)
 8001a04:	4804      	ldr	r0, [pc, #16]	; (8001a18 <MX_USART_UART_Init+0x4c>)
 8001a06:	f002 fa51 	bl	8003eac <HAL_UART_Init>
 8001a0a:	4603      	mov	r3, r0
 8001a0c:	2b00      	cmp	r3, #0
 8001a0e:	d001      	beq.n	8001a14 <MX_USART_UART_Init+0x48>
  {
    Error_Handler();
 8001a10:	f000 f8c4 	bl	8001b9c <Error_Handler>
  }
}
 8001a14:	bf00      	nop
 8001a16:	bd80      	pop	{r7, pc}
 8001a18:	200003b0 	.word	0x200003b0
 8001a1c:	40004800 	.word	0x40004800

08001a20 <UART_Send_Temperature>:
void UART_Send_Temperature(float temperature)
{
 8001a20:	b580      	push	{r7, lr}
 8001a22:	b082      	sub	sp, #8
 8001a24:	af00      	add	r7, sp, #0
 8001a26:	ed87 0a01 	vstr	s0, [r7, #4]
	  printf("Temperatura=%.2f\n",temperature);
 8001a2a:	6878      	ldr	r0, [r7, #4]
 8001a2c:	f7fe fd9c 	bl	8000568 <__aeabi_f2d>
 8001a30:	4602      	mov	r2, r0
 8001a32:	460b      	mov	r3, r1
 8001a34:	4805      	ldr	r0, [pc, #20]	; (8001a4c <UART_Send_Temperature+0x2c>)
 8001a36:	f003 faa5 	bl	8004f84 <iprintf>
	  HAL_Delay(500);
 8001a3a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001a3e:	f000 fb51 	bl	80020e4 <HAL_Delay>
}
 8001a42:	bf00      	nop
 8001a44:	3708      	adds	r7, #8
 8001a46:	46bd      	mov	sp, r7
 8001a48:	bd80      	pop	{r7, pc}
 8001a4a:	bf00      	nop
 8001a4c:	080075d4 	.word	0x080075d4

08001a50 <UART_TemperatureAlarm>:
void UART_TemperatureAlarm(void)
{
 8001a50:	b580      	push	{r7, lr}
 8001a52:	af00      	add	r7, sp, #0
	  printf("Alarma: Err1\n");
 8001a54:	4804      	ldr	r0, [pc, #16]	; (8001a68 <UART_TemperatureAlarm+0x18>)
 8001a56:	f003 fb1b 	bl	8005090 <puts>
	  HAL_Delay(500);
 8001a5a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001a5e:	f000 fb41 	bl	80020e4 <HAL_Delay>
}
 8001a62:	bf00      	nop
 8001a64:	bd80      	pop	{r7, pc}
 8001a66:	bf00      	nop
 8001a68:	080075e8 	.word	0x080075e8

08001a6c <UART_SensorTemperatureError>:
void UART_SensorTemperatureError(void)
{
 8001a6c:	b580      	push	{r7, lr}
 8001a6e:	af00      	add	r7, sp, #0
	  printf("Error en lectura del sensor: Err2\n");
 8001a70:	4804      	ldr	r0, [pc, #16]	; (8001a84 <UART_SensorTemperatureError+0x18>)
 8001a72:	f003 fb0d 	bl	8005090 <puts>
	  HAL_Delay(500);
 8001a76:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001a7a:	f000 fb33 	bl	80020e4 <HAL_Delay>
}
 8001a7e:	bf00      	nop
 8001a80:	bd80      	pop	{r7, pc}
 8001a82:	bf00      	nop
 8001a84:	080075f8 	.word	0x080075f8

08001a88 <UART_SensorConnectError>:
void UART_SensorConnectError(void)
{
 8001a88:	b580      	push	{r7, lr}
 8001a8a:	af00      	add	r7, sp, #0
	  printf("Error en la Conexion con el sensor: Err3\n");
 8001a8c:	4804      	ldr	r0, [pc, #16]	; (8001aa0 <UART_SensorConnectError+0x18>)
 8001a8e:	f003 faff 	bl	8005090 <puts>
	  HAL_Delay(500);
 8001a92:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001a96:	f000 fb25 	bl	80020e4 <HAL_Delay>
}
 8001a9a:	bf00      	nop
 8001a9c:	bd80      	pop	{r7, pc}
 8001a9e:	bf00      	nop
 8001aa0:	0800761c 	.word	0x0800761c

08001aa4 <__io_putchar>:

PUTCHAR_PROTOTYPE
{
 8001aa4:	b580      	push	{r7, lr}
 8001aa6:	b082      	sub	sp, #8
 8001aa8:	af00      	add	r7, sp, #0
 8001aaa:	6078      	str	r0, [r7, #4]
  /* Place your implementation of fputc here */
  /* e.g. write a character to the USART3 and Loop until the end of transmission */
  HAL_UART_Transmit(&huart, (uint8_t *)&ch, 1, 0xFFFF);
 8001aac:	1d39      	adds	r1, r7, #4
 8001aae:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001ab2:	2201      	movs	r2, #1
 8001ab4:	4803      	ldr	r0, [pc, #12]	; (8001ac4 <__io_putchar+0x20>)
 8001ab6:	f002 fa46 	bl	8003f46 <HAL_UART_Transmit>
  return ch;
 8001aba:	687b      	ldr	r3, [r7, #4]
}
 8001abc:	4618      	mov	r0, r3
 8001abe:	3708      	adds	r7, #8
 8001ac0:	46bd      	mov	sp, r7
 8001ac2:	bd80      	pop	{r7, pc}
 8001ac4:	200003b0 	.word	0x200003b0

08001ac8 <main>:
#include "main.h"

void SystemClock_Config(void);

int main(void)
{
 8001ac8:	b580      	push	{r7, lr}
 8001aca:	af00      	add	r7, sp, #0
  HAL_Init();
 8001acc:	f000 fa98 	bl	8002000 <HAL_Init>
  SystemClock_Config();
 8001ad0:	f000 f804 	bl	8001adc <SystemClock_Config>

  while (1)
  {
	  FSM_Termometro_Update();
 8001ad4:	f7ff fc3c 	bl	8001350 <FSM_Termometro_Update>
 8001ad8:	e7fc      	b.n	8001ad4 <main+0xc>
	...

08001adc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001adc:	b580      	push	{r7, lr}
 8001ade:	b094      	sub	sp, #80	; 0x50
 8001ae0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001ae2:	f107 0320 	add.w	r3, r7, #32
 8001ae6:	2230      	movs	r2, #48	; 0x30
 8001ae8:	2100      	movs	r1, #0
 8001aea:	4618      	mov	r0, r3
 8001aec:	f002 fdd8 	bl	80046a0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001af0:	f107 030c 	add.w	r3, r7, #12
 8001af4:	2200      	movs	r2, #0
 8001af6:	601a      	str	r2, [r3, #0]
 8001af8:	605a      	str	r2, [r3, #4]
 8001afa:	609a      	str	r2, [r3, #8]
 8001afc:	60da      	str	r2, [r3, #12]
 8001afe:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001b00:	2300      	movs	r3, #0
 8001b02:	60bb      	str	r3, [r7, #8]
 8001b04:	4b23      	ldr	r3, [pc, #140]	; (8001b94 <SystemClock_Config+0xb8>)
 8001b06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b08:	4a22      	ldr	r2, [pc, #136]	; (8001b94 <SystemClock_Config+0xb8>)
 8001b0a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001b0e:	6413      	str	r3, [r2, #64]	; 0x40
 8001b10:	4b20      	ldr	r3, [pc, #128]	; (8001b94 <SystemClock_Config+0xb8>)
 8001b12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b14:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b18:	60bb      	str	r3, [r7, #8]
 8001b1a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8001b1c:	2300      	movs	r3, #0
 8001b1e:	607b      	str	r3, [r7, #4]
 8001b20:	4b1d      	ldr	r3, [pc, #116]	; (8001b98 <SystemClock_Config+0xbc>)
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001b28:	4a1b      	ldr	r2, [pc, #108]	; (8001b98 <SystemClock_Config+0xbc>)
 8001b2a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001b2e:	6013      	str	r3, [r2, #0]
 8001b30:	4b19      	ldr	r3, [pc, #100]	; (8001b98 <SystemClock_Config+0xbc>)
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001b38:	607b      	str	r3, [r7, #4]
 8001b3a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001b3c:	2302      	movs	r3, #2
 8001b3e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001b40:	2301      	movs	r3, #1
 8001b42:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001b44:	2310      	movs	r3, #16
 8001b46:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001b48:	2300      	movs	r3, #0
 8001b4a:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001b4c:	f107 0320 	add.w	r3, r7, #32
 8001b50:	4618      	mov	r0, r3
 8001b52:	f001 fa5d 	bl	8003010 <HAL_RCC_OscConfig>
 8001b56:	4603      	mov	r3, r0
 8001b58:	2b00      	cmp	r3, #0
 8001b5a:	d001      	beq.n	8001b60 <SystemClock_Config+0x84>
  {
    Error_Handler();
 8001b5c:	f000 f81e 	bl	8001b9c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001b60:	230f      	movs	r3, #15
 8001b62:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8001b64:	2300      	movs	r3, #0
 8001b66:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001b68:	2300      	movs	r3, #0
 8001b6a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001b6c:	2300      	movs	r3, #0
 8001b6e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001b70:	2300      	movs	r3, #0
 8001b72:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001b74:	f107 030c 	add.w	r3, r7, #12
 8001b78:	2100      	movs	r1, #0
 8001b7a:	4618      	mov	r0, r3
 8001b7c:	f001 fcc0 	bl	8003500 <HAL_RCC_ClockConfig>
 8001b80:	4603      	mov	r3, r0
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	d001      	beq.n	8001b8a <SystemClock_Config+0xae>
  {
    Error_Handler();
 8001b86:	f000 f809 	bl	8001b9c <Error_Handler>
  }
}
 8001b8a:	bf00      	nop
 8001b8c:	3750      	adds	r7, #80	; 0x50
 8001b8e:	46bd      	mov	sp, r7
 8001b90:	bd80      	pop	{r7, pc}
 8001b92:	bf00      	nop
 8001b94:	40023800 	.word	0x40023800
 8001b98:	40007000 	.word	0x40007000

08001b9c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001b9c:	b480      	push	{r7}
 8001b9e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001ba0:	b672      	cpsid	i
}
 8001ba2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001ba4:	e7fe      	b.n	8001ba4 <Error_Handler+0x8>
	...

08001ba8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001ba8:	b480      	push	{r7}
 8001baa:	b083      	sub	sp, #12
 8001bac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001bae:	2300      	movs	r3, #0
 8001bb0:	607b      	str	r3, [r7, #4]
 8001bb2:	4b10      	ldr	r3, [pc, #64]	; (8001bf4 <HAL_MspInit+0x4c>)
 8001bb4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bb6:	4a0f      	ldr	r2, [pc, #60]	; (8001bf4 <HAL_MspInit+0x4c>)
 8001bb8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001bbc:	6453      	str	r3, [r2, #68]	; 0x44
 8001bbe:	4b0d      	ldr	r3, [pc, #52]	; (8001bf4 <HAL_MspInit+0x4c>)
 8001bc0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bc2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001bc6:	607b      	str	r3, [r7, #4]
 8001bc8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001bca:	2300      	movs	r3, #0
 8001bcc:	603b      	str	r3, [r7, #0]
 8001bce:	4b09      	ldr	r3, [pc, #36]	; (8001bf4 <HAL_MspInit+0x4c>)
 8001bd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bd2:	4a08      	ldr	r2, [pc, #32]	; (8001bf4 <HAL_MspInit+0x4c>)
 8001bd4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001bd8:	6413      	str	r3, [r2, #64]	; 0x40
 8001bda:	4b06      	ldr	r3, [pc, #24]	; (8001bf4 <HAL_MspInit+0x4c>)
 8001bdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bde:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001be2:	603b      	str	r3, [r7, #0]
 8001be4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001be6:	bf00      	nop
 8001be8:	370c      	adds	r7, #12
 8001bea:	46bd      	mov	sp, r7
 8001bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf0:	4770      	bx	lr
 8001bf2:	bf00      	nop
 8001bf4:	40023800 	.word	0x40023800

08001bf8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001bf8:	b580      	push	{r7, lr}
 8001bfa:	b08a      	sub	sp, #40	; 0x28
 8001bfc:	af00      	add	r7, sp, #0
 8001bfe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c00:	f107 0314 	add.w	r3, r7, #20
 8001c04:	2200      	movs	r2, #0
 8001c06:	601a      	str	r2, [r3, #0]
 8001c08:	605a      	str	r2, [r3, #4]
 8001c0a:	609a      	str	r2, [r3, #8]
 8001c0c:	60da      	str	r2, [r3, #12]
 8001c0e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C2)
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	4a19      	ldr	r2, [pc, #100]	; (8001c7c <HAL_I2C_MspInit+0x84>)
 8001c16:	4293      	cmp	r3, r2
 8001c18:	d12b      	bne.n	8001c72 <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001c1a:	2300      	movs	r3, #0
 8001c1c:	613b      	str	r3, [r7, #16]
 8001c1e:	4b18      	ldr	r3, [pc, #96]	; (8001c80 <HAL_I2C_MspInit+0x88>)
 8001c20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c22:	4a17      	ldr	r2, [pc, #92]	; (8001c80 <HAL_I2C_MspInit+0x88>)
 8001c24:	f043 0320 	orr.w	r3, r3, #32
 8001c28:	6313      	str	r3, [r2, #48]	; 0x30
 8001c2a:	4b15      	ldr	r3, [pc, #84]	; (8001c80 <HAL_I2C_MspInit+0x88>)
 8001c2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c2e:	f003 0320 	and.w	r3, r3, #32
 8001c32:	613b      	str	r3, [r7, #16]
 8001c34:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PF0     ------> I2C2_SDA
    PF1     ------> I2C2_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001c36:	2303      	movs	r3, #3
 8001c38:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001c3a:	2312      	movs	r3, #18
 8001c3c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c3e:	2300      	movs	r3, #0
 8001c40:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c42:	2303      	movs	r3, #3
 8001c44:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001c46:	2304      	movs	r3, #4
 8001c48:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001c4a:	f107 0314 	add.w	r3, r7, #20
 8001c4e:	4619      	mov	r1, r3
 8001c50:	480c      	ldr	r0, [pc, #48]	; (8001c84 <HAL_I2C_MspInit+0x8c>)
 8001c52:	f000 fb51 	bl	80022f8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001c56:	2300      	movs	r3, #0
 8001c58:	60fb      	str	r3, [r7, #12]
 8001c5a:	4b09      	ldr	r3, [pc, #36]	; (8001c80 <HAL_I2C_MspInit+0x88>)
 8001c5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c5e:	4a08      	ldr	r2, [pc, #32]	; (8001c80 <HAL_I2C_MspInit+0x88>)
 8001c60:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001c64:	6413      	str	r3, [r2, #64]	; 0x40
 8001c66:	4b06      	ldr	r3, [pc, #24]	; (8001c80 <HAL_I2C_MspInit+0x88>)
 8001c68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c6a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001c6e:	60fb      	str	r3, [r7, #12]
 8001c70:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8001c72:	bf00      	nop
 8001c74:	3728      	adds	r7, #40	; 0x28
 8001c76:	46bd      	mov	sp, r7
 8001c78:	bd80      	pop	{r7, pc}
 8001c7a:	bf00      	nop
 8001c7c:	40005800 	.word	0x40005800
 8001c80:	40023800 	.word	0x40023800
 8001c84:	40021400 	.word	0x40021400

08001c88 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001c88:	b580      	push	{r7, lr}
 8001c8a:	b08a      	sub	sp, #40	; 0x28
 8001c8c:	af00      	add	r7, sp, #0
 8001c8e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c90:	f107 0314 	add.w	r3, r7, #20
 8001c94:	2200      	movs	r2, #0
 8001c96:	601a      	str	r2, [r3, #0]
 8001c98:	605a      	str	r2, [r3, #4]
 8001c9a:	609a      	str	r2, [r3, #8]
 8001c9c:	60da      	str	r2, [r3, #12]
 8001c9e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	4a19      	ldr	r2, [pc, #100]	; (8001d0c <HAL_SPI_MspInit+0x84>)
 8001ca6:	4293      	cmp	r3, r2
 8001ca8:	d12b      	bne.n	8001d02 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001caa:	2300      	movs	r3, #0
 8001cac:	613b      	str	r3, [r7, #16]
 8001cae:	4b18      	ldr	r3, [pc, #96]	; (8001d10 <HAL_SPI_MspInit+0x88>)
 8001cb0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001cb2:	4a17      	ldr	r2, [pc, #92]	; (8001d10 <HAL_SPI_MspInit+0x88>)
 8001cb4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001cb8:	6453      	str	r3, [r2, #68]	; 0x44
 8001cba:	4b15      	ldr	r3, [pc, #84]	; (8001d10 <HAL_SPI_MspInit+0x88>)
 8001cbc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001cbe:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001cc2:	613b      	str	r3, [r7, #16]
 8001cc4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001cc6:	2300      	movs	r3, #0
 8001cc8:	60fb      	str	r3, [r7, #12]
 8001cca:	4b11      	ldr	r3, [pc, #68]	; (8001d10 <HAL_SPI_MspInit+0x88>)
 8001ccc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cce:	4a10      	ldr	r2, [pc, #64]	; (8001d10 <HAL_SPI_MspInit+0x88>)
 8001cd0:	f043 0301 	orr.w	r3, r3, #1
 8001cd4:	6313      	str	r3, [r2, #48]	; 0x30
 8001cd6:	4b0e      	ldr	r3, [pc, #56]	; (8001d10 <HAL_SPI_MspInit+0x88>)
 8001cd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cda:	f003 0301 	and.w	r3, r3, #1
 8001cde:	60fb      	str	r3, [r7, #12]
 8001ce0:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8001ce2:	23e0      	movs	r3, #224	; 0xe0
 8001ce4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ce6:	2302      	movs	r3, #2
 8001ce8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cea:	2300      	movs	r3, #0
 8001cec:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001cee:	2303      	movs	r3, #3
 8001cf0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001cf2:	2305      	movs	r3, #5
 8001cf4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001cf6:	f107 0314 	add.w	r3, r7, #20
 8001cfa:	4619      	mov	r1, r3
 8001cfc:	4805      	ldr	r0, [pc, #20]	; (8001d14 <HAL_SPI_MspInit+0x8c>)
 8001cfe:	f000 fafb 	bl	80022f8 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001d02:	bf00      	nop
 8001d04:	3728      	adds	r7, #40	; 0x28
 8001d06:	46bd      	mov	sp, r7
 8001d08:	bd80      	pop	{r7, pc}
 8001d0a:	bf00      	nop
 8001d0c:	40013000 	.word	0x40013000
 8001d10:	40023800 	.word	0x40023800
 8001d14:	40020000 	.word	0x40020000

08001d18 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001d18:	b580      	push	{r7, lr}
 8001d1a:	b08a      	sub	sp, #40	; 0x28
 8001d1c:	af00      	add	r7, sp, #0
 8001d1e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d20:	f107 0314 	add.w	r3, r7, #20
 8001d24:	2200      	movs	r2, #0
 8001d26:	601a      	str	r2, [r3, #0]
 8001d28:	605a      	str	r2, [r3, #4]
 8001d2a:	609a      	str	r2, [r3, #8]
 8001d2c:	60da      	str	r2, [r3, #12]
 8001d2e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	4a19      	ldr	r2, [pc, #100]	; (8001d9c <HAL_UART_MspInit+0x84>)
 8001d36:	4293      	cmp	r3, r2
 8001d38:	d12c      	bne.n	8001d94 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8001d3a:	2300      	movs	r3, #0
 8001d3c:	613b      	str	r3, [r7, #16]
 8001d3e:	4b18      	ldr	r3, [pc, #96]	; (8001da0 <HAL_UART_MspInit+0x88>)
 8001d40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d42:	4a17      	ldr	r2, [pc, #92]	; (8001da0 <HAL_UART_MspInit+0x88>)
 8001d44:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001d48:	6413      	str	r3, [r2, #64]	; 0x40
 8001d4a:	4b15      	ldr	r3, [pc, #84]	; (8001da0 <HAL_UART_MspInit+0x88>)
 8001d4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d4e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001d52:	613b      	str	r3, [r7, #16]
 8001d54:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001d56:	2300      	movs	r3, #0
 8001d58:	60fb      	str	r3, [r7, #12]
 8001d5a:	4b11      	ldr	r3, [pc, #68]	; (8001da0 <HAL_UART_MspInit+0x88>)
 8001d5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d5e:	4a10      	ldr	r2, [pc, #64]	; (8001da0 <HAL_UART_MspInit+0x88>)
 8001d60:	f043 0308 	orr.w	r3, r3, #8
 8001d64:	6313      	str	r3, [r2, #48]	; 0x30
 8001d66:	4b0e      	ldr	r3, [pc, #56]	; (8001da0 <HAL_UART_MspInit+0x88>)
 8001d68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d6a:	f003 0308 	and.w	r3, r3, #8
 8001d6e:	60fb      	str	r3, [r7, #12]
 8001d70:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001d72:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001d76:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d78:	2302      	movs	r3, #2
 8001d7a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d7c:	2300      	movs	r3, #0
 8001d7e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d80:	2303      	movs	r3, #3
 8001d82:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001d84:	2307      	movs	r3, #7
 8001d86:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001d88:	f107 0314 	add.w	r3, r7, #20
 8001d8c:	4619      	mov	r1, r3
 8001d8e:	4805      	ldr	r0, [pc, #20]	; (8001da4 <HAL_UART_MspInit+0x8c>)
 8001d90:	f000 fab2 	bl	80022f8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001d94:	bf00      	nop
 8001d96:	3728      	adds	r7, #40	; 0x28
 8001d98:	46bd      	mov	sp, r7
 8001d9a:	bd80      	pop	{r7, pc}
 8001d9c:	40004800 	.word	0x40004800
 8001da0:	40023800 	.word	0x40023800
 8001da4:	40020c00 	.word	0x40020c00

08001da8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001da8:	b480      	push	{r7}
 8001daa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001dac:	e7fe      	b.n	8001dac <NMI_Handler+0x4>

08001dae <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001dae:	b480      	push	{r7}
 8001db0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001db2:	e7fe      	b.n	8001db2 <HardFault_Handler+0x4>

08001db4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001db4:	b480      	push	{r7}
 8001db6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001db8:	e7fe      	b.n	8001db8 <MemManage_Handler+0x4>

08001dba <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001dba:	b480      	push	{r7}
 8001dbc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001dbe:	e7fe      	b.n	8001dbe <BusFault_Handler+0x4>

08001dc0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001dc0:	b480      	push	{r7}
 8001dc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001dc4:	e7fe      	b.n	8001dc4 <UsageFault_Handler+0x4>

08001dc6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001dc6:	b480      	push	{r7}
 8001dc8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001dca:	bf00      	nop
 8001dcc:	46bd      	mov	sp, r7
 8001dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dd2:	4770      	bx	lr

08001dd4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001dd4:	b480      	push	{r7}
 8001dd6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001dd8:	bf00      	nop
 8001dda:	46bd      	mov	sp, r7
 8001ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001de0:	4770      	bx	lr

08001de2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001de2:	b480      	push	{r7}
 8001de4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001de6:	bf00      	nop
 8001de8:	46bd      	mov	sp, r7
 8001dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dee:	4770      	bx	lr

08001df0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001df0:	b580      	push	{r7, lr}
 8001df2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001df4:	f000 f956 	bl	80020a4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001df8:	bf00      	nop
 8001dfa:	bd80      	pop	{r7, pc}

08001dfc <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001dfc:	b480      	push	{r7}
 8001dfe:	af00      	add	r7, sp, #0
  return 1;
 8001e00:	2301      	movs	r3, #1
}
 8001e02:	4618      	mov	r0, r3
 8001e04:	46bd      	mov	sp, r7
 8001e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e0a:	4770      	bx	lr

08001e0c <_kill>:

int _kill(int pid, int sig)
{
 8001e0c:	b580      	push	{r7, lr}
 8001e0e:	b082      	sub	sp, #8
 8001e10:	af00      	add	r7, sp, #0
 8001e12:	6078      	str	r0, [r7, #4]
 8001e14:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001e16:	f002 fc0b 	bl	8004630 <__errno>
 8001e1a:	4603      	mov	r3, r0
 8001e1c:	2216      	movs	r2, #22
 8001e1e:	601a      	str	r2, [r3, #0]
  return -1;
 8001e20:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8001e24:	4618      	mov	r0, r3
 8001e26:	3708      	adds	r7, #8
 8001e28:	46bd      	mov	sp, r7
 8001e2a:	bd80      	pop	{r7, pc}

08001e2c <_exit>:

void _exit (int status)
{
 8001e2c:	b580      	push	{r7, lr}
 8001e2e:	b082      	sub	sp, #8
 8001e30:	af00      	add	r7, sp, #0
 8001e32:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001e34:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001e38:	6878      	ldr	r0, [r7, #4]
 8001e3a:	f7ff ffe7 	bl	8001e0c <_kill>
  while (1) {}    /* Make sure we hang here */
 8001e3e:	e7fe      	b.n	8001e3e <_exit+0x12>

08001e40 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001e40:	b580      	push	{r7, lr}
 8001e42:	b086      	sub	sp, #24
 8001e44:	af00      	add	r7, sp, #0
 8001e46:	60f8      	str	r0, [r7, #12]
 8001e48:	60b9      	str	r1, [r7, #8]
 8001e4a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001e4c:	2300      	movs	r3, #0
 8001e4e:	617b      	str	r3, [r7, #20]
 8001e50:	e00a      	b.n	8001e68 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001e52:	f3af 8000 	nop.w
 8001e56:	4601      	mov	r1, r0
 8001e58:	68bb      	ldr	r3, [r7, #8]
 8001e5a:	1c5a      	adds	r2, r3, #1
 8001e5c:	60ba      	str	r2, [r7, #8]
 8001e5e:	b2ca      	uxtb	r2, r1
 8001e60:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001e62:	697b      	ldr	r3, [r7, #20]
 8001e64:	3301      	adds	r3, #1
 8001e66:	617b      	str	r3, [r7, #20]
 8001e68:	697a      	ldr	r2, [r7, #20]
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	429a      	cmp	r2, r3
 8001e6e:	dbf0      	blt.n	8001e52 <_read+0x12>
  }

  return len;
 8001e70:	687b      	ldr	r3, [r7, #4]
}
 8001e72:	4618      	mov	r0, r3
 8001e74:	3718      	adds	r7, #24
 8001e76:	46bd      	mov	sp, r7
 8001e78:	bd80      	pop	{r7, pc}

08001e7a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001e7a:	b580      	push	{r7, lr}
 8001e7c:	b086      	sub	sp, #24
 8001e7e:	af00      	add	r7, sp, #0
 8001e80:	60f8      	str	r0, [r7, #12]
 8001e82:	60b9      	str	r1, [r7, #8]
 8001e84:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001e86:	2300      	movs	r3, #0
 8001e88:	617b      	str	r3, [r7, #20]
 8001e8a:	e009      	b.n	8001ea0 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001e8c:	68bb      	ldr	r3, [r7, #8]
 8001e8e:	1c5a      	adds	r2, r3, #1
 8001e90:	60ba      	str	r2, [r7, #8]
 8001e92:	781b      	ldrb	r3, [r3, #0]
 8001e94:	4618      	mov	r0, r3
 8001e96:	f7ff fe05 	bl	8001aa4 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001e9a:	697b      	ldr	r3, [r7, #20]
 8001e9c:	3301      	adds	r3, #1
 8001e9e:	617b      	str	r3, [r7, #20]
 8001ea0:	697a      	ldr	r2, [r7, #20]
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	429a      	cmp	r2, r3
 8001ea6:	dbf1      	blt.n	8001e8c <_write+0x12>
  }
  return len;
 8001ea8:	687b      	ldr	r3, [r7, #4]
}
 8001eaa:	4618      	mov	r0, r3
 8001eac:	3718      	adds	r7, #24
 8001eae:	46bd      	mov	sp, r7
 8001eb0:	bd80      	pop	{r7, pc}

08001eb2 <_close>:

int _close(int file)
{
 8001eb2:	b480      	push	{r7}
 8001eb4:	b083      	sub	sp, #12
 8001eb6:	af00      	add	r7, sp, #0
 8001eb8:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001eba:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8001ebe:	4618      	mov	r0, r3
 8001ec0:	370c      	adds	r7, #12
 8001ec2:	46bd      	mov	sp, r7
 8001ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ec8:	4770      	bx	lr

08001eca <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001eca:	b480      	push	{r7}
 8001ecc:	b083      	sub	sp, #12
 8001ece:	af00      	add	r7, sp, #0
 8001ed0:	6078      	str	r0, [r7, #4]
 8001ed2:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001ed4:	683b      	ldr	r3, [r7, #0]
 8001ed6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001eda:	605a      	str	r2, [r3, #4]
  return 0;
 8001edc:	2300      	movs	r3, #0
}
 8001ede:	4618      	mov	r0, r3
 8001ee0:	370c      	adds	r7, #12
 8001ee2:	46bd      	mov	sp, r7
 8001ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ee8:	4770      	bx	lr

08001eea <_isatty>:

int _isatty(int file)
{
 8001eea:	b480      	push	{r7}
 8001eec:	b083      	sub	sp, #12
 8001eee:	af00      	add	r7, sp, #0
 8001ef0:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001ef2:	2301      	movs	r3, #1
}
 8001ef4:	4618      	mov	r0, r3
 8001ef6:	370c      	adds	r7, #12
 8001ef8:	46bd      	mov	sp, r7
 8001efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001efe:	4770      	bx	lr

08001f00 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001f00:	b480      	push	{r7}
 8001f02:	b085      	sub	sp, #20
 8001f04:	af00      	add	r7, sp, #0
 8001f06:	60f8      	str	r0, [r7, #12]
 8001f08:	60b9      	str	r1, [r7, #8]
 8001f0a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001f0c:	2300      	movs	r3, #0
}
 8001f0e:	4618      	mov	r0, r3
 8001f10:	3714      	adds	r7, #20
 8001f12:	46bd      	mov	sp, r7
 8001f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f18:	4770      	bx	lr
	...

08001f1c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001f1c:	b580      	push	{r7, lr}
 8001f1e:	b086      	sub	sp, #24
 8001f20:	af00      	add	r7, sp, #0
 8001f22:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001f24:	4a14      	ldr	r2, [pc, #80]	; (8001f78 <_sbrk+0x5c>)
 8001f26:	4b15      	ldr	r3, [pc, #84]	; (8001f7c <_sbrk+0x60>)
 8001f28:	1ad3      	subs	r3, r2, r3
 8001f2a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001f2c:	697b      	ldr	r3, [r7, #20]
 8001f2e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001f30:	4b13      	ldr	r3, [pc, #76]	; (8001f80 <_sbrk+0x64>)
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	2b00      	cmp	r3, #0
 8001f36:	d102      	bne.n	8001f3e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001f38:	4b11      	ldr	r3, [pc, #68]	; (8001f80 <_sbrk+0x64>)
 8001f3a:	4a12      	ldr	r2, [pc, #72]	; (8001f84 <_sbrk+0x68>)
 8001f3c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001f3e:	4b10      	ldr	r3, [pc, #64]	; (8001f80 <_sbrk+0x64>)
 8001f40:	681a      	ldr	r2, [r3, #0]
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	4413      	add	r3, r2
 8001f46:	693a      	ldr	r2, [r7, #16]
 8001f48:	429a      	cmp	r2, r3
 8001f4a:	d207      	bcs.n	8001f5c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001f4c:	f002 fb70 	bl	8004630 <__errno>
 8001f50:	4603      	mov	r3, r0
 8001f52:	220c      	movs	r2, #12
 8001f54:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001f56:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001f5a:	e009      	b.n	8001f70 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001f5c:	4b08      	ldr	r3, [pc, #32]	; (8001f80 <_sbrk+0x64>)
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001f62:	4b07      	ldr	r3, [pc, #28]	; (8001f80 <_sbrk+0x64>)
 8001f64:	681a      	ldr	r2, [r3, #0]
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	4413      	add	r3, r2
 8001f6a:	4a05      	ldr	r2, [pc, #20]	; (8001f80 <_sbrk+0x64>)
 8001f6c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001f6e:	68fb      	ldr	r3, [r7, #12]
}
 8001f70:	4618      	mov	r0, r3
 8001f72:	3718      	adds	r7, #24
 8001f74:	46bd      	mov	sp, r7
 8001f76:	bd80      	pop	{r7, pc}
 8001f78:	20030000 	.word	0x20030000
 8001f7c:	00000400 	.word	0x00000400
 8001f80:	200003f4 	.word	0x200003f4
 8001f84:	20000410 	.word	0x20000410

08001f88 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001f88:	b480      	push	{r7}
 8001f8a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001f8c:	4b06      	ldr	r3, [pc, #24]	; (8001fa8 <SystemInit+0x20>)
 8001f8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001f92:	4a05      	ldr	r2, [pc, #20]	; (8001fa8 <SystemInit+0x20>)
 8001f94:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001f98:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001f9c:	bf00      	nop
 8001f9e:	46bd      	mov	sp, r7
 8001fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fa4:	4770      	bx	lr
 8001fa6:	bf00      	nop
 8001fa8:	e000ed00 	.word	0xe000ed00

08001fac <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8001fac:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001fe4 <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001fb0:	480d      	ldr	r0, [pc, #52]	; (8001fe8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001fb2:	490e      	ldr	r1, [pc, #56]	; (8001fec <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001fb4:	4a0e      	ldr	r2, [pc, #56]	; (8001ff0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001fb6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001fb8:	e002      	b.n	8001fc0 <LoopCopyDataInit>

08001fba <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001fba:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001fbc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001fbe:	3304      	adds	r3, #4

08001fc0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001fc0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001fc2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001fc4:	d3f9      	bcc.n	8001fba <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001fc6:	4a0b      	ldr	r2, [pc, #44]	; (8001ff4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001fc8:	4c0b      	ldr	r4, [pc, #44]	; (8001ff8 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001fca:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001fcc:	e001      	b.n	8001fd2 <LoopFillZerobss>

08001fce <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001fce:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001fd0:	3204      	adds	r2, #4

08001fd2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001fd2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001fd4:	d3fb      	bcc.n	8001fce <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001fd6:	f7ff ffd7 	bl	8001f88 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001fda:	f002 fb2f 	bl	800463c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001fde:	f7ff fd73 	bl	8001ac8 <main>
  bx  lr    
 8001fe2:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8001fe4:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8001fe8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001fec:	200001e0 	.word	0x200001e0
  ldr r2, =_sidata
 8001ff0:	08007a4c 	.word	0x08007a4c
  ldr r2, =_sbss
 8001ff4:	200001e0 	.word	0x200001e0
  ldr r4, =_ebss
 8001ff8:	2000040c 	.word	0x2000040c

08001ffc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001ffc:	e7fe      	b.n	8001ffc <ADC_IRQHandler>
	...

08002000 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002000:	b580      	push	{r7, lr}
 8002002:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002004:	4b0e      	ldr	r3, [pc, #56]	; (8002040 <HAL_Init+0x40>)
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	4a0d      	ldr	r2, [pc, #52]	; (8002040 <HAL_Init+0x40>)
 800200a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800200e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002010:	4b0b      	ldr	r3, [pc, #44]	; (8002040 <HAL_Init+0x40>)
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	4a0a      	ldr	r2, [pc, #40]	; (8002040 <HAL_Init+0x40>)
 8002016:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800201a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800201c:	4b08      	ldr	r3, [pc, #32]	; (8002040 <HAL_Init+0x40>)
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	4a07      	ldr	r2, [pc, #28]	; (8002040 <HAL_Init+0x40>)
 8002022:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002026:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002028:	2003      	movs	r0, #3
 800202a:	f000 f931 	bl	8002290 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800202e:	200f      	movs	r0, #15
 8002030:	f000 f808 	bl	8002044 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002034:	f7ff fdb8 	bl	8001ba8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002038:	2300      	movs	r3, #0
}
 800203a:	4618      	mov	r0, r3
 800203c:	bd80      	pop	{r7, pc}
 800203e:	bf00      	nop
 8002040:	40023c00 	.word	0x40023c00

08002044 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002044:	b580      	push	{r7, lr}
 8002046:	b082      	sub	sp, #8
 8002048:	af00      	add	r7, sp, #0
 800204a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800204c:	4b12      	ldr	r3, [pc, #72]	; (8002098 <HAL_InitTick+0x54>)
 800204e:	681a      	ldr	r2, [r3, #0]
 8002050:	4b12      	ldr	r3, [pc, #72]	; (800209c <HAL_InitTick+0x58>)
 8002052:	781b      	ldrb	r3, [r3, #0]
 8002054:	4619      	mov	r1, r3
 8002056:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800205a:	fbb3 f3f1 	udiv	r3, r3, r1
 800205e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002062:	4618      	mov	r0, r3
 8002064:	f000 f93b 	bl	80022de <HAL_SYSTICK_Config>
 8002068:	4603      	mov	r3, r0
 800206a:	2b00      	cmp	r3, #0
 800206c:	d001      	beq.n	8002072 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800206e:	2301      	movs	r3, #1
 8002070:	e00e      	b.n	8002090 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	2b0f      	cmp	r3, #15
 8002076:	d80a      	bhi.n	800208e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002078:	2200      	movs	r2, #0
 800207a:	6879      	ldr	r1, [r7, #4]
 800207c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002080:	f000 f911 	bl	80022a6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002084:	4a06      	ldr	r2, [pc, #24]	; (80020a0 <HAL_InitTick+0x5c>)
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800208a:	2300      	movs	r3, #0
 800208c:	e000      	b.n	8002090 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800208e:	2301      	movs	r3, #1
}
 8002090:	4618      	mov	r0, r3
 8002092:	3708      	adds	r7, #8
 8002094:	46bd      	mov	sp, r7
 8002096:	bd80      	pop	{r7, pc}
 8002098:	20000004 	.word	0x20000004
 800209c:	2000000c 	.word	0x2000000c
 80020a0:	20000008 	.word	0x20000008

080020a4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80020a4:	b480      	push	{r7}
 80020a6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80020a8:	4b06      	ldr	r3, [pc, #24]	; (80020c4 <HAL_IncTick+0x20>)
 80020aa:	781b      	ldrb	r3, [r3, #0]
 80020ac:	461a      	mov	r2, r3
 80020ae:	4b06      	ldr	r3, [pc, #24]	; (80020c8 <HAL_IncTick+0x24>)
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	4413      	add	r3, r2
 80020b4:	4a04      	ldr	r2, [pc, #16]	; (80020c8 <HAL_IncTick+0x24>)
 80020b6:	6013      	str	r3, [r2, #0]
}
 80020b8:	bf00      	nop
 80020ba:	46bd      	mov	sp, r7
 80020bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020c0:	4770      	bx	lr
 80020c2:	bf00      	nop
 80020c4:	2000000c 	.word	0x2000000c
 80020c8:	200003f8 	.word	0x200003f8

080020cc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80020cc:	b480      	push	{r7}
 80020ce:	af00      	add	r7, sp, #0
  return uwTick;
 80020d0:	4b03      	ldr	r3, [pc, #12]	; (80020e0 <HAL_GetTick+0x14>)
 80020d2:	681b      	ldr	r3, [r3, #0]
}
 80020d4:	4618      	mov	r0, r3
 80020d6:	46bd      	mov	sp, r7
 80020d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020dc:	4770      	bx	lr
 80020de:	bf00      	nop
 80020e0:	200003f8 	.word	0x200003f8

080020e4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80020e4:	b580      	push	{r7, lr}
 80020e6:	b084      	sub	sp, #16
 80020e8:	af00      	add	r7, sp, #0
 80020ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80020ec:	f7ff ffee 	bl	80020cc <HAL_GetTick>
 80020f0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80020f6:	68fb      	ldr	r3, [r7, #12]
 80020f8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80020fc:	d005      	beq.n	800210a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80020fe:	4b0a      	ldr	r3, [pc, #40]	; (8002128 <HAL_Delay+0x44>)
 8002100:	781b      	ldrb	r3, [r3, #0]
 8002102:	461a      	mov	r2, r3
 8002104:	68fb      	ldr	r3, [r7, #12]
 8002106:	4413      	add	r3, r2
 8002108:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800210a:	bf00      	nop
 800210c:	f7ff ffde 	bl	80020cc <HAL_GetTick>
 8002110:	4602      	mov	r2, r0
 8002112:	68bb      	ldr	r3, [r7, #8]
 8002114:	1ad3      	subs	r3, r2, r3
 8002116:	68fa      	ldr	r2, [r7, #12]
 8002118:	429a      	cmp	r2, r3
 800211a:	d8f7      	bhi.n	800210c <HAL_Delay+0x28>
  {
  }
}
 800211c:	bf00      	nop
 800211e:	bf00      	nop
 8002120:	3710      	adds	r7, #16
 8002122:	46bd      	mov	sp, r7
 8002124:	bd80      	pop	{r7, pc}
 8002126:	bf00      	nop
 8002128:	2000000c 	.word	0x2000000c

0800212c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800212c:	b480      	push	{r7}
 800212e:	b085      	sub	sp, #20
 8002130:	af00      	add	r7, sp, #0
 8002132:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	f003 0307 	and.w	r3, r3, #7
 800213a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800213c:	4b0c      	ldr	r3, [pc, #48]	; (8002170 <__NVIC_SetPriorityGrouping+0x44>)
 800213e:	68db      	ldr	r3, [r3, #12]
 8002140:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002142:	68ba      	ldr	r2, [r7, #8]
 8002144:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002148:	4013      	ands	r3, r2
 800214a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800214c:	68fb      	ldr	r3, [r7, #12]
 800214e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002150:	68bb      	ldr	r3, [r7, #8]
 8002152:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002154:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002158:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800215c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800215e:	4a04      	ldr	r2, [pc, #16]	; (8002170 <__NVIC_SetPriorityGrouping+0x44>)
 8002160:	68bb      	ldr	r3, [r7, #8]
 8002162:	60d3      	str	r3, [r2, #12]
}
 8002164:	bf00      	nop
 8002166:	3714      	adds	r7, #20
 8002168:	46bd      	mov	sp, r7
 800216a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800216e:	4770      	bx	lr
 8002170:	e000ed00 	.word	0xe000ed00

08002174 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002174:	b480      	push	{r7}
 8002176:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002178:	4b04      	ldr	r3, [pc, #16]	; (800218c <__NVIC_GetPriorityGrouping+0x18>)
 800217a:	68db      	ldr	r3, [r3, #12]
 800217c:	0a1b      	lsrs	r3, r3, #8
 800217e:	f003 0307 	and.w	r3, r3, #7
}
 8002182:	4618      	mov	r0, r3
 8002184:	46bd      	mov	sp, r7
 8002186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800218a:	4770      	bx	lr
 800218c:	e000ed00 	.word	0xe000ed00

08002190 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002190:	b480      	push	{r7}
 8002192:	b083      	sub	sp, #12
 8002194:	af00      	add	r7, sp, #0
 8002196:	4603      	mov	r3, r0
 8002198:	6039      	str	r1, [r7, #0]
 800219a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800219c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021a0:	2b00      	cmp	r3, #0
 80021a2:	db0a      	blt.n	80021ba <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80021a4:	683b      	ldr	r3, [r7, #0]
 80021a6:	b2da      	uxtb	r2, r3
 80021a8:	490c      	ldr	r1, [pc, #48]	; (80021dc <__NVIC_SetPriority+0x4c>)
 80021aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021ae:	0112      	lsls	r2, r2, #4
 80021b0:	b2d2      	uxtb	r2, r2
 80021b2:	440b      	add	r3, r1
 80021b4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80021b8:	e00a      	b.n	80021d0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80021ba:	683b      	ldr	r3, [r7, #0]
 80021bc:	b2da      	uxtb	r2, r3
 80021be:	4908      	ldr	r1, [pc, #32]	; (80021e0 <__NVIC_SetPriority+0x50>)
 80021c0:	79fb      	ldrb	r3, [r7, #7]
 80021c2:	f003 030f 	and.w	r3, r3, #15
 80021c6:	3b04      	subs	r3, #4
 80021c8:	0112      	lsls	r2, r2, #4
 80021ca:	b2d2      	uxtb	r2, r2
 80021cc:	440b      	add	r3, r1
 80021ce:	761a      	strb	r2, [r3, #24]
}
 80021d0:	bf00      	nop
 80021d2:	370c      	adds	r7, #12
 80021d4:	46bd      	mov	sp, r7
 80021d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021da:	4770      	bx	lr
 80021dc:	e000e100 	.word	0xe000e100
 80021e0:	e000ed00 	.word	0xe000ed00

080021e4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80021e4:	b480      	push	{r7}
 80021e6:	b089      	sub	sp, #36	; 0x24
 80021e8:	af00      	add	r7, sp, #0
 80021ea:	60f8      	str	r0, [r7, #12]
 80021ec:	60b9      	str	r1, [r7, #8]
 80021ee:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80021f0:	68fb      	ldr	r3, [r7, #12]
 80021f2:	f003 0307 	and.w	r3, r3, #7
 80021f6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80021f8:	69fb      	ldr	r3, [r7, #28]
 80021fa:	f1c3 0307 	rsb	r3, r3, #7
 80021fe:	2b04      	cmp	r3, #4
 8002200:	bf28      	it	cs
 8002202:	2304      	movcs	r3, #4
 8002204:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002206:	69fb      	ldr	r3, [r7, #28]
 8002208:	3304      	adds	r3, #4
 800220a:	2b06      	cmp	r3, #6
 800220c:	d902      	bls.n	8002214 <NVIC_EncodePriority+0x30>
 800220e:	69fb      	ldr	r3, [r7, #28]
 8002210:	3b03      	subs	r3, #3
 8002212:	e000      	b.n	8002216 <NVIC_EncodePriority+0x32>
 8002214:	2300      	movs	r3, #0
 8002216:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002218:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800221c:	69bb      	ldr	r3, [r7, #24]
 800221e:	fa02 f303 	lsl.w	r3, r2, r3
 8002222:	43da      	mvns	r2, r3
 8002224:	68bb      	ldr	r3, [r7, #8]
 8002226:	401a      	ands	r2, r3
 8002228:	697b      	ldr	r3, [r7, #20]
 800222a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800222c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002230:	697b      	ldr	r3, [r7, #20]
 8002232:	fa01 f303 	lsl.w	r3, r1, r3
 8002236:	43d9      	mvns	r1, r3
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800223c:	4313      	orrs	r3, r2
         );
}
 800223e:	4618      	mov	r0, r3
 8002240:	3724      	adds	r7, #36	; 0x24
 8002242:	46bd      	mov	sp, r7
 8002244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002248:	4770      	bx	lr
	...

0800224c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800224c:	b580      	push	{r7, lr}
 800224e:	b082      	sub	sp, #8
 8002250:	af00      	add	r7, sp, #0
 8002252:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	3b01      	subs	r3, #1
 8002258:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800225c:	d301      	bcc.n	8002262 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800225e:	2301      	movs	r3, #1
 8002260:	e00f      	b.n	8002282 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002262:	4a0a      	ldr	r2, [pc, #40]	; (800228c <SysTick_Config+0x40>)
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	3b01      	subs	r3, #1
 8002268:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800226a:	210f      	movs	r1, #15
 800226c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002270:	f7ff ff8e 	bl	8002190 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002274:	4b05      	ldr	r3, [pc, #20]	; (800228c <SysTick_Config+0x40>)
 8002276:	2200      	movs	r2, #0
 8002278:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800227a:	4b04      	ldr	r3, [pc, #16]	; (800228c <SysTick_Config+0x40>)
 800227c:	2207      	movs	r2, #7
 800227e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002280:	2300      	movs	r3, #0
}
 8002282:	4618      	mov	r0, r3
 8002284:	3708      	adds	r7, #8
 8002286:	46bd      	mov	sp, r7
 8002288:	bd80      	pop	{r7, pc}
 800228a:	bf00      	nop
 800228c:	e000e010 	.word	0xe000e010

08002290 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002290:	b580      	push	{r7, lr}
 8002292:	b082      	sub	sp, #8
 8002294:	af00      	add	r7, sp, #0
 8002296:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002298:	6878      	ldr	r0, [r7, #4]
 800229a:	f7ff ff47 	bl	800212c <__NVIC_SetPriorityGrouping>
}
 800229e:	bf00      	nop
 80022a0:	3708      	adds	r7, #8
 80022a2:	46bd      	mov	sp, r7
 80022a4:	bd80      	pop	{r7, pc}

080022a6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80022a6:	b580      	push	{r7, lr}
 80022a8:	b086      	sub	sp, #24
 80022aa:	af00      	add	r7, sp, #0
 80022ac:	4603      	mov	r3, r0
 80022ae:	60b9      	str	r1, [r7, #8]
 80022b0:	607a      	str	r2, [r7, #4]
 80022b2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80022b4:	2300      	movs	r3, #0
 80022b6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80022b8:	f7ff ff5c 	bl	8002174 <__NVIC_GetPriorityGrouping>
 80022bc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80022be:	687a      	ldr	r2, [r7, #4]
 80022c0:	68b9      	ldr	r1, [r7, #8]
 80022c2:	6978      	ldr	r0, [r7, #20]
 80022c4:	f7ff ff8e 	bl	80021e4 <NVIC_EncodePriority>
 80022c8:	4602      	mov	r2, r0
 80022ca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80022ce:	4611      	mov	r1, r2
 80022d0:	4618      	mov	r0, r3
 80022d2:	f7ff ff5d 	bl	8002190 <__NVIC_SetPriority>
}
 80022d6:	bf00      	nop
 80022d8:	3718      	adds	r7, #24
 80022da:	46bd      	mov	sp, r7
 80022dc:	bd80      	pop	{r7, pc}

080022de <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80022de:	b580      	push	{r7, lr}
 80022e0:	b082      	sub	sp, #8
 80022e2:	af00      	add	r7, sp, #0
 80022e4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80022e6:	6878      	ldr	r0, [r7, #4]
 80022e8:	f7ff ffb0 	bl	800224c <SysTick_Config>
 80022ec:	4603      	mov	r3, r0
}
 80022ee:	4618      	mov	r0, r3
 80022f0:	3708      	adds	r7, #8
 80022f2:	46bd      	mov	sp, r7
 80022f4:	bd80      	pop	{r7, pc}
	...

080022f8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80022f8:	b480      	push	{r7}
 80022fa:	b089      	sub	sp, #36	; 0x24
 80022fc:	af00      	add	r7, sp, #0
 80022fe:	6078      	str	r0, [r7, #4]
 8002300:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002302:	2300      	movs	r3, #0
 8002304:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002306:	2300      	movs	r3, #0
 8002308:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800230a:	2300      	movs	r3, #0
 800230c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800230e:	2300      	movs	r3, #0
 8002310:	61fb      	str	r3, [r7, #28]
 8002312:	e177      	b.n	8002604 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002314:	2201      	movs	r2, #1
 8002316:	69fb      	ldr	r3, [r7, #28]
 8002318:	fa02 f303 	lsl.w	r3, r2, r3
 800231c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800231e:	683b      	ldr	r3, [r7, #0]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	697a      	ldr	r2, [r7, #20]
 8002324:	4013      	ands	r3, r2
 8002326:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002328:	693a      	ldr	r2, [r7, #16]
 800232a:	697b      	ldr	r3, [r7, #20]
 800232c:	429a      	cmp	r2, r3
 800232e:	f040 8166 	bne.w	80025fe <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002332:	683b      	ldr	r3, [r7, #0]
 8002334:	685b      	ldr	r3, [r3, #4]
 8002336:	f003 0303 	and.w	r3, r3, #3
 800233a:	2b01      	cmp	r3, #1
 800233c:	d005      	beq.n	800234a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800233e:	683b      	ldr	r3, [r7, #0]
 8002340:	685b      	ldr	r3, [r3, #4]
 8002342:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002346:	2b02      	cmp	r3, #2
 8002348:	d130      	bne.n	80023ac <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	689b      	ldr	r3, [r3, #8]
 800234e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002350:	69fb      	ldr	r3, [r7, #28]
 8002352:	005b      	lsls	r3, r3, #1
 8002354:	2203      	movs	r2, #3
 8002356:	fa02 f303 	lsl.w	r3, r2, r3
 800235a:	43db      	mvns	r3, r3
 800235c:	69ba      	ldr	r2, [r7, #24]
 800235e:	4013      	ands	r3, r2
 8002360:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002362:	683b      	ldr	r3, [r7, #0]
 8002364:	68da      	ldr	r2, [r3, #12]
 8002366:	69fb      	ldr	r3, [r7, #28]
 8002368:	005b      	lsls	r3, r3, #1
 800236a:	fa02 f303 	lsl.w	r3, r2, r3
 800236e:	69ba      	ldr	r2, [r7, #24]
 8002370:	4313      	orrs	r3, r2
 8002372:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	69ba      	ldr	r2, [r7, #24]
 8002378:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	685b      	ldr	r3, [r3, #4]
 800237e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002380:	2201      	movs	r2, #1
 8002382:	69fb      	ldr	r3, [r7, #28]
 8002384:	fa02 f303 	lsl.w	r3, r2, r3
 8002388:	43db      	mvns	r3, r3
 800238a:	69ba      	ldr	r2, [r7, #24]
 800238c:	4013      	ands	r3, r2
 800238e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002390:	683b      	ldr	r3, [r7, #0]
 8002392:	685b      	ldr	r3, [r3, #4]
 8002394:	091b      	lsrs	r3, r3, #4
 8002396:	f003 0201 	and.w	r2, r3, #1
 800239a:	69fb      	ldr	r3, [r7, #28]
 800239c:	fa02 f303 	lsl.w	r3, r2, r3
 80023a0:	69ba      	ldr	r2, [r7, #24]
 80023a2:	4313      	orrs	r3, r2
 80023a4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	69ba      	ldr	r2, [r7, #24]
 80023aa:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80023ac:	683b      	ldr	r3, [r7, #0]
 80023ae:	685b      	ldr	r3, [r3, #4]
 80023b0:	f003 0303 	and.w	r3, r3, #3
 80023b4:	2b03      	cmp	r3, #3
 80023b6:	d017      	beq.n	80023e8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	68db      	ldr	r3, [r3, #12]
 80023bc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80023be:	69fb      	ldr	r3, [r7, #28]
 80023c0:	005b      	lsls	r3, r3, #1
 80023c2:	2203      	movs	r2, #3
 80023c4:	fa02 f303 	lsl.w	r3, r2, r3
 80023c8:	43db      	mvns	r3, r3
 80023ca:	69ba      	ldr	r2, [r7, #24]
 80023cc:	4013      	ands	r3, r2
 80023ce:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80023d0:	683b      	ldr	r3, [r7, #0]
 80023d2:	689a      	ldr	r2, [r3, #8]
 80023d4:	69fb      	ldr	r3, [r7, #28]
 80023d6:	005b      	lsls	r3, r3, #1
 80023d8:	fa02 f303 	lsl.w	r3, r2, r3
 80023dc:	69ba      	ldr	r2, [r7, #24]
 80023de:	4313      	orrs	r3, r2
 80023e0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	69ba      	ldr	r2, [r7, #24]
 80023e6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80023e8:	683b      	ldr	r3, [r7, #0]
 80023ea:	685b      	ldr	r3, [r3, #4]
 80023ec:	f003 0303 	and.w	r3, r3, #3
 80023f0:	2b02      	cmp	r3, #2
 80023f2:	d123      	bne.n	800243c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80023f4:	69fb      	ldr	r3, [r7, #28]
 80023f6:	08da      	lsrs	r2, r3, #3
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	3208      	adds	r2, #8
 80023fc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002400:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002402:	69fb      	ldr	r3, [r7, #28]
 8002404:	f003 0307 	and.w	r3, r3, #7
 8002408:	009b      	lsls	r3, r3, #2
 800240a:	220f      	movs	r2, #15
 800240c:	fa02 f303 	lsl.w	r3, r2, r3
 8002410:	43db      	mvns	r3, r3
 8002412:	69ba      	ldr	r2, [r7, #24]
 8002414:	4013      	ands	r3, r2
 8002416:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002418:	683b      	ldr	r3, [r7, #0]
 800241a:	691a      	ldr	r2, [r3, #16]
 800241c:	69fb      	ldr	r3, [r7, #28]
 800241e:	f003 0307 	and.w	r3, r3, #7
 8002422:	009b      	lsls	r3, r3, #2
 8002424:	fa02 f303 	lsl.w	r3, r2, r3
 8002428:	69ba      	ldr	r2, [r7, #24]
 800242a:	4313      	orrs	r3, r2
 800242c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800242e:	69fb      	ldr	r3, [r7, #28]
 8002430:	08da      	lsrs	r2, r3, #3
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	3208      	adds	r2, #8
 8002436:	69b9      	ldr	r1, [r7, #24]
 8002438:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002442:	69fb      	ldr	r3, [r7, #28]
 8002444:	005b      	lsls	r3, r3, #1
 8002446:	2203      	movs	r2, #3
 8002448:	fa02 f303 	lsl.w	r3, r2, r3
 800244c:	43db      	mvns	r3, r3
 800244e:	69ba      	ldr	r2, [r7, #24]
 8002450:	4013      	ands	r3, r2
 8002452:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002454:	683b      	ldr	r3, [r7, #0]
 8002456:	685b      	ldr	r3, [r3, #4]
 8002458:	f003 0203 	and.w	r2, r3, #3
 800245c:	69fb      	ldr	r3, [r7, #28]
 800245e:	005b      	lsls	r3, r3, #1
 8002460:	fa02 f303 	lsl.w	r3, r2, r3
 8002464:	69ba      	ldr	r2, [r7, #24]
 8002466:	4313      	orrs	r3, r2
 8002468:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	69ba      	ldr	r2, [r7, #24]
 800246e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002470:	683b      	ldr	r3, [r7, #0]
 8002472:	685b      	ldr	r3, [r3, #4]
 8002474:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002478:	2b00      	cmp	r3, #0
 800247a:	f000 80c0 	beq.w	80025fe <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800247e:	2300      	movs	r3, #0
 8002480:	60fb      	str	r3, [r7, #12]
 8002482:	4b66      	ldr	r3, [pc, #408]	; (800261c <HAL_GPIO_Init+0x324>)
 8002484:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002486:	4a65      	ldr	r2, [pc, #404]	; (800261c <HAL_GPIO_Init+0x324>)
 8002488:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800248c:	6453      	str	r3, [r2, #68]	; 0x44
 800248e:	4b63      	ldr	r3, [pc, #396]	; (800261c <HAL_GPIO_Init+0x324>)
 8002490:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002492:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002496:	60fb      	str	r3, [r7, #12]
 8002498:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800249a:	4a61      	ldr	r2, [pc, #388]	; (8002620 <HAL_GPIO_Init+0x328>)
 800249c:	69fb      	ldr	r3, [r7, #28]
 800249e:	089b      	lsrs	r3, r3, #2
 80024a0:	3302      	adds	r3, #2
 80024a2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80024a6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80024a8:	69fb      	ldr	r3, [r7, #28]
 80024aa:	f003 0303 	and.w	r3, r3, #3
 80024ae:	009b      	lsls	r3, r3, #2
 80024b0:	220f      	movs	r2, #15
 80024b2:	fa02 f303 	lsl.w	r3, r2, r3
 80024b6:	43db      	mvns	r3, r3
 80024b8:	69ba      	ldr	r2, [r7, #24]
 80024ba:	4013      	ands	r3, r2
 80024bc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	4a58      	ldr	r2, [pc, #352]	; (8002624 <HAL_GPIO_Init+0x32c>)
 80024c2:	4293      	cmp	r3, r2
 80024c4:	d037      	beq.n	8002536 <HAL_GPIO_Init+0x23e>
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	4a57      	ldr	r2, [pc, #348]	; (8002628 <HAL_GPIO_Init+0x330>)
 80024ca:	4293      	cmp	r3, r2
 80024cc:	d031      	beq.n	8002532 <HAL_GPIO_Init+0x23a>
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	4a56      	ldr	r2, [pc, #344]	; (800262c <HAL_GPIO_Init+0x334>)
 80024d2:	4293      	cmp	r3, r2
 80024d4:	d02b      	beq.n	800252e <HAL_GPIO_Init+0x236>
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	4a55      	ldr	r2, [pc, #340]	; (8002630 <HAL_GPIO_Init+0x338>)
 80024da:	4293      	cmp	r3, r2
 80024dc:	d025      	beq.n	800252a <HAL_GPIO_Init+0x232>
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	4a54      	ldr	r2, [pc, #336]	; (8002634 <HAL_GPIO_Init+0x33c>)
 80024e2:	4293      	cmp	r3, r2
 80024e4:	d01f      	beq.n	8002526 <HAL_GPIO_Init+0x22e>
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	4a53      	ldr	r2, [pc, #332]	; (8002638 <HAL_GPIO_Init+0x340>)
 80024ea:	4293      	cmp	r3, r2
 80024ec:	d019      	beq.n	8002522 <HAL_GPIO_Init+0x22a>
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	4a52      	ldr	r2, [pc, #328]	; (800263c <HAL_GPIO_Init+0x344>)
 80024f2:	4293      	cmp	r3, r2
 80024f4:	d013      	beq.n	800251e <HAL_GPIO_Init+0x226>
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	4a51      	ldr	r2, [pc, #324]	; (8002640 <HAL_GPIO_Init+0x348>)
 80024fa:	4293      	cmp	r3, r2
 80024fc:	d00d      	beq.n	800251a <HAL_GPIO_Init+0x222>
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	4a50      	ldr	r2, [pc, #320]	; (8002644 <HAL_GPIO_Init+0x34c>)
 8002502:	4293      	cmp	r3, r2
 8002504:	d007      	beq.n	8002516 <HAL_GPIO_Init+0x21e>
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	4a4f      	ldr	r2, [pc, #316]	; (8002648 <HAL_GPIO_Init+0x350>)
 800250a:	4293      	cmp	r3, r2
 800250c:	d101      	bne.n	8002512 <HAL_GPIO_Init+0x21a>
 800250e:	2309      	movs	r3, #9
 8002510:	e012      	b.n	8002538 <HAL_GPIO_Init+0x240>
 8002512:	230a      	movs	r3, #10
 8002514:	e010      	b.n	8002538 <HAL_GPIO_Init+0x240>
 8002516:	2308      	movs	r3, #8
 8002518:	e00e      	b.n	8002538 <HAL_GPIO_Init+0x240>
 800251a:	2307      	movs	r3, #7
 800251c:	e00c      	b.n	8002538 <HAL_GPIO_Init+0x240>
 800251e:	2306      	movs	r3, #6
 8002520:	e00a      	b.n	8002538 <HAL_GPIO_Init+0x240>
 8002522:	2305      	movs	r3, #5
 8002524:	e008      	b.n	8002538 <HAL_GPIO_Init+0x240>
 8002526:	2304      	movs	r3, #4
 8002528:	e006      	b.n	8002538 <HAL_GPIO_Init+0x240>
 800252a:	2303      	movs	r3, #3
 800252c:	e004      	b.n	8002538 <HAL_GPIO_Init+0x240>
 800252e:	2302      	movs	r3, #2
 8002530:	e002      	b.n	8002538 <HAL_GPIO_Init+0x240>
 8002532:	2301      	movs	r3, #1
 8002534:	e000      	b.n	8002538 <HAL_GPIO_Init+0x240>
 8002536:	2300      	movs	r3, #0
 8002538:	69fa      	ldr	r2, [r7, #28]
 800253a:	f002 0203 	and.w	r2, r2, #3
 800253e:	0092      	lsls	r2, r2, #2
 8002540:	4093      	lsls	r3, r2
 8002542:	69ba      	ldr	r2, [r7, #24]
 8002544:	4313      	orrs	r3, r2
 8002546:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002548:	4935      	ldr	r1, [pc, #212]	; (8002620 <HAL_GPIO_Init+0x328>)
 800254a:	69fb      	ldr	r3, [r7, #28]
 800254c:	089b      	lsrs	r3, r3, #2
 800254e:	3302      	adds	r3, #2
 8002550:	69ba      	ldr	r2, [r7, #24]
 8002552:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002556:	4b3d      	ldr	r3, [pc, #244]	; (800264c <HAL_GPIO_Init+0x354>)
 8002558:	689b      	ldr	r3, [r3, #8]
 800255a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800255c:	693b      	ldr	r3, [r7, #16]
 800255e:	43db      	mvns	r3, r3
 8002560:	69ba      	ldr	r2, [r7, #24]
 8002562:	4013      	ands	r3, r2
 8002564:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002566:	683b      	ldr	r3, [r7, #0]
 8002568:	685b      	ldr	r3, [r3, #4]
 800256a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800256e:	2b00      	cmp	r3, #0
 8002570:	d003      	beq.n	800257a <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8002572:	69ba      	ldr	r2, [r7, #24]
 8002574:	693b      	ldr	r3, [r7, #16]
 8002576:	4313      	orrs	r3, r2
 8002578:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800257a:	4a34      	ldr	r2, [pc, #208]	; (800264c <HAL_GPIO_Init+0x354>)
 800257c:	69bb      	ldr	r3, [r7, #24]
 800257e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002580:	4b32      	ldr	r3, [pc, #200]	; (800264c <HAL_GPIO_Init+0x354>)
 8002582:	68db      	ldr	r3, [r3, #12]
 8002584:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002586:	693b      	ldr	r3, [r7, #16]
 8002588:	43db      	mvns	r3, r3
 800258a:	69ba      	ldr	r2, [r7, #24]
 800258c:	4013      	ands	r3, r2
 800258e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002590:	683b      	ldr	r3, [r7, #0]
 8002592:	685b      	ldr	r3, [r3, #4]
 8002594:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002598:	2b00      	cmp	r3, #0
 800259a:	d003      	beq.n	80025a4 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 800259c:	69ba      	ldr	r2, [r7, #24]
 800259e:	693b      	ldr	r3, [r7, #16]
 80025a0:	4313      	orrs	r3, r2
 80025a2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80025a4:	4a29      	ldr	r2, [pc, #164]	; (800264c <HAL_GPIO_Init+0x354>)
 80025a6:	69bb      	ldr	r3, [r7, #24]
 80025a8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80025aa:	4b28      	ldr	r3, [pc, #160]	; (800264c <HAL_GPIO_Init+0x354>)
 80025ac:	685b      	ldr	r3, [r3, #4]
 80025ae:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80025b0:	693b      	ldr	r3, [r7, #16]
 80025b2:	43db      	mvns	r3, r3
 80025b4:	69ba      	ldr	r2, [r7, #24]
 80025b6:	4013      	ands	r3, r2
 80025b8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80025ba:	683b      	ldr	r3, [r7, #0]
 80025bc:	685b      	ldr	r3, [r3, #4]
 80025be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	d003      	beq.n	80025ce <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80025c6:	69ba      	ldr	r2, [r7, #24]
 80025c8:	693b      	ldr	r3, [r7, #16]
 80025ca:	4313      	orrs	r3, r2
 80025cc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80025ce:	4a1f      	ldr	r2, [pc, #124]	; (800264c <HAL_GPIO_Init+0x354>)
 80025d0:	69bb      	ldr	r3, [r7, #24]
 80025d2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80025d4:	4b1d      	ldr	r3, [pc, #116]	; (800264c <HAL_GPIO_Init+0x354>)
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80025da:	693b      	ldr	r3, [r7, #16]
 80025dc:	43db      	mvns	r3, r3
 80025de:	69ba      	ldr	r2, [r7, #24]
 80025e0:	4013      	ands	r3, r2
 80025e2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80025e4:	683b      	ldr	r3, [r7, #0]
 80025e6:	685b      	ldr	r3, [r3, #4]
 80025e8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	d003      	beq.n	80025f8 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80025f0:	69ba      	ldr	r2, [r7, #24]
 80025f2:	693b      	ldr	r3, [r7, #16]
 80025f4:	4313      	orrs	r3, r2
 80025f6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80025f8:	4a14      	ldr	r2, [pc, #80]	; (800264c <HAL_GPIO_Init+0x354>)
 80025fa:	69bb      	ldr	r3, [r7, #24]
 80025fc:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80025fe:	69fb      	ldr	r3, [r7, #28]
 8002600:	3301      	adds	r3, #1
 8002602:	61fb      	str	r3, [r7, #28]
 8002604:	69fb      	ldr	r3, [r7, #28]
 8002606:	2b0f      	cmp	r3, #15
 8002608:	f67f ae84 	bls.w	8002314 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800260c:	bf00      	nop
 800260e:	bf00      	nop
 8002610:	3724      	adds	r7, #36	; 0x24
 8002612:	46bd      	mov	sp, r7
 8002614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002618:	4770      	bx	lr
 800261a:	bf00      	nop
 800261c:	40023800 	.word	0x40023800
 8002620:	40013800 	.word	0x40013800
 8002624:	40020000 	.word	0x40020000
 8002628:	40020400 	.word	0x40020400
 800262c:	40020800 	.word	0x40020800
 8002630:	40020c00 	.word	0x40020c00
 8002634:	40021000 	.word	0x40021000
 8002638:	40021400 	.word	0x40021400
 800263c:	40021800 	.word	0x40021800
 8002640:	40021c00 	.word	0x40021c00
 8002644:	40022000 	.word	0x40022000
 8002648:	40022400 	.word	0x40022400
 800264c:	40013c00 	.word	0x40013c00

08002650 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002650:	b480      	push	{r7}
 8002652:	b083      	sub	sp, #12
 8002654:	af00      	add	r7, sp, #0
 8002656:	6078      	str	r0, [r7, #4]
 8002658:	460b      	mov	r3, r1
 800265a:	807b      	strh	r3, [r7, #2]
 800265c:	4613      	mov	r3, r2
 800265e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002660:	787b      	ldrb	r3, [r7, #1]
 8002662:	2b00      	cmp	r3, #0
 8002664:	d003      	beq.n	800266e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002666:	887a      	ldrh	r2, [r7, #2]
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800266c:	e003      	b.n	8002676 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800266e:	887b      	ldrh	r3, [r7, #2]
 8002670:	041a      	lsls	r2, r3, #16
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	619a      	str	r2, [r3, #24]
}
 8002676:	bf00      	nop
 8002678:	370c      	adds	r7, #12
 800267a:	46bd      	mov	sp, r7
 800267c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002680:	4770      	bx	lr
	...

08002684 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002684:	b580      	push	{r7, lr}
 8002686:	b084      	sub	sp, #16
 8002688:	af00      	add	r7, sp, #0
 800268a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	2b00      	cmp	r3, #0
 8002690:	d101      	bne.n	8002696 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002692:	2301      	movs	r3, #1
 8002694:	e12b      	b.n	80028ee <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800269c:	b2db      	uxtb	r3, r3
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d106      	bne.n	80026b0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	2200      	movs	r2, #0
 80026a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80026aa:	6878      	ldr	r0, [r7, #4]
 80026ac:	f7ff faa4 	bl	8001bf8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	2224      	movs	r2, #36	; 0x24
 80026b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	681a      	ldr	r2, [r3, #0]
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	f022 0201 	bic.w	r2, r2, #1
 80026c6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	681a      	ldr	r2, [r3, #0]
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80026d6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	681a      	ldr	r2, [r3, #0]
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80026e6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80026e8:	f001 f8c2 	bl	8003870 <HAL_RCC_GetPCLK1Freq>
 80026ec:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	685b      	ldr	r3, [r3, #4]
 80026f2:	4a81      	ldr	r2, [pc, #516]	; (80028f8 <HAL_I2C_Init+0x274>)
 80026f4:	4293      	cmp	r3, r2
 80026f6:	d807      	bhi.n	8002708 <HAL_I2C_Init+0x84>
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	4a80      	ldr	r2, [pc, #512]	; (80028fc <HAL_I2C_Init+0x278>)
 80026fc:	4293      	cmp	r3, r2
 80026fe:	bf94      	ite	ls
 8002700:	2301      	movls	r3, #1
 8002702:	2300      	movhi	r3, #0
 8002704:	b2db      	uxtb	r3, r3
 8002706:	e006      	b.n	8002716 <HAL_I2C_Init+0x92>
 8002708:	68fb      	ldr	r3, [r7, #12]
 800270a:	4a7d      	ldr	r2, [pc, #500]	; (8002900 <HAL_I2C_Init+0x27c>)
 800270c:	4293      	cmp	r3, r2
 800270e:	bf94      	ite	ls
 8002710:	2301      	movls	r3, #1
 8002712:	2300      	movhi	r3, #0
 8002714:	b2db      	uxtb	r3, r3
 8002716:	2b00      	cmp	r3, #0
 8002718:	d001      	beq.n	800271e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800271a:	2301      	movs	r3, #1
 800271c:	e0e7      	b.n	80028ee <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800271e:	68fb      	ldr	r3, [r7, #12]
 8002720:	4a78      	ldr	r2, [pc, #480]	; (8002904 <HAL_I2C_Init+0x280>)
 8002722:	fba2 2303 	umull	r2, r3, r2, r3
 8002726:	0c9b      	lsrs	r3, r3, #18
 8002728:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	685b      	ldr	r3, [r3, #4]
 8002730:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	68ba      	ldr	r2, [r7, #8]
 800273a:	430a      	orrs	r2, r1
 800273c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	6a1b      	ldr	r3, [r3, #32]
 8002744:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	685b      	ldr	r3, [r3, #4]
 800274c:	4a6a      	ldr	r2, [pc, #424]	; (80028f8 <HAL_I2C_Init+0x274>)
 800274e:	4293      	cmp	r3, r2
 8002750:	d802      	bhi.n	8002758 <HAL_I2C_Init+0xd4>
 8002752:	68bb      	ldr	r3, [r7, #8]
 8002754:	3301      	adds	r3, #1
 8002756:	e009      	b.n	800276c <HAL_I2C_Init+0xe8>
 8002758:	68bb      	ldr	r3, [r7, #8]
 800275a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800275e:	fb02 f303 	mul.w	r3, r2, r3
 8002762:	4a69      	ldr	r2, [pc, #420]	; (8002908 <HAL_I2C_Init+0x284>)
 8002764:	fba2 2303 	umull	r2, r3, r2, r3
 8002768:	099b      	lsrs	r3, r3, #6
 800276a:	3301      	adds	r3, #1
 800276c:	687a      	ldr	r2, [r7, #4]
 800276e:	6812      	ldr	r2, [r2, #0]
 8002770:	430b      	orrs	r3, r1
 8002772:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	69db      	ldr	r3, [r3, #28]
 800277a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800277e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	685b      	ldr	r3, [r3, #4]
 8002786:	495c      	ldr	r1, [pc, #368]	; (80028f8 <HAL_I2C_Init+0x274>)
 8002788:	428b      	cmp	r3, r1
 800278a:	d819      	bhi.n	80027c0 <HAL_I2C_Init+0x13c>
 800278c:	68fb      	ldr	r3, [r7, #12]
 800278e:	1e59      	subs	r1, r3, #1
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	685b      	ldr	r3, [r3, #4]
 8002794:	005b      	lsls	r3, r3, #1
 8002796:	fbb1 f3f3 	udiv	r3, r1, r3
 800279a:	1c59      	adds	r1, r3, #1
 800279c:	f640 73fc 	movw	r3, #4092	; 0xffc
 80027a0:	400b      	ands	r3, r1
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d00a      	beq.n	80027bc <HAL_I2C_Init+0x138>
 80027a6:	68fb      	ldr	r3, [r7, #12]
 80027a8:	1e59      	subs	r1, r3, #1
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	685b      	ldr	r3, [r3, #4]
 80027ae:	005b      	lsls	r3, r3, #1
 80027b0:	fbb1 f3f3 	udiv	r3, r1, r3
 80027b4:	3301      	adds	r3, #1
 80027b6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80027ba:	e051      	b.n	8002860 <HAL_I2C_Init+0x1dc>
 80027bc:	2304      	movs	r3, #4
 80027be:	e04f      	b.n	8002860 <HAL_I2C_Init+0x1dc>
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	689b      	ldr	r3, [r3, #8]
 80027c4:	2b00      	cmp	r3, #0
 80027c6:	d111      	bne.n	80027ec <HAL_I2C_Init+0x168>
 80027c8:	68fb      	ldr	r3, [r7, #12]
 80027ca:	1e58      	subs	r0, r3, #1
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	6859      	ldr	r1, [r3, #4]
 80027d0:	460b      	mov	r3, r1
 80027d2:	005b      	lsls	r3, r3, #1
 80027d4:	440b      	add	r3, r1
 80027d6:	fbb0 f3f3 	udiv	r3, r0, r3
 80027da:	3301      	adds	r3, #1
 80027dc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	bf0c      	ite	eq
 80027e4:	2301      	moveq	r3, #1
 80027e6:	2300      	movne	r3, #0
 80027e8:	b2db      	uxtb	r3, r3
 80027ea:	e012      	b.n	8002812 <HAL_I2C_Init+0x18e>
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	1e58      	subs	r0, r3, #1
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	6859      	ldr	r1, [r3, #4]
 80027f4:	460b      	mov	r3, r1
 80027f6:	009b      	lsls	r3, r3, #2
 80027f8:	440b      	add	r3, r1
 80027fa:	0099      	lsls	r1, r3, #2
 80027fc:	440b      	add	r3, r1
 80027fe:	fbb0 f3f3 	udiv	r3, r0, r3
 8002802:	3301      	adds	r3, #1
 8002804:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002808:	2b00      	cmp	r3, #0
 800280a:	bf0c      	ite	eq
 800280c:	2301      	moveq	r3, #1
 800280e:	2300      	movne	r3, #0
 8002810:	b2db      	uxtb	r3, r3
 8002812:	2b00      	cmp	r3, #0
 8002814:	d001      	beq.n	800281a <HAL_I2C_Init+0x196>
 8002816:	2301      	movs	r3, #1
 8002818:	e022      	b.n	8002860 <HAL_I2C_Init+0x1dc>
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	689b      	ldr	r3, [r3, #8]
 800281e:	2b00      	cmp	r3, #0
 8002820:	d10e      	bne.n	8002840 <HAL_I2C_Init+0x1bc>
 8002822:	68fb      	ldr	r3, [r7, #12]
 8002824:	1e58      	subs	r0, r3, #1
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	6859      	ldr	r1, [r3, #4]
 800282a:	460b      	mov	r3, r1
 800282c:	005b      	lsls	r3, r3, #1
 800282e:	440b      	add	r3, r1
 8002830:	fbb0 f3f3 	udiv	r3, r0, r3
 8002834:	3301      	adds	r3, #1
 8002836:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800283a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800283e:	e00f      	b.n	8002860 <HAL_I2C_Init+0x1dc>
 8002840:	68fb      	ldr	r3, [r7, #12]
 8002842:	1e58      	subs	r0, r3, #1
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	6859      	ldr	r1, [r3, #4]
 8002848:	460b      	mov	r3, r1
 800284a:	009b      	lsls	r3, r3, #2
 800284c:	440b      	add	r3, r1
 800284e:	0099      	lsls	r1, r3, #2
 8002850:	440b      	add	r3, r1
 8002852:	fbb0 f3f3 	udiv	r3, r0, r3
 8002856:	3301      	adds	r3, #1
 8002858:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800285c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002860:	6879      	ldr	r1, [r7, #4]
 8002862:	6809      	ldr	r1, [r1, #0]
 8002864:	4313      	orrs	r3, r2
 8002866:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	69da      	ldr	r2, [r3, #28]
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	6a1b      	ldr	r3, [r3, #32]
 800287a:	431a      	orrs	r2, r3
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	430a      	orrs	r2, r1
 8002882:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	689b      	ldr	r3, [r3, #8]
 800288a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800288e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002892:	687a      	ldr	r2, [r7, #4]
 8002894:	6911      	ldr	r1, [r2, #16]
 8002896:	687a      	ldr	r2, [r7, #4]
 8002898:	68d2      	ldr	r2, [r2, #12]
 800289a:	4311      	orrs	r1, r2
 800289c:	687a      	ldr	r2, [r7, #4]
 800289e:	6812      	ldr	r2, [r2, #0]
 80028a0:	430b      	orrs	r3, r1
 80028a2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	68db      	ldr	r3, [r3, #12]
 80028aa:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	695a      	ldr	r2, [r3, #20]
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	699b      	ldr	r3, [r3, #24]
 80028b6:	431a      	orrs	r2, r3
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	430a      	orrs	r2, r1
 80028be:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	681a      	ldr	r2, [r3, #0]
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	f042 0201 	orr.w	r2, r2, #1
 80028ce:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	2200      	movs	r2, #0
 80028d4:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	2220      	movs	r2, #32
 80028da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	2200      	movs	r2, #0
 80028e2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	2200      	movs	r2, #0
 80028e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80028ec:	2300      	movs	r3, #0
}
 80028ee:	4618      	mov	r0, r3
 80028f0:	3710      	adds	r7, #16
 80028f2:	46bd      	mov	sp, r7
 80028f4:	bd80      	pop	{r7, pc}
 80028f6:	bf00      	nop
 80028f8:	000186a0 	.word	0x000186a0
 80028fc:	001e847f 	.word	0x001e847f
 8002900:	003d08ff 	.word	0x003d08ff
 8002904:	431bde83 	.word	0x431bde83
 8002908:	10624dd3 	.word	0x10624dd3

0800290c <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800290c:	b580      	push	{r7, lr}
 800290e:	b088      	sub	sp, #32
 8002910:	af02      	add	r7, sp, #8
 8002912:	60f8      	str	r0, [r7, #12]
 8002914:	607a      	str	r2, [r7, #4]
 8002916:	461a      	mov	r2, r3
 8002918:	460b      	mov	r3, r1
 800291a:	817b      	strh	r3, [r7, #10]
 800291c:	4613      	mov	r3, r2
 800291e:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002920:	f7ff fbd4 	bl	80020cc <HAL_GetTick>
 8002924:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002926:	68fb      	ldr	r3, [r7, #12]
 8002928:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800292c:	b2db      	uxtb	r3, r3
 800292e:	2b20      	cmp	r3, #32
 8002930:	f040 80e0 	bne.w	8002af4 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002934:	697b      	ldr	r3, [r7, #20]
 8002936:	9300      	str	r3, [sp, #0]
 8002938:	2319      	movs	r3, #25
 800293a:	2201      	movs	r2, #1
 800293c:	4970      	ldr	r1, [pc, #448]	; (8002b00 <HAL_I2C_Master_Transmit+0x1f4>)
 800293e:	68f8      	ldr	r0, [r7, #12]
 8002940:	f000 f964 	bl	8002c0c <I2C_WaitOnFlagUntilTimeout>
 8002944:	4603      	mov	r3, r0
 8002946:	2b00      	cmp	r3, #0
 8002948:	d001      	beq.n	800294e <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800294a:	2302      	movs	r3, #2
 800294c:	e0d3      	b.n	8002af6 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800294e:	68fb      	ldr	r3, [r7, #12]
 8002950:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002954:	2b01      	cmp	r3, #1
 8002956:	d101      	bne.n	800295c <HAL_I2C_Master_Transmit+0x50>
 8002958:	2302      	movs	r3, #2
 800295a:	e0cc      	b.n	8002af6 <HAL_I2C_Master_Transmit+0x1ea>
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	2201      	movs	r2, #1
 8002960:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	f003 0301 	and.w	r3, r3, #1
 800296e:	2b01      	cmp	r3, #1
 8002970:	d007      	beq.n	8002982 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002972:	68fb      	ldr	r3, [r7, #12]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	681a      	ldr	r2, [r3, #0]
 8002978:	68fb      	ldr	r3, [r7, #12]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	f042 0201 	orr.w	r2, r2, #1
 8002980:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002982:	68fb      	ldr	r3, [r7, #12]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	681a      	ldr	r2, [r3, #0]
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002990:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8002992:	68fb      	ldr	r3, [r7, #12]
 8002994:	2221      	movs	r2, #33	; 0x21
 8002996:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800299a:	68fb      	ldr	r3, [r7, #12]
 800299c:	2210      	movs	r2, #16
 800299e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80029a2:	68fb      	ldr	r3, [r7, #12]
 80029a4:	2200      	movs	r2, #0
 80029a6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	687a      	ldr	r2, [r7, #4]
 80029ac:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80029ae:	68fb      	ldr	r3, [r7, #12]
 80029b0:	893a      	ldrh	r2, [r7, #8]
 80029b2:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80029b8:	b29a      	uxth	r2, r3
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80029be:	68fb      	ldr	r3, [r7, #12]
 80029c0:	4a50      	ldr	r2, [pc, #320]	; (8002b04 <HAL_I2C_Master_Transmit+0x1f8>)
 80029c2:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80029c4:	8979      	ldrh	r1, [r7, #10]
 80029c6:	697b      	ldr	r3, [r7, #20]
 80029c8:	6a3a      	ldr	r2, [r7, #32]
 80029ca:	68f8      	ldr	r0, [r7, #12]
 80029cc:	f000 f89c 	bl	8002b08 <I2C_MasterRequestWrite>
 80029d0:	4603      	mov	r3, r0
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d001      	beq.n	80029da <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80029d6:	2301      	movs	r3, #1
 80029d8:	e08d      	b.n	8002af6 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80029da:	2300      	movs	r3, #0
 80029dc:	613b      	str	r3, [r7, #16]
 80029de:	68fb      	ldr	r3, [r7, #12]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	695b      	ldr	r3, [r3, #20]
 80029e4:	613b      	str	r3, [r7, #16]
 80029e6:	68fb      	ldr	r3, [r7, #12]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	699b      	ldr	r3, [r3, #24]
 80029ec:	613b      	str	r3, [r7, #16]
 80029ee:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80029f0:	e066      	b.n	8002ac0 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80029f2:	697a      	ldr	r2, [r7, #20]
 80029f4:	6a39      	ldr	r1, [r7, #32]
 80029f6:	68f8      	ldr	r0, [r7, #12]
 80029f8:	f000 f9de 	bl	8002db8 <I2C_WaitOnTXEFlagUntilTimeout>
 80029fc:	4603      	mov	r3, r0
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d00d      	beq.n	8002a1e <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002a02:	68fb      	ldr	r3, [r7, #12]
 8002a04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a06:	2b04      	cmp	r3, #4
 8002a08:	d107      	bne.n	8002a1a <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002a0a:	68fb      	ldr	r3, [r7, #12]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	681a      	ldr	r2, [r3, #0]
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002a18:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002a1a:	2301      	movs	r3, #1
 8002a1c:	e06b      	b.n	8002af6 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a22:	781a      	ldrb	r2, [r3, #0]
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002a2a:	68fb      	ldr	r3, [r7, #12]
 8002a2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a2e:	1c5a      	adds	r2, r3, #1
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a38:	b29b      	uxth	r3, r3
 8002a3a:	3b01      	subs	r3, #1
 8002a3c:	b29a      	uxth	r2, r3
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002a42:	68fb      	ldr	r3, [r7, #12]
 8002a44:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a46:	3b01      	subs	r3, #1
 8002a48:	b29a      	uxth	r2, r3
 8002a4a:	68fb      	ldr	r3, [r7, #12]
 8002a4c:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002a4e:	68fb      	ldr	r3, [r7, #12]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	695b      	ldr	r3, [r3, #20]
 8002a54:	f003 0304 	and.w	r3, r3, #4
 8002a58:	2b04      	cmp	r3, #4
 8002a5a:	d11b      	bne.n	8002a94 <HAL_I2C_Master_Transmit+0x188>
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	d017      	beq.n	8002a94 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a68:	781a      	ldrb	r2, [r3, #0]
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a74:	1c5a      	adds	r2, r3, #1
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a7e:	b29b      	uxth	r3, r3
 8002a80:	3b01      	subs	r3, #1
 8002a82:	b29a      	uxth	r2, r3
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a8c:	3b01      	subs	r3, #1
 8002a8e:	b29a      	uxth	r2, r3
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002a94:	697a      	ldr	r2, [r7, #20]
 8002a96:	6a39      	ldr	r1, [r7, #32]
 8002a98:	68f8      	ldr	r0, [r7, #12]
 8002a9a:	f000 f9ce 	bl	8002e3a <I2C_WaitOnBTFFlagUntilTimeout>
 8002a9e:	4603      	mov	r3, r0
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	d00d      	beq.n	8002ac0 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002aa8:	2b04      	cmp	r3, #4
 8002aaa:	d107      	bne.n	8002abc <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002aac:	68fb      	ldr	r3, [r7, #12]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	681a      	ldr	r2, [r3, #0]
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002aba:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002abc:	2301      	movs	r3, #1
 8002abe:	e01a      	b.n	8002af6 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	d194      	bne.n	80029f2 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	681a      	ldr	r2, [r3, #0]
 8002ace:	68fb      	ldr	r3, [r7, #12]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002ad6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	2220      	movs	r2, #32
 8002adc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	2200      	movs	r2, #0
 8002ae4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	2200      	movs	r2, #0
 8002aec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002af0:	2300      	movs	r3, #0
 8002af2:	e000      	b.n	8002af6 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8002af4:	2302      	movs	r3, #2
  }
}
 8002af6:	4618      	mov	r0, r3
 8002af8:	3718      	adds	r7, #24
 8002afa:	46bd      	mov	sp, r7
 8002afc:	bd80      	pop	{r7, pc}
 8002afe:	bf00      	nop
 8002b00:	00100002 	.word	0x00100002
 8002b04:	ffff0000 	.word	0xffff0000

08002b08 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8002b08:	b580      	push	{r7, lr}
 8002b0a:	b088      	sub	sp, #32
 8002b0c:	af02      	add	r7, sp, #8
 8002b0e:	60f8      	str	r0, [r7, #12]
 8002b10:	607a      	str	r2, [r7, #4]
 8002b12:	603b      	str	r3, [r7, #0]
 8002b14:	460b      	mov	r3, r1
 8002b16:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b1c:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8002b1e:	697b      	ldr	r3, [r7, #20]
 8002b20:	2b08      	cmp	r3, #8
 8002b22:	d006      	beq.n	8002b32 <I2C_MasterRequestWrite+0x2a>
 8002b24:	697b      	ldr	r3, [r7, #20]
 8002b26:	2b01      	cmp	r3, #1
 8002b28:	d003      	beq.n	8002b32 <I2C_MasterRequestWrite+0x2a>
 8002b2a:	697b      	ldr	r3, [r7, #20]
 8002b2c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002b30:	d108      	bne.n	8002b44 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002b32:	68fb      	ldr	r3, [r7, #12]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	681a      	ldr	r2, [r3, #0]
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002b40:	601a      	str	r2, [r3, #0]
 8002b42:	e00b      	b.n	8002b5c <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b48:	2b12      	cmp	r3, #18
 8002b4a:	d107      	bne.n	8002b5c <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	681a      	ldr	r2, [r3, #0]
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002b5a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002b5c:	683b      	ldr	r3, [r7, #0]
 8002b5e:	9300      	str	r3, [sp, #0]
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	2200      	movs	r2, #0
 8002b64:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002b68:	68f8      	ldr	r0, [r7, #12]
 8002b6a:	f000 f84f 	bl	8002c0c <I2C_WaitOnFlagUntilTimeout>
 8002b6e:	4603      	mov	r3, r0
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	d00d      	beq.n	8002b90 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b7e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002b82:	d103      	bne.n	8002b8c <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002b8a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002b8c:	2303      	movs	r3, #3
 8002b8e:	e035      	b.n	8002bfc <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	691b      	ldr	r3, [r3, #16]
 8002b94:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002b98:	d108      	bne.n	8002bac <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002b9a:	897b      	ldrh	r3, [r7, #10]
 8002b9c:	b2db      	uxtb	r3, r3
 8002b9e:	461a      	mov	r2, r3
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002ba8:	611a      	str	r2, [r3, #16]
 8002baa:	e01b      	b.n	8002be4 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002bac:	897b      	ldrh	r3, [r7, #10]
 8002bae:	11db      	asrs	r3, r3, #7
 8002bb0:	b2db      	uxtb	r3, r3
 8002bb2:	f003 0306 	and.w	r3, r3, #6
 8002bb6:	b2db      	uxtb	r3, r3
 8002bb8:	f063 030f 	orn	r3, r3, #15
 8002bbc:	b2da      	uxtb	r2, r3
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002bc4:	683b      	ldr	r3, [r7, #0]
 8002bc6:	687a      	ldr	r2, [r7, #4]
 8002bc8:	490e      	ldr	r1, [pc, #56]	; (8002c04 <I2C_MasterRequestWrite+0xfc>)
 8002bca:	68f8      	ldr	r0, [r7, #12]
 8002bcc:	f000 f875 	bl	8002cba <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002bd0:	4603      	mov	r3, r0
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d001      	beq.n	8002bda <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8002bd6:	2301      	movs	r3, #1
 8002bd8:	e010      	b.n	8002bfc <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8002bda:	897b      	ldrh	r3, [r7, #10]
 8002bdc:	b2da      	uxtb	r2, r3
 8002bde:	68fb      	ldr	r3, [r7, #12]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002be4:	683b      	ldr	r3, [r7, #0]
 8002be6:	687a      	ldr	r2, [r7, #4]
 8002be8:	4907      	ldr	r1, [pc, #28]	; (8002c08 <I2C_MasterRequestWrite+0x100>)
 8002bea:	68f8      	ldr	r0, [r7, #12]
 8002bec:	f000 f865 	bl	8002cba <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002bf0:	4603      	mov	r3, r0
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d001      	beq.n	8002bfa <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8002bf6:	2301      	movs	r3, #1
 8002bf8:	e000      	b.n	8002bfc <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8002bfa:	2300      	movs	r3, #0
}
 8002bfc:	4618      	mov	r0, r3
 8002bfe:	3718      	adds	r7, #24
 8002c00:	46bd      	mov	sp, r7
 8002c02:	bd80      	pop	{r7, pc}
 8002c04:	00010008 	.word	0x00010008
 8002c08:	00010002 	.word	0x00010002

08002c0c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002c0c:	b580      	push	{r7, lr}
 8002c0e:	b084      	sub	sp, #16
 8002c10:	af00      	add	r7, sp, #0
 8002c12:	60f8      	str	r0, [r7, #12]
 8002c14:	60b9      	str	r1, [r7, #8]
 8002c16:	603b      	str	r3, [r7, #0]
 8002c18:	4613      	mov	r3, r2
 8002c1a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002c1c:	e025      	b.n	8002c6a <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002c1e:	683b      	ldr	r3, [r7, #0]
 8002c20:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002c24:	d021      	beq.n	8002c6a <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002c26:	f7ff fa51 	bl	80020cc <HAL_GetTick>
 8002c2a:	4602      	mov	r2, r0
 8002c2c:	69bb      	ldr	r3, [r7, #24]
 8002c2e:	1ad3      	subs	r3, r2, r3
 8002c30:	683a      	ldr	r2, [r7, #0]
 8002c32:	429a      	cmp	r2, r3
 8002c34:	d302      	bcc.n	8002c3c <I2C_WaitOnFlagUntilTimeout+0x30>
 8002c36:	683b      	ldr	r3, [r7, #0]
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	d116      	bne.n	8002c6a <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	2200      	movs	r2, #0
 8002c40:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8002c42:	68fb      	ldr	r3, [r7, #12]
 8002c44:	2220      	movs	r2, #32
 8002c46:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	2200      	movs	r2, #0
 8002c4e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002c52:	68fb      	ldr	r3, [r7, #12]
 8002c54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c56:	f043 0220 	orr.w	r2, r3, #32
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002c5e:	68fb      	ldr	r3, [r7, #12]
 8002c60:	2200      	movs	r2, #0
 8002c62:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002c66:	2301      	movs	r3, #1
 8002c68:	e023      	b.n	8002cb2 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002c6a:	68bb      	ldr	r3, [r7, #8]
 8002c6c:	0c1b      	lsrs	r3, r3, #16
 8002c6e:	b2db      	uxtb	r3, r3
 8002c70:	2b01      	cmp	r3, #1
 8002c72:	d10d      	bne.n	8002c90 <I2C_WaitOnFlagUntilTimeout+0x84>
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	695b      	ldr	r3, [r3, #20]
 8002c7a:	43da      	mvns	r2, r3
 8002c7c:	68bb      	ldr	r3, [r7, #8]
 8002c7e:	4013      	ands	r3, r2
 8002c80:	b29b      	uxth	r3, r3
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	bf0c      	ite	eq
 8002c86:	2301      	moveq	r3, #1
 8002c88:	2300      	movne	r3, #0
 8002c8a:	b2db      	uxtb	r3, r3
 8002c8c:	461a      	mov	r2, r3
 8002c8e:	e00c      	b.n	8002caa <I2C_WaitOnFlagUntilTimeout+0x9e>
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	699b      	ldr	r3, [r3, #24]
 8002c96:	43da      	mvns	r2, r3
 8002c98:	68bb      	ldr	r3, [r7, #8]
 8002c9a:	4013      	ands	r3, r2
 8002c9c:	b29b      	uxth	r3, r3
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	bf0c      	ite	eq
 8002ca2:	2301      	moveq	r3, #1
 8002ca4:	2300      	movne	r3, #0
 8002ca6:	b2db      	uxtb	r3, r3
 8002ca8:	461a      	mov	r2, r3
 8002caa:	79fb      	ldrb	r3, [r7, #7]
 8002cac:	429a      	cmp	r2, r3
 8002cae:	d0b6      	beq.n	8002c1e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002cb0:	2300      	movs	r3, #0
}
 8002cb2:	4618      	mov	r0, r3
 8002cb4:	3710      	adds	r7, #16
 8002cb6:	46bd      	mov	sp, r7
 8002cb8:	bd80      	pop	{r7, pc}

08002cba <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002cba:	b580      	push	{r7, lr}
 8002cbc:	b084      	sub	sp, #16
 8002cbe:	af00      	add	r7, sp, #0
 8002cc0:	60f8      	str	r0, [r7, #12]
 8002cc2:	60b9      	str	r1, [r7, #8]
 8002cc4:	607a      	str	r2, [r7, #4]
 8002cc6:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002cc8:	e051      	b.n	8002d6e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002cca:	68fb      	ldr	r3, [r7, #12]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	695b      	ldr	r3, [r3, #20]
 8002cd0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002cd4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002cd8:	d123      	bne.n	8002d22 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002cda:	68fb      	ldr	r3, [r7, #12]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	681a      	ldr	r2, [r3, #0]
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002ce8:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002cea:	68fb      	ldr	r3, [r7, #12]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002cf2:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	2200      	movs	r2, #0
 8002cf8:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	2220      	movs	r2, #32
 8002cfe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	2200      	movs	r2, #0
 8002d06:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002d0a:	68fb      	ldr	r3, [r7, #12]
 8002d0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d0e:	f043 0204 	orr.w	r2, r3, #4
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	2200      	movs	r2, #0
 8002d1a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002d1e:	2301      	movs	r3, #1
 8002d20:	e046      	b.n	8002db0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002d28:	d021      	beq.n	8002d6e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002d2a:	f7ff f9cf 	bl	80020cc <HAL_GetTick>
 8002d2e:	4602      	mov	r2, r0
 8002d30:	683b      	ldr	r3, [r7, #0]
 8002d32:	1ad3      	subs	r3, r2, r3
 8002d34:	687a      	ldr	r2, [r7, #4]
 8002d36:	429a      	cmp	r2, r3
 8002d38:	d302      	bcc.n	8002d40 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	d116      	bne.n	8002d6e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	2200      	movs	r2, #0
 8002d44:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	2220      	movs	r2, #32
 8002d4a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	2200      	movs	r2, #0
 8002d52:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002d56:	68fb      	ldr	r3, [r7, #12]
 8002d58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d5a:	f043 0220 	orr.w	r2, r3, #32
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002d62:	68fb      	ldr	r3, [r7, #12]
 8002d64:	2200      	movs	r2, #0
 8002d66:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002d6a:	2301      	movs	r3, #1
 8002d6c:	e020      	b.n	8002db0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002d6e:	68bb      	ldr	r3, [r7, #8]
 8002d70:	0c1b      	lsrs	r3, r3, #16
 8002d72:	b2db      	uxtb	r3, r3
 8002d74:	2b01      	cmp	r3, #1
 8002d76:	d10c      	bne.n	8002d92 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	695b      	ldr	r3, [r3, #20]
 8002d7e:	43da      	mvns	r2, r3
 8002d80:	68bb      	ldr	r3, [r7, #8]
 8002d82:	4013      	ands	r3, r2
 8002d84:	b29b      	uxth	r3, r3
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	bf14      	ite	ne
 8002d8a:	2301      	movne	r3, #1
 8002d8c:	2300      	moveq	r3, #0
 8002d8e:	b2db      	uxtb	r3, r3
 8002d90:	e00b      	b.n	8002daa <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	699b      	ldr	r3, [r3, #24]
 8002d98:	43da      	mvns	r2, r3
 8002d9a:	68bb      	ldr	r3, [r7, #8]
 8002d9c:	4013      	ands	r3, r2
 8002d9e:	b29b      	uxth	r3, r3
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	bf14      	ite	ne
 8002da4:	2301      	movne	r3, #1
 8002da6:	2300      	moveq	r3, #0
 8002da8:	b2db      	uxtb	r3, r3
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d18d      	bne.n	8002cca <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8002dae:	2300      	movs	r3, #0
}
 8002db0:	4618      	mov	r0, r3
 8002db2:	3710      	adds	r7, #16
 8002db4:	46bd      	mov	sp, r7
 8002db6:	bd80      	pop	{r7, pc}

08002db8 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002db8:	b580      	push	{r7, lr}
 8002dba:	b084      	sub	sp, #16
 8002dbc:	af00      	add	r7, sp, #0
 8002dbe:	60f8      	str	r0, [r7, #12]
 8002dc0:	60b9      	str	r1, [r7, #8]
 8002dc2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002dc4:	e02d      	b.n	8002e22 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002dc6:	68f8      	ldr	r0, [r7, #12]
 8002dc8:	f000 f878 	bl	8002ebc <I2C_IsAcknowledgeFailed>
 8002dcc:	4603      	mov	r3, r0
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d001      	beq.n	8002dd6 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002dd2:	2301      	movs	r3, #1
 8002dd4:	e02d      	b.n	8002e32 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002dd6:	68bb      	ldr	r3, [r7, #8]
 8002dd8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002ddc:	d021      	beq.n	8002e22 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002dde:	f7ff f975 	bl	80020cc <HAL_GetTick>
 8002de2:	4602      	mov	r2, r0
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	1ad3      	subs	r3, r2, r3
 8002de8:	68ba      	ldr	r2, [r7, #8]
 8002dea:	429a      	cmp	r2, r3
 8002dec:	d302      	bcc.n	8002df4 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8002dee:	68bb      	ldr	r3, [r7, #8]
 8002df0:	2b00      	cmp	r3, #0
 8002df2:	d116      	bne.n	8002e22 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	2200      	movs	r2, #0
 8002df8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002dfa:	68fb      	ldr	r3, [r7, #12]
 8002dfc:	2220      	movs	r2, #32
 8002dfe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002e02:	68fb      	ldr	r3, [r7, #12]
 8002e04:	2200      	movs	r2, #0
 8002e06:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e0e:	f043 0220 	orr.w	r2, r3, #32
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	2200      	movs	r2, #0
 8002e1a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002e1e:	2301      	movs	r3, #1
 8002e20:	e007      	b.n	8002e32 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	695b      	ldr	r3, [r3, #20]
 8002e28:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002e2c:	2b80      	cmp	r3, #128	; 0x80
 8002e2e:	d1ca      	bne.n	8002dc6 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002e30:	2300      	movs	r3, #0
}
 8002e32:	4618      	mov	r0, r3
 8002e34:	3710      	adds	r7, #16
 8002e36:	46bd      	mov	sp, r7
 8002e38:	bd80      	pop	{r7, pc}

08002e3a <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002e3a:	b580      	push	{r7, lr}
 8002e3c:	b084      	sub	sp, #16
 8002e3e:	af00      	add	r7, sp, #0
 8002e40:	60f8      	str	r0, [r7, #12]
 8002e42:	60b9      	str	r1, [r7, #8]
 8002e44:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002e46:	e02d      	b.n	8002ea4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002e48:	68f8      	ldr	r0, [r7, #12]
 8002e4a:	f000 f837 	bl	8002ebc <I2C_IsAcknowledgeFailed>
 8002e4e:	4603      	mov	r3, r0
 8002e50:	2b00      	cmp	r3, #0
 8002e52:	d001      	beq.n	8002e58 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002e54:	2301      	movs	r3, #1
 8002e56:	e02d      	b.n	8002eb4 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002e58:	68bb      	ldr	r3, [r7, #8]
 8002e5a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002e5e:	d021      	beq.n	8002ea4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002e60:	f7ff f934 	bl	80020cc <HAL_GetTick>
 8002e64:	4602      	mov	r2, r0
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	1ad3      	subs	r3, r2, r3
 8002e6a:	68ba      	ldr	r2, [r7, #8]
 8002e6c:	429a      	cmp	r2, r3
 8002e6e:	d302      	bcc.n	8002e76 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8002e70:	68bb      	ldr	r3, [r7, #8]
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d116      	bne.n	8002ea4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	2200      	movs	r2, #0
 8002e7a:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	2220      	movs	r2, #32
 8002e80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	2200      	movs	r2, #0
 8002e88:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e90:	f043 0220 	orr.w	r2, r3, #32
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	2200      	movs	r2, #0
 8002e9c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002ea0:	2301      	movs	r3, #1
 8002ea2:	e007      	b.n	8002eb4 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	695b      	ldr	r3, [r3, #20]
 8002eaa:	f003 0304 	and.w	r3, r3, #4
 8002eae:	2b04      	cmp	r3, #4
 8002eb0:	d1ca      	bne.n	8002e48 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002eb2:	2300      	movs	r3, #0
}
 8002eb4:	4618      	mov	r0, r3
 8002eb6:	3710      	adds	r7, #16
 8002eb8:	46bd      	mov	sp, r7
 8002eba:	bd80      	pop	{r7, pc}

08002ebc <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8002ebc:	b480      	push	{r7}
 8002ebe:	b083      	sub	sp, #12
 8002ec0:	af00      	add	r7, sp, #0
 8002ec2:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	695b      	ldr	r3, [r3, #20]
 8002eca:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002ece:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002ed2:	d11b      	bne.n	8002f0c <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002edc:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	2200      	movs	r2, #0
 8002ee2:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	2220      	movs	r2, #32
 8002ee8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	2200      	movs	r2, #0
 8002ef0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ef8:	f043 0204 	orr.w	r2, r3, #4
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	2200      	movs	r2, #0
 8002f04:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8002f08:	2301      	movs	r3, #1
 8002f0a:	e000      	b.n	8002f0e <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8002f0c:	2300      	movs	r3, #0
}
 8002f0e:	4618      	mov	r0, r3
 8002f10:	370c      	adds	r7, #12
 8002f12:	46bd      	mov	sp, r7
 8002f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f18:	4770      	bx	lr

08002f1a <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter new state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002f1a:	b480      	push	{r7}
 8002f1c:	b083      	sub	sp, #12
 8002f1e:	af00      	add	r7, sp, #0
 8002f20:	6078      	str	r0, [r7, #4]
 8002f22:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002f2a:	b2db      	uxtb	r3, r3
 8002f2c:	2b20      	cmp	r3, #32
 8002f2e:	d129      	bne.n	8002f84 <HAL_I2CEx_ConfigAnalogFilter+0x6a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	2224      	movs	r2, #36	; 0x24
 8002f34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	681a      	ldr	r2, [r3, #0]
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	f022 0201 	bic.w	r2, r2, #1
 8002f46:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	f022 0210 	bic.w	r2, r2, #16
 8002f56:	625a      	str	r2, [r3, #36]	; 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	683a      	ldr	r2, [r7, #0]
 8002f64:	430a      	orrs	r2, r1
 8002f66:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	681a      	ldr	r2, [r3, #0]
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	f042 0201 	orr.w	r2, r2, #1
 8002f76:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	2220      	movs	r2, #32
 8002f7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8002f80:	2300      	movs	r3, #0
 8002f82:	e000      	b.n	8002f86 <HAL_I2CEx_ConfigAnalogFilter+0x6c>
  }
  else
  {
    return HAL_BUSY;
 8002f84:	2302      	movs	r3, #2
  }
}
 8002f86:	4618      	mov	r0, r3
 8002f88:	370c      	adds	r7, #12
 8002f8a:	46bd      	mov	sp, r7
 8002f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f90:	4770      	bx	lr

08002f92 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002f92:	b480      	push	{r7}
 8002f94:	b085      	sub	sp, #20
 8002f96:	af00      	add	r7, sp, #0
 8002f98:	6078      	str	r0, [r7, #4]
 8002f9a:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 8002f9c:	2300      	movs	r3, #0
 8002f9e:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002fa6:	b2db      	uxtb	r3, r3
 8002fa8:	2b20      	cmp	r3, #32
 8002faa:	d12a      	bne.n	8003002 <HAL_I2CEx_ConfigDigitalFilter+0x70>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	2224      	movs	r2, #36	; 0x24
 8002fb0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	681a      	ldr	r2, [r3, #0]
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	f022 0201 	bic.w	r2, r2, #1
 8002fc2:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fca:	81fb      	strh	r3, [r7, #14]

    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 8002fcc:	89fb      	ldrh	r3, [r7, #14]
 8002fce:	f023 030f 	bic.w	r3, r3, #15
 8002fd2:	81fb      	strh	r3, [r7, #14]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 8002fd4:	683b      	ldr	r3, [r7, #0]
 8002fd6:	b29a      	uxth	r2, r3
 8002fd8:	89fb      	ldrh	r3, [r7, #14]
 8002fda:	4313      	orrs	r3, r2
 8002fdc:	81fb      	strh	r3, [r7, #14]

    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	89fa      	ldrh	r2, [r7, #14]
 8002fe4:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	681a      	ldr	r2, [r3, #0]
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	f042 0201 	orr.w	r2, r2, #1
 8002ff4:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	2220      	movs	r2, #32
 8002ffa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8002ffe:	2300      	movs	r3, #0
 8003000:	e000      	b.n	8003004 <HAL_I2CEx_ConfigDigitalFilter+0x72>
  }
  else
  {
    return HAL_BUSY;
 8003002:	2302      	movs	r3, #2
  }
}
 8003004:	4618      	mov	r0, r3
 8003006:	3714      	adds	r7, #20
 8003008:	46bd      	mov	sp, r7
 800300a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800300e:	4770      	bx	lr

08003010 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003010:	b580      	push	{r7, lr}
 8003012:	b086      	sub	sp, #24
 8003014:	af00      	add	r7, sp, #0
 8003016:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	2b00      	cmp	r3, #0
 800301c:	d101      	bne.n	8003022 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800301e:	2301      	movs	r3, #1
 8003020:	e267      	b.n	80034f2 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	f003 0301 	and.w	r3, r3, #1
 800302a:	2b00      	cmp	r3, #0
 800302c:	d075      	beq.n	800311a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800302e:	4b88      	ldr	r3, [pc, #544]	; (8003250 <HAL_RCC_OscConfig+0x240>)
 8003030:	689b      	ldr	r3, [r3, #8]
 8003032:	f003 030c 	and.w	r3, r3, #12
 8003036:	2b04      	cmp	r3, #4
 8003038:	d00c      	beq.n	8003054 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800303a:	4b85      	ldr	r3, [pc, #532]	; (8003250 <HAL_RCC_OscConfig+0x240>)
 800303c:	689b      	ldr	r3, [r3, #8]
 800303e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003042:	2b08      	cmp	r3, #8
 8003044:	d112      	bne.n	800306c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003046:	4b82      	ldr	r3, [pc, #520]	; (8003250 <HAL_RCC_OscConfig+0x240>)
 8003048:	685b      	ldr	r3, [r3, #4]
 800304a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800304e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003052:	d10b      	bne.n	800306c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003054:	4b7e      	ldr	r3, [pc, #504]	; (8003250 <HAL_RCC_OscConfig+0x240>)
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800305c:	2b00      	cmp	r3, #0
 800305e:	d05b      	beq.n	8003118 <HAL_RCC_OscConfig+0x108>
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	685b      	ldr	r3, [r3, #4]
 8003064:	2b00      	cmp	r3, #0
 8003066:	d157      	bne.n	8003118 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003068:	2301      	movs	r3, #1
 800306a:	e242      	b.n	80034f2 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	685b      	ldr	r3, [r3, #4]
 8003070:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003074:	d106      	bne.n	8003084 <HAL_RCC_OscConfig+0x74>
 8003076:	4b76      	ldr	r3, [pc, #472]	; (8003250 <HAL_RCC_OscConfig+0x240>)
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	4a75      	ldr	r2, [pc, #468]	; (8003250 <HAL_RCC_OscConfig+0x240>)
 800307c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003080:	6013      	str	r3, [r2, #0]
 8003082:	e01d      	b.n	80030c0 <HAL_RCC_OscConfig+0xb0>
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	685b      	ldr	r3, [r3, #4]
 8003088:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800308c:	d10c      	bne.n	80030a8 <HAL_RCC_OscConfig+0x98>
 800308e:	4b70      	ldr	r3, [pc, #448]	; (8003250 <HAL_RCC_OscConfig+0x240>)
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	4a6f      	ldr	r2, [pc, #444]	; (8003250 <HAL_RCC_OscConfig+0x240>)
 8003094:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003098:	6013      	str	r3, [r2, #0]
 800309a:	4b6d      	ldr	r3, [pc, #436]	; (8003250 <HAL_RCC_OscConfig+0x240>)
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	4a6c      	ldr	r2, [pc, #432]	; (8003250 <HAL_RCC_OscConfig+0x240>)
 80030a0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80030a4:	6013      	str	r3, [r2, #0]
 80030a6:	e00b      	b.n	80030c0 <HAL_RCC_OscConfig+0xb0>
 80030a8:	4b69      	ldr	r3, [pc, #420]	; (8003250 <HAL_RCC_OscConfig+0x240>)
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	4a68      	ldr	r2, [pc, #416]	; (8003250 <HAL_RCC_OscConfig+0x240>)
 80030ae:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80030b2:	6013      	str	r3, [r2, #0]
 80030b4:	4b66      	ldr	r3, [pc, #408]	; (8003250 <HAL_RCC_OscConfig+0x240>)
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	4a65      	ldr	r2, [pc, #404]	; (8003250 <HAL_RCC_OscConfig+0x240>)
 80030ba:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80030be:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	685b      	ldr	r3, [r3, #4]
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	d013      	beq.n	80030f0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80030c8:	f7ff f800 	bl	80020cc <HAL_GetTick>
 80030cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80030ce:	e008      	b.n	80030e2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80030d0:	f7fe fffc 	bl	80020cc <HAL_GetTick>
 80030d4:	4602      	mov	r2, r0
 80030d6:	693b      	ldr	r3, [r7, #16]
 80030d8:	1ad3      	subs	r3, r2, r3
 80030da:	2b64      	cmp	r3, #100	; 0x64
 80030dc:	d901      	bls.n	80030e2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80030de:	2303      	movs	r3, #3
 80030e0:	e207      	b.n	80034f2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80030e2:	4b5b      	ldr	r3, [pc, #364]	; (8003250 <HAL_RCC_OscConfig+0x240>)
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d0f0      	beq.n	80030d0 <HAL_RCC_OscConfig+0xc0>
 80030ee:	e014      	b.n	800311a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80030f0:	f7fe ffec 	bl	80020cc <HAL_GetTick>
 80030f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80030f6:	e008      	b.n	800310a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80030f8:	f7fe ffe8 	bl	80020cc <HAL_GetTick>
 80030fc:	4602      	mov	r2, r0
 80030fe:	693b      	ldr	r3, [r7, #16]
 8003100:	1ad3      	subs	r3, r2, r3
 8003102:	2b64      	cmp	r3, #100	; 0x64
 8003104:	d901      	bls.n	800310a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003106:	2303      	movs	r3, #3
 8003108:	e1f3      	b.n	80034f2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800310a:	4b51      	ldr	r3, [pc, #324]	; (8003250 <HAL_RCC_OscConfig+0x240>)
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003112:	2b00      	cmp	r3, #0
 8003114:	d1f0      	bne.n	80030f8 <HAL_RCC_OscConfig+0xe8>
 8003116:	e000      	b.n	800311a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003118:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	f003 0302 	and.w	r3, r3, #2
 8003122:	2b00      	cmp	r3, #0
 8003124:	d063      	beq.n	80031ee <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003126:	4b4a      	ldr	r3, [pc, #296]	; (8003250 <HAL_RCC_OscConfig+0x240>)
 8003128:	689b      	ldr	r3, [r3, #8]
 800312a:	f003 030c 	and.w	r3, r3, #12
 800312e:	2b00      	cmp	r3, #0
 8003130:	d00b      	beq.n	800314a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003132:	4b47      	ldr	r3, [pc, #284]	; (8003250 <HAL_RCC_OscConfig+0x240>)
 8003134:	689b      	ldr	r3, [r3, #8]
 8003136:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800313a:	2b08      	cmp	r3, #8
 800313c:	d11c      	bne.n	8003178 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800313e:	4b44      	ldr	r3, [pc, #272]	; (8003250 <HAL_RCC_OscConfig+0x240>)
 8003140:	685b      	ldr	r3, [r3, #4]
 8003142:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003146:	2b00      	cmp	r3, #0
 8003148:	d116      	bne.n	8003178 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800314a:	4b41      	ldr	r3, [pc, #260]	; (8003250 <HAL_RCC_OscConfig+0x240>)
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	f003 0302 	and.w	r3, r3, #2
 8003152:	2b00      	cmp	r3, #0
 8003154:	d005      	beq.n	8003162 <HAL_RCC_OscConfig+0x152>
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	68db      	ldr	r3, [r3, #12]
 800315a:	2b01      	cmp	r3, #1
 800315c:	d001      	beq.n	8003162 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800315e:	2301      	movs	r3, #1
 8003160:	e1c7      	b.n	80034f2 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003162:	4b3b      	ldr	r3, [pc, #236]	; (8003250 <HAL_RCC_OscConfig+0x240>)
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	691b      	ldr	r3, [r3, #16]
 800316e:	00db      	lsls	r3, r3, #3
 8003170:	4937      	ldr	r1, [pc, #220]	; (8003250 <HAL_RCC_OscConfig+0x240>)
 8003172:	4313      	orrs	r3, r2
 8003174:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003176:	e03a      	b.n	80031ee <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	68db      	ldr	r3, [r3, #12]
 800317c:	2b00      	cmp	r3, #0
 800317e:	d020      	beq.n	80031c2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003180:	4b34      	ldr	r3, [pc, #208]	; (8003254 <HAL_RCC_OscConfig+0x244>)
 8003182:	2201      	movs	r2, #1
 8003184:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003186:	f7fe ffa1 	bl	80020cc <HAL_GetTick>
 800318a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800318c:	e008      	b.n	80031a0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800318e:	f7fe ff9d 	bl	80020cc <HAL_GetTick>
 8003192:	4602      	mov	r2, r0
 8003194:	693b      	ldr	r3, [r7, #16]
 8003196:	1ad3      	subs	r3, r2, r3
 8003198:	2b02      	cmp	r3, #2
 800319a:	d901      	bls.n	80031a0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800319c:	2303      	movs	r3, #3
 800319e:	e1a8      	b.n	80034f2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80031a0:	4b2b      	ldr	r3, [pc, #172]	; (8003250 <HAL_RCC_OscConfig+0x240>)
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	f003 0302 	and.w	r3, r3, #2
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	d0f0      	beq.n	800318e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80031ac:	4b28      	ldr	r3, [pc, #160]	; (8003250 <HAL_RCC_OscConfig+0x240>)
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	691b      	ldr	r3, [r3, #16]
 80031b8:	00db      	lsls	r3, r3, #3
 80031ba:	4925      	ldr	r1, [pc, #148]	; (8003250 <HAL_RCC_OscConfig+0x240>)
 80031bc:	4313      	orrs	r3, r2
 80031be:	600b      	str	r3, [r1, #0]
 80031c0:	e015      	b.n	80031ee <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80031c2:	4b24      	ldr	r3, [pc, #144]	; (8003254 <HAL_RCC_OscConfig+0x244>)
 80031c4:	2200      	movs	r2, #0
 80031c6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80031c8:	f7fe ff80 	bl	80020cc <HAL_GetTick>
 80031cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80031ce:	e008      	b.n	80031e2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80031d0:	f7fe ff7c 	bl	80020cc <HAL_GetTick>
 80031d4:	4602      	mov	r2, r0
 80031d6:	693b      	ldr	r3, [r7, #16]
 80031d8:	1ad3      	subs	r3, r2, r3
 80031da:	2b02      	cmp	r3, #2
 80031dc:	d901      	bls.n	80031e2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80031de:	2303      	movs	r3, #3
 80031e0:	e187      	b.n	80034f2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80031e2:	4b1b      	ldr	r3, [pc, #108]	; (8003250 <HAL_RCC_OscConfig+0x240>)
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	f003 0302 	and.w	r3, r3, #2
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	d1f0      	bne.n	80031d0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	f003 0308 	and.w	r3, r3, #8
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d036      	beq.n	8003268 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	695b      	ldr	r3, [r3, #20]
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d016      	beq.n	8003230 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003202:	4b15      	ldr	r3, [pc, #84]	; (8003258 <HAL_RCC_OscConfig+0x248>)
 8003204:	2201      	movs	r2, #1
 8003206:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003208:	f7fe ff60 	bl	80020cc <HAL_GetTick>
 800320c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800320e:	e008      	b.n	8003222 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003210:	f7fe ff5c 	bl	80020cc <HAL_GetTick>
 8003214:	4602      	mov	r2, r0
 8003216:	693b      	ldr	r3, [r7, #16]
 8003218:	1ad3      	subs	r3, r2, r3
 800321a:	2b02      	cmp	r3, #2
 800321c:	d901      	bls.n	8003222 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800321e:	2303      	movs	r3, #3
 8003220:	e167      	b.n	80034f2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003222:	4b0b      	ldr	r3, [pc, #44]	; (8003250 <HAL_RCC_OscConfig+0x240>)
 8003224:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003226:	f003 0302 	and.w	r3, r3, #2
 800322a:	2b00      	cmp	r3, #0
 800322c:	d0f0      	beq.n	8003210 <HAL_RCC_OscConfig+0x200>
 800322e:	e01b      	b.n	8003268 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003230:	4b09      	ldr	r3, [pc, #36]	; (8003258 <HAL_RCC_OscConfig+0x248>)
 8003232:	2200      	movs	r2, #0
 8003234:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003236:	f7fe ff49 	bl	80020cc <HAL_GetTick>
 800323a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800323c:	e00e      	b.n	800325c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800323e:	f7fe ff45 	bl	80020cc <HAL_GetTick>
 8003242:	4602      	mov	r2, r0
 8003244:	693b      	ldr	r3, [r7, #16]
 8003246:	1ad3      	subs	r3, r2, r3
 8003248:	2b02      	cmp	r3, #2
 800324a:	d907      	bls.n	800325c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800324c:	2303      	movs	r3, #3
 800324e:	e150      	b.n	80034f2 <HAL_RCC_OscConfig+0x4e2>
 8003250:	40023800 	.word	0x40023800
 8003254:	42470000 	.word	0x42470000
 8003258:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800325c:	4b88      	ldr	r3, [pc, #544]	; (8003480 <HAL_RCC_OscConfig+0x470>)
 800325e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003260:	f003 0302 	and.w	r3, r3, #2
 8003264:	2b00      	cmp	r3, #0
 8003266:	d1ea      	bne.n	800323e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	f003 0304 	and.w	r3, r3, #4
 8003270:	2b00      	cmp	r3, #0
 8003272:	f000 8097 	beq.w	80033a4 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003276:	2300      	movs	r3, #0
 8003278:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800327a:	4b81      	ldr	r3, [pc, #516]	; (8003480 <HAL_RCC_OscConfig+0x470>)
 800327c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800327e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003282:	2b00      	cmp	r3, #0
 8003284:	d10f      	bne.n	80032a6 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003286:	2300      	movs	r3, #0
 8003288:	60bb      	str	r3, [r7, #8]
 800328a:	4b7d      	ldr	r3, [pc, #500]	; (8003480 <HAL_RCC_OscConfig+0x470>)
 800328c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800328e:	4a7c      	ldr	r2, [pc, #496]	; (8003480 <HAL_RCC_OscConfig+0x470>)
 8003290:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003294:	6413      	str	r3, [r2, #64]	; 0x40
 8003296:	4b7a      	ldr	r3, [pc, #488]	; (8003480 <HAL_RCC_OscConfig+0x470>)
 8003298:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800329a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800329e:	60bb      	str	r3, [r7, #8]
 80032a0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80032a2:	2301      	movs	r3, #1
 80032a4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80032a6:	4b77      	ldr	r3, [pc, #476]	; (8003484 <HAL_RCC_OscConfig+0x474>)
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d118      	bne.n	80032e4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80032b2:	4b74      	ldr	r3, [pc, #464]	; (8003484 <HAL_RCC_OscConfig+0x474>)
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	4a73      	ldr	r2, [pc, #460]	; (8003484 <HAL_RCC_OscConfig+0x474>)
 80032b8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80032bc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80032be:	f7fe ff05 	bl	80020cc <HAL_GetTick>
 80032c2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80032c4:	e008      	b.n	80032d8 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80032c6:	f7fe ff01 	bl	80020cc <HAL_GetTick>
 80032ca:	4602      	mov	r2, r0
 80032cc:	693b      	ldr	r3, [r7, #16]
 80032ce:	1ad3      	subs	r3, r2, r3
 80032d0:	2b02      	cmp	r3, #2
 80032d2:	d901      	bls.n	80032d8 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80032d4:	2303      	movs	r3, #3
 80032d6:	e10c      	b.n	80034f2 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80032d8:	4b6a      	ldr	r3, [pc, #424]	; (8003484 <HAL_RCC_OscConfig+0x474>)
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80032e0:	2b00      	cmp	r3, #0
 80032e2:	d0f0      	beq.n	80032c6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	689b      	ldr	r3, [r3, #8]
 80032e8:	2b01      	cmp	r3, #1
 80032ea:	d106      	bne.n	80032fa <HAL_RCC_OscConfig+0x2ea>
 80032ec:	4b64      	ldr	r3, [pc, #400]	; (8003480 <HAL_RCC_OscConfig+0x470>)
 80032ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80032f0:	4a63      	ldr	r2, [pc, #396]	; (8003480 <HAL_RCC_OscConfig+0x470>)
 80032f2:	f043 0301 	orr.w	r3, r3, #1
 80032f6:	6713      	str	r3, [r2, #112]	; 0x70
 80032f8:	e01c      	b.n	8003334 <HAL_RCC_OscConfig+0x324>
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	689b      	ldr	r3, [r3, #8]
 80032fe:	2b05      	cmp	r3, #5
 8003300:	d10c      	bne.n	800331c <HAL_RCC_OscConfig+0x30c>
 8003302:	4b5f      	ldr	r3, [pc, #380]	; (8003480 <HAL_RCC_OscConfig+0x470>)
 8003304:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003306:	4a5e      	ldr	r2, [pc, #376]	; (8003480 <HAL_RCC_OscConfig+0x470>)
 8003308:	f043 0304 	orr.w	r3, r3, #4
 800330c:	6713      	str	r3, [r2, #112]	; 0x70
 800330e:	4b5c      	ldr	r3, [pc, #368]	; (8003480 <HAL_RCC_OscConfig+0x470>)
 8003310:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003312:	4a5b      	ldr	r2, [pc, #364]	; (8003480 <HAL_RCC_OscConfig+0x470>)
 8003314:	f043 0301 	orr.w	r3, r3, #1
 8003318:	6713      	str	r3, [r2, #112]	; 0x70
 800331a:	e00b      	b.n	8003334 <HAL_RCC_OscConfig+0x324>
 800331c:	4b58      	ldr	r3, [pc, #352]	; (8003480 <HAL_RCC_OscConfig+0x470>)
 800331e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003320:	4a57      	ldr	r2, [pc, #348]	; (8003480 <HAL_RCC_OscConfig+0x470>)
 8003322:	f023 0301 	bic.w	r3, r3, #1
 8003326:	6713      	str	r3, [r2, #112]	; 0x70
 8003328:	4b55      	ldr	r3, [pc, #340]	; (8003480 <HAL_RCC_OscConfig+0x470>)
 800332a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800332c:	4a54      	ldr	r2, [pc, #336]	; (8003480 <HAL_RCC_OscConfig+0x470>)
 800332e:	f023 0304 	bic.w	r3, r3, #4
 8003332:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	689b      	ldr	r3, [r3, #8]
 8003338:	2b00      	cmp	r3, #0
 800333a:	d015      	beq.n	8003368 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800333c:	f7fe fec6 	bl	80020cc <HAL_GetTick>
 8003340:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003342:	e00a      	b.n	800335a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003344:	f7fe fec2 	bl	80020cc <HAL_GetTick>
 8003348:	4602      	mov	r2, r0
 800334a:	693b      	ldr	r3, [r7, #16]
 800334c:	1ad3      	subs	r3, r2, r3
 800334e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003352:	4293      	cmp	r3, r2
 8003354:	d901      	bls.n	800335a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003356:	2303      	movs	r3, #3
 8003358:	e0cb      	b.n	80034f2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800335a:	4b49      	ldr	r3, [pc, #292]	; (8003480 <HAL_RCC_OscConfig+0x470>)
 800335c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800335e:	f003 0302 	and.w	r3, r3, #2
 8003362:	2b00      	cmp	r3, #0
 8003364:	d0ee      	beq.n	8003344 <HAL_RCC_OscConfig+0x334>
 8003366:	e014      	b.n	8003392 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003368:	f7fe feb0 	bl	80020cc <HAL_GetTick>
 800336c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800336e:	e00a      	b.n	8003386 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003370:	f7fe feac 	bl	80020cc <HAL_GetTick>
 8003374:	4602      	mov	r2, r0
 8003376:	693b      	ldr	r3, [r7, #16]
 8003378:	1ad3      	subs	r3, r2, r3
 800337a:	f241 3288 	movw	r2, #5000	; 0x1388
 800337e:	4293      	cmp	r3, r2
 8003380:	d901      	bls.n	8003386 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003382:	2303      	movs	r3, #3
 8003384:	e0b5      	b.n	80034f2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003386:	4b3e      	ldr	r3, [pc, #248]	; (8003480 <HAL_RCC_OscConfig+0x470>)
 8003388:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800338a:	f003 0302 	and.w	r3, r3, #2
 800338e:	2b00      	cmp	r3, #0
 8003390:	d1ee      	bne.n	8003370 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003392:	7dfb      	ldrb	r3, [r7, #23]
 8003394:	2b01      	cmp	r3, #1
 8003396:	d105      	bne.n	80033a4 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003398:	4b39      	ldr	r3, [pc, #228]	; (8003480 <HAL_RCC_OscConfig+0x470>)
 800339a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800339c:	4a38      	ldr	r2, [pc, #224]	; (8003480 <HAL_RCC_OscConfig+0x470>)
 800339e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80033a2:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	699b      	ldr	r3, [r3, #24]
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	f000 80a1 	beq.w	80034f0 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80033ae:	4b34      	ldr	r3, [pc, #208]	; (8003480 <HAL_RCC_OscConfig+0x470>)
 80033b0:	689b      	ldr	r3, [r3, #8]
 80033b2:	f003 030c 	and.w	r3, r3, #12
 80033b6:	2b08      	cmp	r3, #8
 80033b8:	d05c      	beq.n	8003474 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	699b      	ldr	r3, [r3, #24]
 80033be:	2b02      	cmp	r3, #2
 80033c0:	d141      	bne.n	8003446 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80033c2:	4b31      	ldr	r3, [pc, #196]	; (8003488 <HAL_RCC_OscConfig+0x478>)
 80033c4:	2200      	movs	r2, #0
 80033c6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80033c8:	f7fe fe80 	bl	80020cc <HAL_GetTick>
 80033cc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80033ce:	e008      	b.n	80033e2 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80033d0:	f7fe fe7c 	bl	80020cc <HAL_GetTick>
 80033d4:	4602      	mov	r2, r0
 80033d6:	693b      	ldr	r3, [r7, #16]
 80033d8:	1ad3      	subs	r3, r2, r3
 80033da:	2b02      	cmp	r3, #2
 80033dc:	d901      	bls.n	80033e2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80033de:	2303      	movs	r3, #3
 80033e0:	e087      	b.n	80034f2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80033e2:	4b27      	ldr	r3, [pc, #156]	; (8003480 <HAL_RCC_OscConfig+0x470>)
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d1f0      	bne.n	80033d0 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	69da      	ldr	r2, [r3, #28]
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	6a1b      	ldr	r3, [r3, #32]
 80033f6:	431a      	orrs	r2, r3
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033fc:	019b      	lsls	r3, r3, #6
 80033fe:	431a      	orrs	r2, r3
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003404:	085b      	lsrs	r3, r3, #1
 8003406:	3b01      	subs	r3, #1
 8003408:	041b      	lsls	r3, r3, #16
 800340a:	431a      	orrs	r2, r3
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003410:	061b      	lsls	r3, r3, #24
 8003412:	491b      	ldr	r1, [pc, #108]	; (8003480 <HAL_RCC_OscConfig+0x470>)
 8003414:	4313      	orrs	r3, r2
 8003416:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003418:	4b1b      	ldr	r3, [pc, #108]	; (8003488 <HAL_RCC_OscConfig+0x478>)
 800341a:	2201      	movs	r2, #1
 800341c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800341e:	f7fe fe55 	bl	80020cc <HAL_GetTick>
 8003422:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003424:	e008      	b.n	8003438 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003426:	f7fe fe51 	bl	80020cc <HAL_GetTick>
 800342a:	4602      	mov	r2, r0
 800342c:	693b      	ldr	r3, [r7, #16]
 800342e:	1ad3      	subs	r3, r2, r3
 8003430:	2b02      	cmp	r3, #2
 8003432:	d901      	bls.n	8003438 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003434:	2303      	movs	r3, #3
 8003436:	e05c      	b.n	80034f2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003438:	4b11      	ldr	r3, [pc, #68]	; (8003480 <HAL_RCC_OscConfig+0x470>)
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003440:	2b00      	cmp	r3, #0
 8003442:	d0f0      	beq.n	8003426 <HAL_RCC_OscConfig+0x416>
 8003444:	e054      	b.n	80034f0 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003446:	4b10      	ldr	r3, [pc, #64]	; (8003488 <HAL_RCC_OscConfig+0x478>)
 8003448:	2200      	movs	r2, #0
 800344a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800344c:	f7fe fe3e 	bl	80020cc <HAL_GetTick>
 8003450:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003452:	e008      	b.n	8003466 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003454:	f7fe fe3a 	bl	80020cc <HAL_GetTick>
 8003458:	4602      	mov	r2, r0
 800345a:	693b      	ldr	r3, [r7, #16]
 800345c:	1ad3      	subs	r3, r2, r3
 800345e:	2b02      	cmp	r3, #2
 8003460:	d901      	bls.n	8003466 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003462:	2303      	movs	r3, #3
 8003464:	e045      	b.n	80034f2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003466:	4b06      	ldr	r3, [pc, #24]	; (8003480 <HAL_RCC_OscConfig+0x470>)
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800346e:	2b00      	cmp	r3, #0
 8003470:	d1f0      	bne.n	8003454 <HAL_RCC_OscConfig+0x444>
 8003472:	e03d      	b.n	80034f0 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	699b      	ldr	r3, [r3, #24]
 8003478:	2b01      	cmp	r3, #1
 800347a:	d107      	bne.n	800348c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800347c:	2301      	movs	r3, #1
 800347e:	e038      	b.n	80034f2 <HAL_RCC_OscConfig+0x4e2>
 8003480:	40023800 	.word	0x40023800
 8003484:	40007000 	.word	0x40007000
 8003488:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800348c:	4b1b      	ldr	r3, [pc, #108]	; (80034fc <HAL_RCC_OscConfig+0x4ec>)
 800348e:	685b      	ldr	r3, [r3, #4]
 8003490:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	699b      	ldr	r3, [r3, #24]
 8003496:	2b01      	cmp	r3, #1
 8003498:	d028      	beq.n	80034ec <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800349a:	68fb      	ldr	r3, [r7, #12]
 800349c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80034a4:	429a      	cmp	r2, r3
 80034a6:	d121      	bne.n	80034ec <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80034b2:	429a      	cmp	r2, r3
 80034b4:	d11a      	bne.n	80034ec <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80034b6:	68fa      	ldr	r2, [r7, #12]
 80034b8:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80034bc:	4013      	ands	r3, r2
 80034be:	687a      	ldr	r2, [r7, #4]
 80034c0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80034c2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80034c4:	4293      	cmp	r3, r2
 80034c6:	d111      	bne.n	80034ec <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034d2:	085b      	lsrs	r3, r3, #1
 80034d4:	3b01      	subs	r3, #1
 80034d6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80034d8:	429a      	cmp	r2, r3
 80034da:	d107      	bne.n	80034ec <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034e6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80034e8:	429a      	cmp	r2, r3
 80034ea:	d001      	beq.n	80034f0 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80034ec:	2301      	movs	r3, #1
 80034ee:	e000      	b.n	80034f2 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80034f0:	2300      	movs	r3, #0
}
 80034f2:	4618      	mov	r0, r3
 80034f4:	3718      	adds	r7, #24
 80034f6:	46bd      	mov	sp, r7
 80034f8:	bd80      	pop	{r7, pc}
 80034fa:	bf00      	nop
 80034fc:	40023800 	.word	0x40023800

08003500 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003500:	b580      	push	{r7, lr}
 8003502:	b084      	sub	sp, #16
 8003504:	af00      	add	r7, sp, #0
 8003506:	6078      	str	r0, [r7, #4]
 8003508:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	2b00      	cmp	r3, #0
 800350e:	d101      	bne.n	8003514 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003510:	2301      	movs	r3, #1
 8003512:	e0cc      	b.n	80036ae <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003514:	4b68      	ldr	r3, [pc, #416]	; (80036b8 <HAL_RCC_ClockConfig+0x1b8>)
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	f003 030f 	and.w	r3, r3, #15
 800351c:	683a      	ldr	r2, [r7, #0]
 800351e:	429a      	cmp	r2, r3
 8003520:	d90c      	bls.n	800353c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003522:	4b65      	ldr	r3, [pc, #404]	; (80036b8 <HAL_RCC_ClockConfig+0x1b8>)
 8003524:	683a      	ldr	r2, [r7, #0]
 8003526:	b2d2      	uxtb	r2, r2
 8003528:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800352a:	4b63      	ldr	r3, [pc, #396]	; (80036b8 <HAL_RCC_ClockConfig+0x1b8>)
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	f003 030f 	and.w	r3, r3, #15
 8003532:	683a      	ldr	r2, [r7, #0]
 8003534:	429a      	cmp	r2, r3
 8003536:	d001      	beq.n	800353c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003538:	2301      	movs	r3, #1
 800353a:	e0b8      	b.n	80036ae <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	f003 0302 	and.w	r3, r3, #2
 8003544:	2b00      	cmp	r3, #0
 8003546:	d020      	beq.n	800358a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	f003 0304 	and.w	r3, r3, #4
 8003550:	2b00      	cmp	r3, #0
 8003552:	d005      	beq.n	8003560 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003554:	4b59      	ldr	r3, [pc, #356]	; (80036bc <HAL_RCC_ClockConfig+0x1bc>)
 8003556:	689b      	ldr	r3, [r3, #8]
 8003558:	4a58      	ldr	r2, [pc, #352]	; (80036bc <HAL_RCC_ClockConfig+0x1bc>)
 800355a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800355e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	f003 0308 	and.w	r3, r3, #8
 8003568:	2b00      	cmp	r3, #0
 800356a:	d005      	beq.n	8003578 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800356c:	4b53      	ldr	r3, [pc, #332]	; (80036bc <HAL_RCC_ClockConfig+0x1bc>)
 800356e:	689b      	ldr	r3, [r3, #8]
 8003570:	4a52      	ldr	r2, [pc, #328]	; (80036bc <HAL_RCC_ClockConfig+0x1bc>)
 8003572:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003576:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003578:	4b50      	ldr	r3, [pc, #320]	; (80036bc <HAL_RCC_ClockConfig+0x1bc>)
 800357a:	689b      	ldr	r3, [r3, #8]
 800357c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	689b      	ldr	r3, [r3, #8]
 8003584:	494d      	ldr	r1, [pc, #308]	; (80036bc <HAL_RCC_ClockConfig+0x1bc>)
 8003586:	4313      	orrs	r3, r2
 8003588:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	f003 0301 	and.w	r3, r3, #1
 8003592:	2b00      	cmp	r3, #0
 8003594:	d044      	beq.n	8003620 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	685b      	ldr	r3, [r3, #4]
 800359a:	2b01      	cmp	r3, #1
 800359c:	d107      	bne.n	80035ae <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800359e:	4b47      	ldr	r3, [pc, #284]	; (80036bc <HAL_RCC_ClockConfig+0x1bc>)
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d119      	bne.n	80035de <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80035aa:	2301      	movs	r3, #1
 80035ac:	e07f      	b.n	80036ae <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	685b      	ldr	r3, [r3, #4]
 80035b2:	2b02      	cmp	r3, #2
 80035b4:	d003      	beq.n	80035be <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80035ba:	2b03      	cmp	r3, #3
 80035bc:	d107      	bne.n	80035ce <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80035be:	4b3f      	ldr	r3, [pc, #252]	; (80036bc <HAL_RCC_ClockConfig+0x1bc>)
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	d109      	bne.n	80035de <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80035ca:	2301      	movs	r3, #1
 80035cc:	e06f      	b.n	80036ae <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80035ce:	4b3b      	ldr	r3, [pc, #236]	; (80036bc <HAL_RCC_ClockConfig+0x1bc>)
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	f003 0302 	and.w	r3, r3, #2
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d101      	bne.n	80035de <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80035da:	2301      	movs	r3, #1
 80035dc:	e067      	b.n	80036ae <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80035de:	4b37      	ldr	r3, [pc, #220]	; (80036bc <HAL_RCC_ClockConfig+0x1bc>)
 80035e0:	689b      	ldr	r3, [r3, #8]
 80035e2:	f023 0203 	bic.w	r2, r3, #3
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	685b      	ldr	r3, [r3, #4]
 80035ea:	4934      	ldr	r1, [pc, #208]	; (80036bc <HAL_RCC_ClockConfig+0x1bc>)
 80035ec:	4313      	orrs	r3, r2
 80035ee:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80035f0:	f7fe fd6c 	bl	80020cc <HAL_GetTick>
 80035f4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80035f6:	e00a      	b.n	800360e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80035f8:	f7fe fd68 	bl	80020cc <HAL_GetTick>
 80035fc:	4602      	mov	r2, r0
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	1ad3      	subs	r3, r2, r3
 8003602:	f241 3288 	movw	r2, #5000	; 0x1388
 8003606:	4293      	cmp	r3, r2
 8003608:	d901      	bls.n	800360e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800360a:	2303      	movs	r3, #3
 800360c:	e04f      	b.n	80036ae <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800360e:	4b2b      	ldr	r3, [pc, #172]	; (80036bc <HAL_RCC_ClockConfig+0x1bc>)
 8003610:	689b      	ldr	r3, [r3, #8]
 8003612:	f003 020c 	and.w	r2, r3, #12
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	685b      	ldr	r3, [r3, #4]
 800361a:	009b      	lsls	r3, r3, #2
 800361c:	429a      	cmp	r2, r3
 800361e:	d1eb      	bne.n	80035f8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003620:	4b25      	ldr	r3, [pc, #148]	; (80036b8 <HAL_RCC_ClockConfig+0x1b8>)
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	f003 030f 	and.w	r3, r3, #15
 8003628:	683a      	ldr	r2, [r7, #0]
 800362a:	429a      	cmp	r2, r3
 800362c:	d20c      	bcs.n	8003648 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800362e:	4b22      	ldr	r3, [pc, #136]	; (80036b8 <HAL_RCC_ClockConfig+0x1b8>)
 8003630:	683a      	ldr	r2, [r7, #0]
 8003632:	b2d2      	uxtb	r2, r2
 8003634:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003636:	4b20      	ldr	r3, [pc, #128]	; (80036b8 <HAL_RCC_ClockConfig+0x1b8>)
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	f003 030f 	and.w	r3, r3, #15
 800363e:	683a      	ldr	r2, [r7, #0]
 8003640:	429a      	cmp	r2, r3
 8003642:	d001      	beq.n	8003648 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003644:	2301      	movs	r3, #1
 8003646:	e032      	b.n	80036ae <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	f003 0304 	and.w	r3, r3, #4
 8003650:	2b00      	cmp	r3, #0
 8003652:	d008      	beq.n	8003666 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003654:	4b19      	ldr	r3, [pc, #100]	; (80036bc <HAL_RCC_ClockConfig+0x1bc>)
 8003656:	689b      	ldr	r3, [r3, #8]
 8003658:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	68db      	ldr	r3, [r3, #12]
 8003660:	4916      	ldr	r1, [pc, #88]	; (80036bc <HAL_RCC_ClockConfig+0x1bc>)
 8003662:	4313      	orrs	r3, r2
 8003664:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	f003 0308 	and.w	r3, r3, #8
 800366e:	2b00      	cmp	r3, #0
 8003670:	d009      	beq.n	8003686 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003672:	4b12      	ldr	r3, [pc, #72]	; (80036bc <HAL_RCC_ClockConfig+0x1bc>)
 8003674:	689b      	ldr	r3, [r3, #8]
 8003676:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	691b      	ldr	r3, [r3, #16]
 800367e:	00db      	lsls	r3, r3, #3
 8003680:	490e      	ldr	r1, [pc, #56]	; (80036bc <HAL_RCC_ClockConfig+0x1bc>)
 8003682:	4313      	orrs	r3, r2
 8003684:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003686:	f000 f821 	bl	80036cc <HAL_RCC_GetSysClockFreq>
 800368a:	4602      	mov	r2, r0
 800368c:	4b0b      	ldr	r3, [pc, #44]	; (80036bc <HAL_RCC_ClockConfig+0x1bc>)
 800368e:	689b      	ldr	r3, [r3, #8]
 8003690:	091b      	lsrs	r3, r3, #4
 8003692:	f003 030f 	and.w	r3, r3, #15
 8003696:	490a      	ldr	r1, [pc, #40]	; (80036c0 <HAL_RCC_ClockConfig+0x1c0>)
 8003698:	5ccb      	ldrb	r3, [r1, r3]
 800369a:	fa22 f303 	lsr.w	r3, r2, r3
 800369e:	4a09      	ldr	r2, [pc, #36]	; (80036c4 <HAL_RCC_ClockConfig+0x1c4>)
 80036a0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80036a2:	4b09      	ldr	r3, [pc, #36]	; (80036c8 <HAL_RCC_ClockConfig+0x1c8>)
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	4618      	mov	r0, r3
 80036a8:	f7fe fccc 	bl	8002044 <HAL_InitTick>

  return HAL_OK;
 80036ac:	2300      	movs	r3, #0
}
 80036ae:	4618      	mov	r0, r3
 80036b0:	3710      	adds	r7, #16
 80036b2:	46bd      	mov	sp, r7
 80036b4:	bd80      	pop	{r7, pc}
 80036b6:	bf00      	nop
 80036b8:	40023c00 	.word	0x40023c00
 80036bc:	40023800 	.word	0x40023800
 80036c0:	08007648 	.word	0x08007648
 80036c4:	20000004 	.word	0x20000004
 80036c8:	20000008 	.word	0x20000008

080036cc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80036cc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80036d0:	b090      	sub	sp, #64	; 0x40
 80036d2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80036d4:	2300      	movs	r3, #0
 80036d6:	637b      	str	r3, [r7, #52]	; 0x34
 80036d8:	2300      	movs	r3, #0
 80036da:	63fb      	str	r3, [r7, #60]	; 0x3c
 80036dc:	2300      	movs	r3, #0
 80036de:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 80036e0:	2300      	movs	r3, #0
 80036e2:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80036e4:	4b59      	ldr	r3, [pc, #356]	; (800384c <HAL_RCC_GetSysClockFreq+0x180>)
 80036e6:	689b      	ldr	r3, [r3, #8]
 80036e8:	f003 030c 	and.w	r3, r3, #12
 80036ec:	2b08      	cmp	r3, #8
 80036ee:	d00d      	beq.n	800370c <HAL_RCC_GetSysClockFreq+0x40>
 80036f0:	2b08      	cmp	r3, #8
 80036f2:	f200 80a1 	bhi.w	8003838 <HAL_RCC_GetSysClockFreq+0x16c>
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d002      	beq.n	8003700 <HAL_RCC_GetSysClockFreq+0x34>
 80036fa:	2b04      	cmp	r3, #4
 80036fc:	d003      	beq.n	8003706 <HAL_RCC_GetSysClockFreq+0x3a>
 80036fe:	e09b      	b.n	8003838 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003700:	4b53      	ldr	r3, [pc, #332]	; (8003850 <HAL_RCC_GetSysClockFreq+0x184>)
 8003702:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8003704:	e09b      	b.n	800383e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003706:	4b53      	ldr	r3, [pc, #332]	; (8003854 <HAL_RCC_GetSysClockFreq+0x188>)
 8003708:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800370a:	e098      	b.n	800383e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800370c:	4b4f      	ldr	r3, [pc, #316]	; (800384c <HAL_RCC_GetSysClockFreq+0x180>)
 800370e:	685b      	ldr	r3, [r3, #4]
 8003710:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003714:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003716:	4b4d      	ldr	r3, [pc, #308]	; (800384c <HAL_RCC_GetSysClockFreq+0x180>)
 8003718:	685b      	ldr	r3, [r3, #4]
 800371a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800371e:	2b00      	cmp	r3, #0
 8003720:	d028      	beq.n	8003774 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003722:	4b4a      	ldr	r3, [pc, #296]	; (800384c <HAL_RCC_GetSysClockFreq+0x180>)
 8003724:	685b      	ldr	r3, [r3, #4]
 8003726:	099b      	lsrs	r3, r3, #6
 8003728:	2200      	movs	r2, #0
 800372a:	623b      	str	r3, [r7, #32]
 800372c:	627a      	str	r2, [r7, #36]	; 0x24
 800372e:	6a3b      	ldr	r3, [r7, #32]
 8003730:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8003734:	2100      	movs	r1, #0
 8003736:	4b47      	ldr	r3, [pc, #284]	; (8003854 <HAL_RCC_GetSysClockFreq+0x188>)
 8003738:	fb03 f201 	mul.w	r2, r3, r1
 800373c:	2300      	movs	r3, #0
 800373e:	fb00 f303 	mul.w	r3, r0, r3
 8003742:	4413      	add	r3, r2
 8003744:	4a43      	ldr	r2, [pc, #268]	; (8003854 <HAL_RCC_GetSysClockFreq+0x188>)
 8003746:	fba0 1202 	umull	r1, r2, r0, r2
 800374a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800374c:	460a      	mov	r2, r1
 800374e:	62ba      	str	r2, [r7, #40]	; 0x28
 8003750:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003752:	4413      	add	r3, r2
 8003754:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003756:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003758:	2200      	movs	r2, #0
 800375a:	61bb      	str	r3, [r7, #24]
 800375c:	61fa      	str	r2, [r7, #28]
 800375e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003762:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8003766:	f7fd fa2f 	bl	8000bc8 <__aeabi_uldivmod>
 800376a:	4602      	mov	r2, r0
 800376c:	460b      	mov	r3, r1
 800376e:	4613      	mov	r3, r2
 8003770:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003772:	e053      	b.n	800381c <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003774:	4b35      	ldr	r3, [pc, #212]	; (800384c <HAL_RCC_GetSysClockFreq+0x180>)
 8003776:	685b      	ldr	r3, [r3, #4]
 8003778:	099b      	lsrs	r3, r3, #6
 800377a:	2200      	movs	r2, #0
 800377c:	613b      	str	r3, [r7, #16]
 800377e:	617a      	str	r2, [r7, #20]
 8003780:	693b      	ldr	r3, [r7, #16]
 8003782:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8003786:	f04f 0b00 	mov.w	fp, #0
 800378a:	4652      	mov	r2, sl
 800378c:	465b      	mov	r3, fp
 800378e:	f04f 0000 	mov.w	r0, #0
 8003792:	f04f 0100 	mov.w	r1, #0
 8003796:	0159      	lsls	r1, r3, #5
 8003798:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800379c:	0150      	lsls	r0, r2, #5
 800379e:	4602      	mov	r2, r0
 80037a0:	460b      	mov	r3, r1
 80037a2:	ebb2 080a 	subs.w	r8, r2, sl
 80037a6:	eb63 090b 	sbc.w	r9, r3, fp
 80037aa:	f04f 0200 	mov.w	r2, #0
 80037ae:	f04f 0300 	mov.w	r3, #0
 80037b2:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80037b6:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80037ba:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80037be:	ebb2 0408 	subs.w	r4, r2, r8
 80037c2:	eb63 0509 	sbc.w	r5, r3, r9
 80037c6:	f04f 0200 	mov.w	r2, #0
 80037ca:	f04f 0300 	mov.w	r3, #0
 80037ce:	00eb      	lsls	r3, r5, #3
 80037d0:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80037d4:	00e2      	lsls	r2, r4, #3
 80037d6:	4614      	mov	r4, r2
 80037d8:	461d      	mov	r5, r3
 80037da:	eb14 030a 	adds.w	r3, r4, sl
 80037de:	603b      	str	r3, [r7, #0]
 80037e0:	eb45 030b 	adc.w	r3, r5, fp
 80037e4:	607b      	str	r3, [r7, #4]
 80037e6:	f04f 0200 	mov.w	r2, #0
 80037ea:	f04f 0300 	mov.w	r3, #0
 80037ee:	e9d7 4500 	ldrd	r4, r5, [r7]
 80037f2:	4629      	mov	r1, r5
 80037f4:	028b      	lsls	r3, r1, #10
 80037f6:	4621      	mov	r1, r4
 80037f8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80037fc:	4621      	mov	r1, r4
 80037fe:	028a      	lsls	r2, r1, #10
 8003800:	4610      	mov	r0, r2
 8003802:	4619      	mov	r1, r3
 8003804:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003806:	2200      	movs	r2, #0
 8003808:	60bb      	str	r3, [r7, #8]
 800380a:	60fa      	str	r2, [r7, #12]
 800380c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003810:	f7fd f9da 	bl	8000bc8 <__aeabi_uldivmod>
 8003814:	4602      	mov	r2, r0
 8003816:	460b      	mov	r3, r1
 8003818:	4613      	mov	r3, r2
 800381a:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800381c:	4b0b      	ldr	r3, [pc, #44]	; (800384c <HAL_RCC_GetSysClockFreq+0x180>)
 800381e:	685b      	ldr	r3, [r3, #4]
 8003820:	0c1b      	lsrs	r3, r3, #16
 8003822:	f003 0303 	and.w	r3, r3, #3
 8003826:	3301      	adds	r3, #1
 8003828:	005b      	lsls	r3, r3, #1
 800382a:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 800382c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800382e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003830:	fbb2 f3f3 	udiv	r3, r2, r3
 8003834:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003836:	e002      	b.n	800383e <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003838:	4b05      	ldr	r3, [pc, #20]	; (8003850 <HAL_RCC_GetSysClockFreq+0x184>)
 800383a:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800383c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800383e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8003840:	4618      	mov	r0, r3
 8003842:	3740      	adds	r7, #64	; 0x40
 8003844:	46bd      	mov	sp, r7
 8003846:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800384a:	bf00      	nop
 800384c:	40023800 	.word	0x40023800
 8003850:	00f42400 	.word	0x00f42400
 8003854:	017d7840 	.word	0x017d7840

08003858 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003858:	b480      	push	{r7}
 800385a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800385c:	4b03      	ldr	r3, [pc, #12]	; (800386c <HAL_RCC_GetHCLKFreq+0x14>)
 800385e:	681b      	ldr	r3, [r3, #0]
}
 8003860:	4618      	mov	r0, r3
 8003862:	46bd      	mov	sp, r7
 8003864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003868:	4770      	bx	lr
 800386a:	bf00      	nop
 800386c:	20000004 	.word	0x20000004

08003870 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003870:	b580      	push	{r7, lr}
 8003872:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003874:	f7ff fff0 	bl	8003858 <HAL_RCC_GetHCLKFreq>
 8003878:	4602      	mov	r2, r0
 800387a:	4b05      	ldr	r3, [pc, #20]	; (8003890 <HAL_RCC_GetPCLK1Freq+0x20>)
 800387c:	689b      	ldr	r3, [r3, #8]
 800387e:	0a9b      	lsrs	r3, r3, #10
 8003880:	f003 0307 	and.w	r3, r3, #7
 8003884:	4903      	ldr	r1, [pc, #12]	; (8003894 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003886:	5ccb      	ldrb	r3, [r1, r3]
 8003888:	fa22 f303 	lsr.w	r3, r2, r3
}
 800388c:	4618      	mov	r0, r3
 800388e:	bd80      	pop	{r7, pc}
 8003890:	40023800 	.word	0x40023800
 8003894:	08007658 	.word	0x08007658

08003898 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003898:	b580      	push	{r7, lr}
 800389a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800389c:	f7ff ffdc 	bl	8003858 <HAL_RCC_GetHCLKFreq>
 80038a0:	4602      	mov	r2, r0
 80038a2:	4b05      	ldr	r3, [pc, #20]	; (80038b8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80038a4:	689b      	ldr	r3, [r3, #8]
 80038a6:	0b5b      	lsrs	r3, r3, #13
 80038a8:	f003 0307 	and.w	r3, r3, #7
 80038ac:	4903      	ldr	r1, [pc, #12]	; (80038bc <HAL_RCC_GetPCLK2Freq+0x24>)
 80038ae:	5ccb      	ldrb	r3, [r1, r3]
 80038b0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80038b4:	4618      	mov	r0, r3
 80038b6:	bd80      	pop	{r7, pc}
 80038b8:	40023800 	.word	0x40023800
 80038bc:	08007658 	.word	0x08007658

080038c0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80038c0:	b580      	push	{r7, lr}
 80038c2:	b082      	sub	sp, #8
 80038c4:	af00      	add	r7, sp, #0
 80038c6:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	d101      	bne.n	80038d2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80038ce:	2301      	movs	r3, #1
 80038d0:	e07b      	b.n	80039ca <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	d108      	bne.n	80038ec <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	685b      	ldr	r3, [r3, #4]
 80038de:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80038e2:	d009      	beq.n	80038f8 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	2200      	movs	r2, #0
 80038e8:	61da      	str	r2, [r3, #28]
 80038ea:	e005      	b.n	80038f8 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	2200      	movs	r2, #0
 80038f0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	2200      	movs	r2, #0
 80038f6:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	2200      	movs	r2, #0
 80038fc:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003904:	b2db      	uxtb	r3, r3
 8003906:	2b00      	cmp	r3, #0
 8003908:	d106      	bne.n	8003918 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	2200      	movs	r2, #0
 800390e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003912:	6878      	ldr	r0, [r7, #4]
 8003914:	f7fe f9b8 	bl	8001c88 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	2202      	movs	r2, #2
 800391c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	681a      	ldr	r2, [r3, #0]
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800392e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	685b      	ldr	r3, [r3, #4]
 8003934:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	689b      	ldr	r3, [r3, #8]
 800393c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8003940:	431a      	orrs	r2, r3
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	68db      	ldr	r3, [r3, #12]
 8003946:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800394a:	431a      	orrs	r2, r3
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	691b      	ldr	r3, [r3, #16]
 8003950:	f003 0302 	and.w	r3, r3, #2
 8003954:	431a      	orrs	r2, r3
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	695b      	ldr	r3, [r3, #20]
 800395a:	f003 0301 	and.w	r3, r3, #1
 800395e:	431a      	orrs	r2, r3
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	699b      	ldr	r3, [r3, #24]
 8003964:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003968:	431a      	orrs	r2, r3
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	69db      	ldr	r3, [r3, #28]
 800396e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003972:	431a      	orrs	r2, r3
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	6a1b      	ldr	r3, [r3, #32]
 8003978:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800397c:	ea42 0103 	orr.w	r1, r2, r3
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003984:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	430a      	orrs	r2, r1
 800398e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	699b      	ldr	r3, [r3, #24]
 8003994:	0c1b      	lsrs	r3, r3, #16
 8003996:	f003 0104 	and.w	r1, r3, #4
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800399e:	f003 0210 	and.w	r2, r3, #16
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	430a      	orrs	r2, r1
 80039a8:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	69da      	ldr	r2, [r3, #28]
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80039b8:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	2200      	movs	r2, #0
 80039be:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	2201      	movs	r2, #1
 80039c4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80039c8:	2300      	movs	r3, #0
}
 80039ca:	4618      	mov	r0, r3
 80039cc:	3708      	adds	r7, #8
 80039ce:	46bd      	mov	sp, r7
 80039d0:	bd80      	pop	{r7, pc}

080039d2 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80039d2:	b580      	push	{r7, lr}
 80039d4:	b08c      	sub	sp, #48	; 0x30
 80039d6:	af00      	add	r7, sp, #0
 80039d8:	60f8      	str	r0, [r7, #12]
 80039da:	60b9      	str	r1, [r7, #8]
 80039dc:	607a      	str	r2, [r7, #4]
 80039de:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80039e0:	2301      	movs	r3, #1
 80039e2:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80039e4:	2300      	movs	r3, #0
 80039e6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80039ea:	68fb      	ldr	r3, [r7, #12]
 80039ec:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80039f0:	2b01      	cmp	r3, #1
 80039f2:	d101      	bne.n	80039f8 <HAL_SPI_TransmitReceive+0x26>
 80039f4:	2302      	movs	r3, #2
 80039f6:	e18a      	b.n	8003d0e <HAL_SPI_TransmitReceive+0x33c>
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	2201      	movs	r2, #1
 80039fc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003a00:	f7fe fb64 	bl	80020cc <HAL_GetTick>
 8003a04:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003a0c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	685b      	ldr	r3, [r3, #4]
 8003a14:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8003a16:	887b      	ldrh	r3, [r7, #2]
 8003a18:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8003a1a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003a1e:	2b01      	cmp	r3, #1
 8003a20:	d00f      	beq.n	8003a42 <HAL_SPI_TransmitReceive+0x70>
 8003a22:	69fb      	ldr	r3, [r7, #28]
 8003a24:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003a28:	d107      	bne.n	8003a3a <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8003a2a:	68fb      	ldr	r3, [r7, #12]
 8003a2c:	689b      	ldr	r3, [r3, #8]
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	d103      	bne.n	8003a3a <HAL_SPI_TransmitReceive+0x68>
 8003a32:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003a36:	2b04      	cmp	r3, #4
 8003a38:	d003      	beq.n	8003a42 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8003a3a:	2302      	movs	r3, #2
 8003a3c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8003a40:	e15b      	b.n	8003cfa <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8003a42:	68bb      	ldr	r3, [r7, #8]
 8003a44:	2b00      	cmp	r3, #0
 8003a46:	d005      	beq.n	8003a54 <HAL_SPI_TransmitReceive+0x82>
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	d002      	beq.n	8003a54 <HAL_SPI_TransmitReceive+0x82>
 8003a4e:	887b      	ldrh	r3, [r7, #2]
 8003a50:	2b00      	cmp	r3, #0
 8003a52:	d103      	bne.n	8003a5c <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8003a54:	2301      	movs	r3, #1
 8003a56:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8003a5a:	e14e      	b.n	8003cfa <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003a62:	b2db      	uxtb	r3, r3
 8003a64:	2b04      	cmp	r3, #4
 8003a66:	d003      	beq.n	8003a70 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	2205      	movs	r2, #5
 8003a6c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	2200      	movs	r2, #0
 8003a74:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8003a76:	68fb      	ldr	r3, [r7, #12]
 8003a78:	687a      	ldr	r2, [r7, #4]
 8003a7a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	887a      	ldrh	r2, [r7, #2]
 8003a80:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8003a82:	68fb      	ldr	r3, [r7, #12]
 8003a84:	887a      	ldrh	r2, [r7, #2]
 8003a86:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	68ba      	ldr	r2, [r7, #8]
 8003a8c:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	887a      	ldrh	r2, [r7, #2]
 8003a92:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	887a      	ldrh	r2, [r7, #2]
 8003a98:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8003a9a:	68fb      	ldr	r3, [r7, #12]
 8003a9c:	2200      	movs	r2, #0
 8003a9e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	2200      	movs	r2, #0
 8003aa4:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ab0:	2b40      	cmp	r3, #64	; 0x40
 8003ab2:	d007      	beq.n	8003ac4 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	681a      	ldr	r2, [r3, #0]
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003ac2:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	68db      	ldr	r3, [r3, #12]
 8003ac8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003acc:	d178      	bne.n	8003bc0 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	685b      	ldr	r3, [r3, #4]
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	d002      	beq.n	8003adc <HAL_SPI_TransmitReceive+0x10a>
 8003ad6:	8b7b      	ldrh	r3, [r7, #26]
 8003ad8:	2b01      	cmp	r3, #1
 8003ada:	d166      	bne.n	8003baa <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ae0:	881a      	ldrh	r2, [r3, #0]
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003aec:	1c9a      	adds	r2, r3, #2
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003af6:	b29b      	uxth	r3, r3
 8003af8:	3b01      	subs	r3, #1
 8003afa:	b29a      	uxth	r2, r3
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003b00:	e053      	b.n	8003baa <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	689b      	ldr	r3, [r3, #8]
 8003b08:	f003 0302 	and.w	r3, r3, #2
 8003b0c:	2b02      	cmp	r3, #2
 8003b0e:	d11b      	bne.n	8003b48 <HAL_SPI_TransmitReceive+0x176>
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003b14:	b29b      	uxth	r3, r3
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	d016      	beq.n	8003b48 <HAL_SPI_TransmitReceive+0x176>
 8003b1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b1c:	2b01      	cmp	r3, #1
 8003b1e:	d113      	bne.n	8003b48 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b24:	881a      	ldrh	r2, [r3, #0]
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b30:	1c9a      	adds	r2, r3, #2
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003b3a:	b29b      	uxth	r3, r3
 8003b3c:	3b01      	subs	r3, #1
 8003b3e:	b29a      	uxth	r2, r3
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003b44:	2300      	movs	r3, #0
 8003b46:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	689b      	ldr	r3, [r3, #8]
 8003b4e:	f003 0301 	and.w	r3, r3, #1
 8003b52:	2b01      	cmp	r3, #1
 8003b54:	d119      	bne.n	8003b8a <HAL_SPI_TransmitReceive+0x1b8>
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003b5a:	b29b      	uxth	r3, r3
 8003b5c:	2b00      	cmp	r3, #0
 8003b5e:	d014      	beq.n	8003b8a <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	68da      	ldr	r2, [r3, #12]
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b6a:	b292      	uxth	r2, r2
 8003b6c:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b72:	1c9a      	adds	r2, r3, #2
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003b7c:	b29b      	uxth	r3, r3
 8003b7e:	3b01      	subs	r3, #1
 8003b80:	b29a      	uxth	r2, r3
 8003b82:	68fb      	ldr	r3, [r7, #12]
 8003b84:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003b86:	2301      	movs	r3, #1
 8003b88:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8003b8a:	f7fe fa9f 	bl	80020cc <HAL_GetTick>
 8003b8e:	4602      	mov	r2, r0
 8003b90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b92:	1ad3      	subs	r3, r2, r3
 8003b94:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003b96:	429a      	cmp	r2, r3
 8003b98:	d807      	bhi.n	8003baa <HAL_SPI_TransmitReceive+0x1d8>
 8003b9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003b9c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003ba0:	d003      	beq.n	8003baa <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8003ba2:	2303      	movs	r3, #3
 8003ba4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8003ba8:	e0a7      	b.n	8003cfa <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003bae:	b29b      	uxth	r3, r3
 8003bb0:	2b00      	cmp	r3, #0
 8003bb2:	d1a6      	bne.n	8003b02 <HAL_SPI_TransmitReceive+0x130>
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003bb8:	b29b      	uxth	r3, r3
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	d1a1      	bne.n	8003b02 <HAL_SPI_TransmitReceive+0x130>
 8003bbe:	e07c      	b.n	8003cba <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	685b      	ldr	r3, [r3, #4]
 8003bc4:	2b00      	cmp	r3, #0
 8003bc6:	d002      	beq.n	8003bce <HAL_SPI_TransmitReceive+0x1fc>
 8003bc8:	8b7b      	ldrh	r3, [r7, #26]
 8003bca:	2b01      	cmp	r3, #1
 8003bcc:	d16b      	bne.n	8003ca6 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003bce:	68fb      	ldr	r3, [r7, #12]
 8003bd0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	330c      	adds	r3, #12
 8003bd8:	7812      	ldrb	r2, [r2, #0]
 8003bda:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003be0:	1c5a      	adds	r2, r3, #1
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003bea:	b29b      	uxth	r3, r3
 8003bec:	3b01      	subs	r3, #1
 8003bee:	b29a      	uxth	r2, r3
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003bf4:	e057      	b.n	8003ca6 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	689b      	ldr	r3, [r3, #8]
 8003bfc:	f003 0302 	and.w	r3, r3, #2
 8003c00:	2b02      	cmp	r3, #2
 8003c02:	d11c      	bne.n	8003c3e <HAL_SPI_TransmitReceive+0x26c>
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003c08:	b29b      	uxth	r3, r3
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	d017      	beq.n	8003c3e <HAL_SPI_TransmitReceive+0x26c>
 8003c0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c10:	2b01      	cmp	r3, #1
 8003c12:	d114      	bne.n	8003c3e <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	330c      	adds	r3, #12
 8003c1e:	7812      	ldrb	r2, [r2, #0]
 8003c20:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c26:	1c5a      	adds	r2, r3, #1
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003c30:	b29b      	uxth	r3, r3
 8003c32:	3b01      	subs	r3, #1
 8003c34:	b29a      	uxth	r2, r3
 8003c36:	68fb      	ldr	r3, [r7, #12]
 8003c38:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003c3a:	2300      	movs	r3, #0
 8003c3c:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	689b      	ldr	r3, [r3, #8]
 8003c44:	f003 0301 	and.w	r3, r3, #1
 8003c48:	2b01      	cmp	r3, #1
 8003c4a:	d119      	bne.n	8003c80 <HAL_SPI_TransmitReceive+0x2ae>
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003c50:	b29b      	uxth	r3, r3
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	d014      	beq.n	8003c80 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	68da      	ldr	r2, [r3, #12]
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c60:	b2d2      	uxtb	r2, r2
 8003c62:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c68:	1c5a      	adds	r2, r3, #1
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003c6e:	68fb      	ldr	r3, [r7, #12]
 8003c70:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003c72:	b29b      	uxth	r3, r3
 8003c74:	3b01      	subs	r3, #1
 8003c76:	b29a      	uxth	r2, r3
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003c7c:	2301      	movs	r3, #1
 8003c7e:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8003c80:	f7fe fa24 	bl	80020cc <HAL_GetTick>
 8003c84:	4602      	mov	r2, r0
 8003c86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c88:	1ad3      	subs	r3, r2, r3
 8003c8a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003c8c:	429a      	cmp	r2, r3
 8003c8e:	d803      	bhi.n	8003c98 <HAL_SPI_TransmitReceive+0x2c6>
 8003c90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c92:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003c96:	d102      	bne.n	8003c9e <HAL_SPI_TransmitReceive+0x2cc>
 8003c98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	d103      	bne.n	8003ca6 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8003c9e:	2303      	movs	r3, #3
 8003ca0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8003ca4:	e029      	b.n	8003cfa <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003ca6:	68fb      	ldr	r3, [r7, #12]
 8003ca8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003caa:	b29b      	uxth	r3, r3
 8003cac:	2b00      	cmp	r3, #0
 8003cae:	d1a2      	bne.n	8003bf6 <HAL_SPI_TransmitReceive+0x224>
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003cb4:	b29b      	uxth	r3, r3
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	d19d      	bne.n	8003bf6 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003cba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003cbc:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003cbe:	68f8      	ldr	r0, [r7, #12]
 8003cc0:	f000 f8b2 	bl	8003e28 <SPI_EndRxTxTransaction>
 8003cc4:	4603      	mov	r3, r0
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d006      	beq.n	8003cd8 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8003cca:	2301      	movs	r3, #1
 8003ccc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	2220      	movs	r2, #32
 8003cd4:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8003cd6:	e010      	b.n	8003cfa <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	689b      	ldr	r3, [r3, #8]
 8003cdc:	2b00      	cmp	r3, #0
 8003cde:	d10b      	bne.n	8003cf8 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003ce0:	2300      	movs	r3, #0
 8003ce2:	617b      	str	r3, [r7, #20]
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	68db      	ldr	r3, [r3, #12]
 8003cea:	617b      	str	r3, [r7, #20]
 8003cec:	68fb      	ldr	r3, [r7, #12]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	689b      	ldr	r3, [r3, #8]
 8003cf2:	617b      	str	r3, [r7, #20]
 8003cf4:	697b      	ldr	r3, [r7, #20]
 8003cf6:	e000      	b.n	8003cfa <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8003cf8:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003cfa:	68fb      	ldr	r3, [r7, #12]
 8003cfc:	2201      	movs	r2, #1
 8003cfe:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8003d02:	68fb      	ldr	r3, [r7, #12]
 8003d04:	2200      	movs	r2, #0
 8003d06:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8003d0a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8003d0e:	4618      	mov	r0, r3
 8003d10:	3730      	adds	r7, #48	; 0x30
 8003d12:	46bd      	mov	sp, r7
 8003d14:	bd80      	pop	{r7, pc}
	...

08003d18 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003d18:	b580      	push	{r7, lr}
 8003d1a:	b088      	sub	sp, #32
 8003d1c:	af00      	add	r7, sp, #0
 8003d1e:	60f8      	str	r0, [r7, #12]
 8003d20:	60b9      	str	r1, [r7, #8]
 8003d22:	603b      	str	r3, [r7, #0]
 8003d24:	4613      	mov	r3, r2
 8003d26:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003d28:	f7fe f9d0 	bl	80020cc <HAL_GetTick>
 8003d2c:	4602      	mov	r2, r0
 8003d2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d30:	1a9b      	subs	r3, r3, r2
 8003d32:	683a      	ldr	r2, [r7, #0]
 8003d34:	4413      	add	r3, r2
 8003d36:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003d38:	f7fe f9c8 	bl	80020cc <HAL_GetTick>
 8003d3c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8003d3e:	4b39      	ldr	r3, [pc, #228]	; (8003e24 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	015b      	lsls	r3, r3, #5
 8003d44:	0d1b      	lsrs	r3, r3, #20
 8003d46:	69fa      	ldr	r2, [r7, #28]
 8003d48:	fb02 f303 	mul.w	r3, r2, r3
 8003d4c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003d4e:	e054      	b.n	8003dfa <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003d50:	683b      	ldr	r3, [r7, #0]
 8003d52:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003d56:	d050      	beq.n	8003dfa <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003d58:	f7fe f9b8 	bl	80020cc <HAL_GetTick>
 8003d5c:	4602      	mov	r2, r0
 8003d5e:	69bb      	ldr	r3, [r7, #24]
 8003d60:	1ad3      	subs	r3, r2, r3
 8003d62:	69fa      	ldr	r2, [r7, #28]
 8003d64:	429a      	cmp	r2, r3
 8003d66:	d902      	bls.n	8003d6e <SPI_WaitFlagStateUntilTimeout+0x56>
 8003d68:	69fb      	ldr	r3, [r7, #28]
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	d13d      	bne.n	8003dea <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003d6e:	68fb      	ldr	r3, [r7, #12]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	685a      	ldr	r2, [r3, #4]
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003d7c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	685b      	ldr	r3, [r3, #4]
 8003d82:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003d86:	d111      	bne.n	8003dac <SPI_WaitFlagStateUntilTimeout+0x94>
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	689b      	ldr	r3, [r3, #8]
 8003d8c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003d90:	d004      	beq.n	8003d9c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	689b      	ldr	r3, [r3, #8]
 8003d96:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003d9a:	d107      	bne.n	8003dac <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	681a      	ldr	r2, [r3, #0]
 8003da2:	68fb      	ldr	r3, [r7, #12]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003daa:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003db0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003db4:	d10f      	bne.n	8003dd6 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	681a      	ldr	r2, [r3, #0]
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003dc4:	601a      	str	r2, [r3, #0]
 8003dc6:	68fb      	ldr	r3, [r7, #12]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	681a      	ldr	r2, [r3, #0]
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003dd4:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	2201      	movs	r2, #1
 8003dda:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	2200      	movs	r2, #0
 8003de2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8003de6:	2303      	movs	r3, #3
 8003de8:	e017      	b.n	8003e1a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8003dea:	697b      	ldr	r3, [r7, #20]
 8003dec:	2b00      	cmp	r3, #0
 8003dee:	d101      	bne.n	8003df4 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8003df0:	2300      	movs	r3, #0
 8003df2:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8003df4:	697b      	ldr	r3, [r7, #20]
 8003df6:	3b01      	subs	r3, #1
 8003df8:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	689a      	ldr	r2, [r3, #8]
 8003e00:	68bb      	ldr	r3, [r7, #8]
 8003e02:	4013      	ands	r3, r2
 8003e04:	68ba      	ldr	r2, [r7, #8]
 8003e06:	429a      	cmp	r2, r3
 8003e08:	bf0c      	ite	eq
 8003e0a:	2301      	moveq	r3, #1
 8003e0c:	2300      	movne	r3, #0
 8003e0e:	b2db      	uxtb	r3, r3
 8003e10:	461a      	mov	r2, r3
 8003e12:	79fb      	ldrb	r3, [r7, #7]
 8003e14:	429a      	cmp	r2, r3
 8003e16:	d19b      	bne.n	8003d50 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8003e18:	2300      	movs	r3, #0
}
 8003e1a:	4618      	mov	r0, r3
 8003e1c:	3720      	adds	r7, #32
 8003e1e:	46bd      	mov	sp, r7
 8003e20:	bd80      	pop	{r7, pc}
 8003e22:	bf00      	nop
 8003e24:	20000004 	.word	0x20000004

08003e28 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003e28:	b580      	push	{r7, lr}
 8003e2a:	b088      	sub	sp, #32
 8003e2c:	af02      	add	r7, sp, #8
 8003e2e:	60f8      	str	r0, [r7, #12]
 8003e30:	60b9      	str	r1, [r7, #8]
 8003e32:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8003e34:	4b1b      	ldr	r3, [pc, #108]	; (8003ea4 <SPI_EndRxTxTransaction+0x7c>)
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	4a1b      	ldr	r2, [pc, #108]	; (8003ea8 <SPI_EndRxTxTransaction+0x80>)
 8003e3a:	fba2 2303 	umull	r2, r3, r2, r3
 8003e3e:	0d5b      	lsrs	r3, r3, #21
 8003e40:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003e44:	fb02 f303 	mul.w	r3, r2, r3
 8003e48:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	685b      	ldr	r3, [r3, #4]
 8003e4e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003e52:	d112      	bne.n	8003e7a <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	9300      	str	r3, [sp, #0]
 8003e58:	68bb      	ldr	r3, [r7, #8]
 8003e5a:	2200      	movs	r2, #0
 8003e5c:	2180      	movs	r1, #128	; 0x80
 8003e5e:	68f8      	ldr	r0, [r7, #12]
 8003e60:	f7ff ff5a 	bl	8003d18 <SPI_WaitFlagStateUntilTimeout>
 8003e64:	4603      	mov	r3, r0
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	d016      	beq.n	8003e98 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003e6a:	68fb      	ldr	r3, [r7, #12]
 8003e6c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e6e:	f043 0220 	orr.w	r2, r3, #32
 8003e72:	68fb      	ldr	r3, [r7, #12]
 8003e74:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8003e76:	2303      	movs	r3, #3
 8003e78:	e00f      	b.n	8003e9a <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8003e7a:	697b      	ldr	r3, [r7, #20]
 8003e7c:	2b00      	cmp	r3, #0
 8003e7e:	d00a      	beq.n	8003e96 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8003e80:	697b      	ldr	r3, [r7, #20]
 8003e82:	3b01      	subs	r3, #1
 8003e84:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	689b      	ldr	r3, [r3, #8]
 8003e8c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003e90:	2b80      	cmp	r3, #128	; 0x80
 8003e92:	d0f2      	beq.n	8003e7a <SPI_EndRxTxTransaction+0x52>
 8003e94:	e000      	b.n	8003e98 <SPI_EndRxTxTransaction+0x70>
        break;
 8003e96:	bf00      	nop
  }

  return HAL_OK;
 8003e98:	2300      	movs	r3, #0
}
 8003e9a:	4618      	mov	r0, r3
 8003e9c:	3718      	adds	r7, #24
 8003e9e:	46bd      	mov	sp, r7
 8003ea0:	bd80      	pop	{r7, pc}
 8003ea2:	bf00      	nop
 8003ea4:	20000004 	.word	0x20000004
 8003ea8:	165e9f81 	.word	0x165e9f81

08003eac <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003eac:	b580      	push	{r7, lr}
 8003eae:	b082      	sub	sp, #8
 8003eb0:	af00      	add	r7, sp, #0
 8003eb2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	d101      	bne.n	8003ebe <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003eba:	2301      	movs	r3, #1
 8003ebc:	e03f      	b.n	8003f3e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003ec4:	b2db      	uxtb	r3, r3
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	d106      	bne.n	8003ed8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	2200      	movs	r2, #0
 8003ece:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003ed2:	6878      	ldr	r0, [r7, #4]
 8003ed4:	f7fd ff20 	bl	8001d18 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	2224      	movs	r2, #36	; 0x24
 8003edc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	68da      	ldr	r2, [r3, #12]
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003eee:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003ef0:	6878      	ldr	r0, [r7, #4]
 8003ef2:	f000 f929 	bl	8004148 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	691a      	ldr	r2, [r3, #16]
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003f04:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	695a      	ldr	r2, [r3, #20]
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003f14:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	68da      	ldr	r2, [r3, #12]
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003f24:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	2200      	movs	r2, #0
 8003f2a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	2220      	movs	r2, #32
 8003f30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	2220      	movs	r2, #32
 8003f38:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003f3c:	2300      	movs	r3, #0
}
 8003f3e:	4618      	mov	r0, r3
 8003f40:	3708      	adds	r7, #8
 8003f42:	46bd      	mov	sp, r7
 8003f44:	bd80      	pop	{r7, pc}

08003f46 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003f46:	b580      	push	{r7, lr}
 8003f48:	b08a      	sub	sp, #40	; 0x28
 8003f4a:	af02      	add	r7, sp, #8
 8003f4c:	60f8      	str	r0, [r7, #12]
 8003f4e:	60b9      	str	r1, [r7, #8]
 8003f50:	603b      	str	r3, [r7, #0]
 8003f52:	4613      	mov	r3, r2
 8003f54:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003f56:	2300      	movs	r3, #0
 8003f58:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003f5a:	68fb      	ldr	r3, [r7, #12]
 8003f5c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003f60:	b2db      	uxtb	r3, r3
 8003f62:	2b20      	cmp	r3, #32
 8003f64:	d17c      	bne.n	8004060 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003f66:	68bb      	ldr	r3, [r7, #8]
 8003f68:	2b00      	cmp	r3, #0
 8003f6a:	d002      	beq.n	8003f72 <HAL_UART_Transmit+0x2c>
 8003f6c:	88fb      	ldrh	r3, [r7, #6]
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	d101      	bne.n	8003f76 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003f72:	2301      	movs	r3, #1
 8003f74:	e075      	b.n	8004062 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003f76:	68fb      	ldr	r3, [r7, #12]
 8003f78:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003f7c:	2b01      	cmp	r3, #1
 8003f7e:	d101      	bne.n	8003f84 <HAL_UART_Transmit+0x3e>
 8003f80:	2302      	movs	r3, #2
 8003f82:	e06e      	b.n	8004062 <HAL_UART_Transmit+0x11c>
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	2201      	movs	r2, #1
 8003f88:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	2200      	movs	r2, #0
 8003f90:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003f92:	68fb      	ldr	r3, [r7, #12]
 8003f94:	2221      	movs	r2, #33	; 0x21
 8003f96:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003f9a:	f7fe f897 	bl	80020cc <HAL_GetTick>
 8003f9e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	88fa      	ldrh	r2, [r7, #6]
 8003fa4:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	88fa      	ldrh	r2, [r7, #6]
 8003faa:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	689b      	ldr	r3, [r3, #8]
 8003fb0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003fb4:	d108      	bne.n	8003fc8 <HAL_UART_Transmit+0x82>
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	691b      	ldr	r3, [r3, #16]
 8003fba:	2b00      	cmp	r3, #0
 8003fbc:	d104      	bne.n	8003fc8 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8003fbe:	2300      	movs	r3, #0
 8003fc0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003fc2:	68bb      	ldr	r3, [r7, #8]
 8003fc4:	61bb      	str	r3, [r7, #24]
 8003fc6:	e003      	b.n	8003fd0 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8003fc8:	68bb      	ldr	r3, [r7, #8]
 8003fca:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003fcc:	2300      	movs	r3, #0
 8003fce:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	2200      	movs	r2, #0
 8003fd4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8003fd8:	e02a      	b.n	8004030 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003fda:	683b      	ldr	r3, [r7, #0]
 8003fdc:	9300      	str	r3, [sp, #0]
 8003fde:	697b      	ldr	r3, [r7, #20]
 8003fe0:	2200      	movs	r2, #0
 8003fe2:	2180      	movs	r1, #128	; 0x80
 8003fe4:	68f8      	ldr	r0, [r7, #12]
 8003fe6:	f000 f840 	bl	800406a <UART_WaitOnFlagUntilTimeout>
 8003fea:	4603      	mov	r3, r0
 8003fec:	2b00      	cmp	r3, #0
 8003fee:	d001      	beq.n	8003ff4 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8003ff0:	2303      	movs	r3, #3
 8003ff2:	e036      	b.n	8004062 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8003ff4:	69fb      	ldr	r3, [r7, #28]
 8003ff6:	2b00      	cmp	r3, #0
 8003ff8:	d10b      	bne.n	8004012 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003ffa:	69bb      	ldr	r3, [r7, #24]
 8003ffc:	881b      	ldrh	r3, [r3, #0]
 8003ffe:	461a      	mov	r2, r3
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004008:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800400a:	69bb      	ldr	r3, [r7, #24]
 800400c:	3302      	adds	r3, #2
 800400e:	61bb      	str	r3, [r7, #24]
 8004010:	e007      	b.n	8004022 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8004012:	69fb      	ldr	r3, [r7, #28]
 8004014:	781a      	ldrb	r2, [r3, #0]
 8004016:	68fb      	ldr	r3, [r7, #12]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800401c:	69fb      	ldr	r3, [r7, #28]
 800401e:	3301      	adds	r3, #1
 8004020:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004022:	68fb      	ldr	r3, [r7, #12]
 8004024:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004026:	b29b      	uxth	r3, r3
 8004028:	3b01      	subs	r3, #1
 800402a:	b29a      	uxth	r2, r3
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004034:	b29b      	uxth	r3, r3
 8004036:	2b00      	cmp	r3, #0
 8004038:	d1cf      	bne.n	8003fda <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800403a:	683b      	ldr	r3, [r7, #0]
 800403c:	9300      	str	r3, [sp, #0]
 800403e:	697b      	ldr	r3, [r7, #20]
 8004040:	2200      	movs	r2, #0
 8004042:	2140      	movs	r1, #64	; 0x40
 8004044:	68f8      	ldr	r0, [r7, #12]
 8004046:	f000 f810 	bl	800406a <UART_WaitOnFlagUntilTimeout>
 800404a:	4603      	mov	r3, r0
 800404c:	2b00      	cmp	r3, #0
 800404e:	d001      	beq.n	8004054 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8004050:	2303      	movs	r3, #3
 8004052:	e006      	b.n	8004062 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	2220      	movs	r2, #32
 8004058:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800405c:	2300      	movs	r3, #0
 800405e:	e000      	b.n	8004062 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8004060:	2302      	movs	r3, #2
  }
}
 8004062:	4618      	mov	r0, r3
 8004064:	3720      	adds	r7, #32
 8004066:	46bd      	mov	sp, r7
 8004068:	bd80      	pop	{r7, pc}

0800406a <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800406a:	b580      	push	{r7, lr}
 800406c:	b090      	sub	sp, #64	; 0x40
 800406e:	af00      	add	r7, sp, #0
 8004070:	60f8      	str	r0, [r7, #12]
 8004072:	60b9      	str	r1, [r7, #8]
 8004074:	603b      	str	r3, [r7, #0]
 8004076:	4613      	mov	r3, r2
 8004078:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800407a:	e050      	b.n	800411e <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800407c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800407e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004082:	d04c      	beq.n	800411e <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8004084:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004086:	2b00      	cmp	r3, #0
 8004088:	d007      	beq.n	800409a <UART_WaitOnFlagUntilTimeout+0x30>
 800408a:	f7fe f81f 	bl	80020cc <HAL_GetTick>
 800408e:	4602      	mov	r2, r0
 8004090:	683b      	ldr	r3, [r7, #0]
 8004092:	1ad3      	subs	r3, r2, r3
 8004094:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004096:	429a      	cmp	r2, r3
 8004098:	d241      	bcs.n	800411e <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800409a:	68fb      	ldr	r3, [r7, #12]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	330c      	adds	r3, #12
 80040a0:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80040a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80040a4:	e853 3f00 	ldrex	r3, [r3]
 80040a8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80040aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040ac:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80040b0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	330c      	adds	r3, #12
 80040b8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80040ba:	637a      	str	r2, [r7, #52]	; 0x34
 80040bc:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80040be:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80040c0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80040c2:	e841 2300 	strex	r3, r2, [r1]
 80040c6:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80040c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	d1e5      	bne.n	800409a <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	3314      	adds	r3, #20
 80040d4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80040d6:	697b      	ldr	r3, [r7, #20]
 80040d8:	e853 3f00 	ldrex	r3, [r3]
 80040dc:	613b      	str	r3, [r7, #16]
   return(result);
 80040de:	693b      	ldr	r3, [r7, #16]
 80040e0:	f023 0301 	bic.w	r3, r3, #1
 80040e4:	63bb      	str	r3, [r7, #56]	; 0x38
 80040e6:	68fb      	ldr	r3, [r7, #12]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	3314      	adds	r3, #20
 80040ec:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80040ee:	623a      	str	r2, [r7, #32]
 80040f0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80040f2:	69f9      	ldr	r1, [r7, #28]
 80040f4:	6a3a      	ldr	r2, [r7, #32]
 80040f6:	e841 2300 	strex	r3, r2, [r1]
 80040fa:	61bb      	str	r3, [r7, #24]
   return(result);
 80040fc:	69bb      	ldr	r3, [r7, #24]
 80040fe:	2b00      	cmp	r3, #0
 8004100:	d1e5      	bne.n	80040ce <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8004102:	68fb      	ldr	r3, [r7, #12]
 8004104:	2220      	movs	r2, #32
 8004106:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	2220      	movs	r2, #32
 800410e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8004112:	68fb      	ldr	r3, [r7, #12]
 8004114:	2200      	movs	r2, #0
 8004116:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800411a:	2303      	movs	r3, #3
 800411c:	e00f      	b.n	800413e <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	681a      	ldr	r2, [r3, #0]
 8004124:	68bb      	ldr	r3, [r7, #8]
 8004126:	4013      	ands	r3, r2
 8004128:	68ba      	ldr	r2, [r7, #8]
 800412a:	429a      	cmp	r2, r3
 800412c:	bf0c      	ite	eq
 800412e:	2301      	moveq	r3, #1
 8004130:	2300      	movne	r3, #0
 8004132:	b2db      	uxtb	r3, r3
 8004134:	461a      	mov	r2, r3
 8004136:	79fb      	ldrb	r3, [r7, #7]
 8004138:	429a      	cmp	r2, r3
 800413a:	d09f      	beq.n	800407c <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800413c:	2300      	movs	r3, #0
}
 800413e:	4618      	mov	r0, r3
 8004140:	3740      	adds	r7, #64	; 0x40
 8004142:	46bd      	mov	sp, r7
 8004144:	bd80      	pop	{r7, pc}
	...

08004148 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004148:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800414c:	b0c0      	sub	sp, #256	; 0x100
 800414e:	af00      	add	r7, sp, #0
 8004150:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004154:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	691b      	ldr	r3, [r3, #16]
 800415c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8004160:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004164:	68d9      	ldr	r1, [r3, #12]
 8004166:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800416a:	681a      	ldr	r2, [r3, #0]
 800416c:	ea40 0301 	orr.w	r3, r0, r1
 8004170:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004172:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004176:	689a      	ldr	r2, [r3, #8]
 8004178:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800417c:	691b      	ldr	r3, [r3, #16]
 800417e:	431a      	orrs	r2, r3
 8004180:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004184:	695b      	ldr	r3, [r3, #20]
 8004186:	431a      	orrs	r2, r3
 8004188:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800418c:	69db      	ldr	r3, [r3, #28]
 800418e:	4313      	orrs	r3, r2
 8004190:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004194:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	68db      	ldr	r3, [r3, #12]
 800419c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80041a0:	f021 010c 	bic.w	r1, r1, #12
 80041a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80041a8:	681a      	ldr	r2, [r3, #0]
 80041aa:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80041ae:	430b      	orrs	r3, r1
 80041b0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80041b2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	695b      	ldr	r3, [r3, #20]
 80041ba:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80041be:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80041c2:	6999      	ldr	r1, [r3, #24]
 80041c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80041c8:	681a      	ldr	r2, [r3, #0]
 80041ca:	ea40 0301 	orr.w	r3, r0, r1
 80041ce:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80041d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80041d4:	681a      	ldr	r2, [r3, #0]
 80041d6:	4b8f      	ldr	r3, [pc, #572]	; (8004414 <UART_SetConfig+0x2cc>)
 80041d8:	429a      	cmp	r2, r3
 80041da:	d005      	beq.n	80041e8 <UART_SetConfig+0xa0>
 80041dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80041e0:	681a      	ldr	r2, [r3, #0]
 80041e2:	4b8d      	ldr	r3, [pc, #564]	; (8004418 <UART_SetConfig+0x2d0>)
 80041e4:	429a      	cmp	r2, r3
 80041e6:	d104      	bne.n	80041f2 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80041e8:	f7ff fb56 	bl	8003898 <HAL_RCC_GetPCLK2Freq>
 80041ec:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80041f0:	e003      	b.n	80041fa <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80041f2:	f7ff fb3d 	bl	8003870 <HAL_RCC_GetPCLK1Freq>
 80041f6:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80041fa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80041fe:	69db      	ldr	r3, [r3, #28]
 8004200:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004204:	f040 810c 	bne.w	8004420 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004208:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800420c:	2200      	movs	r2, #0
 800420e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8004212:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8004216:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800421a:	4622      	mov	r2, r4
 800421c:	462b      	mov	r3, r5
 800421e:	1891      	adds	r1, r2, r2
 8004220:	65b9      	str	r1, [r7, #88]	; 0x58
 8004222:	415b      	adcs	r3, r3
 8004224:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004226:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800422a:	4621      	mov	r1, r4
 800422c:	eb12 0801 	adds.w	r8, r2, r1
 8004230:	4629      	mov	r1, r5
 8004232:	eb43 0901 	adc.w	r9, r3, r1
 8004236:	f04f 0200 	mov.w	r2, #0
 800423a:	f04f 0300 	mov.w	r3, #0
 800423e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004242:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004246:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800424a:	4690      	mov	r8, r2
 800424c:	4699      	mov	r9, r3
 800424e:	4623      	mov	r3, r4
 8004250:	eb18 0303 	adds.w	r3, r8, r3
 8004254:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8004258:	462b      	mov	r3, r5
 800425a:	eb49 0303 	adc.w	r3, r9, r3
 800425e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8004262:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004266:	685b      	ldr	r3, [r3, #4]
 8004268:	2200      	movs	r2, #0
 800426a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800426e:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8004272:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8004276:	460b      	mov	r3, r1
 8004278:	18db      	adds	r3, r3, r3
 800427a:	653b      	str	r3, [r7, #80]	; 0x50
 800427c:	4613      	mov	r3, r2
 800427e:	eb42 0303 	adc.w	r3, r2, r3
 8004282:	657b      	str	r3, [r7, #84]	; 0x54
 8004284:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8004288:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800428c:	f7fc fc9c 	bl	8000bc8 <__aeabi_uldivmod>
 8004290:	4602      	mov	r2, r0
 8004292:	460b      	mov	r3, r1
 8004294:	4b61      	ldr	r3, [pc, #388]	; (800441c <UART_SetConfig+0x2d4>)
 8004296:	fba3 2302 	umull	r2, r3, r3, r2
 800429a:	095b      	lsrs	r3, r3, #5
 800429c:	011c      	lsls	r4, r3, #4
 800429e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80042a2:	2200      	movs	r2, #0
 80042a4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80042a8:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80042ac:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80042b0:	4642      	mov	r2, r8
 80042b2:	464b      	mov	r3, r9
 80042b4:	1891      	adds	r1, r2, r2
 80042b6:	64b9      	str	r1, [r7, #72]	; 0x48
 80042b8:	415b      	adcs	r3, r3
 80042ba:	64fb      	str	r3, [r7, #76]	; 0x4c
 80042bc:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80042c0:	4641      	mov	r1, r8
 80042c2:	eb12 0a01 	adds.w	sl, r2, r1
 80042c6:	4649      	mov	r1, r9
 80042c8:	eb43 0b01 	adc.w	fp, r3, r1
 80042cc:	f04f 0200 	mov.w	r2, #0
 80042d0:	f04f 0300 	mov.w	r3, #0
 80042d4:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80042d8:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80042dc:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80042e0:	4692      	mov	sl, r2
 80042e2:	469b      	mov	fp, r3
 80042e4:	4643      	mov	r3, r8
 80042e6:	eb1a 0303 	adds.w	r3, sl, r3
 80042ea:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80042ee:	464b      	mov	r3, r9
 80042f0:	eb4b 0303 	adc.w	r3, fp, r3
 80042f4:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80042f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80042fc:	685b      	ldr	r3, [r3, #4]
 80042fe:	2200      	movs	r2, #0
 8004300:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004304:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8004308:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800430c:	460b      	mov	r3, r1
 800430e:	18db      	adds	r3, r3, r3
 8004310:	643b      	str	r3, [r7, #64]	; 0x40
 8004312:	4613      	mov	r3, r2
 8004314:	eb42 0303 	adc.w	r3, r2, r3
 8004318:	647b      	str	r3, [r7, #68]	; 0x44
 800431a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800431e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8004322:	f7fc fc51 	bl	8000bc8 <__aeabi_uldivmod>
 8004326:	4602      	mov	r2, r0
 8004328:	460b      	mov	r3, r1
 800432a:	4611      	mov	r1, r2
 800432c:	4b3b      	ldr	r3, [pc, #236]	; (800441c <UART_SetConfig+0x2d4>)
 800432e:	fba3 2301 	umull	r2, r3, r3, r1
 8004332:	095b      	lsrs	r3, r3, #5
 8004334:	2264      	movs	r2, #100	; 0x64
 8004336:	fb02 f303 	mul.w	r3, r2, r3
 800433a:	1acb      	subs	r3, r1, r3
 800433c:	00db      	lsls	r3, r3, #3
 800433e:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8004342:	4b36      	ldr	r3, [pc, #216]	; (800441c <UART_SetConfig+0x2d4>)
 8004344:	fba3 2302 	umull	r2, r3, r3, r2
 8004348:	095b      	lsrs	r3, r3, #5
 800434a:	005b      	lsls	r3, r3, #1
 800434c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004350:	441c      	add	r4, r3
 8004352:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004356:	2200      	movs	r2, #0
 8004358:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800435c:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8004360:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8004364:	4642      	mov	r2, r8
 8004366:	464b      	mov	r3, r9
 8004368:	1891      	adds	r1, r2, r2
 800436a:	63b9      	str	r1, [r7, #56]	; 0x38
 800436c:	415b      	adcs	r3, r3
 800436e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004370:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8004374:	4641      	mov	r1, r8
 8004376:	1851      	adds	r1, r2, r1
 8004378:	6339      	str	r1, [r7, #48]	; 0x30
 800437a:	4649      	mov	r1, r9
 800437c:	414b      	adcs	r3, r1
 800437e:	637b      	str	r3, [r7, #52]	; 0x34
 8004380:	f04f 0200 	mov.w	r2, #0
 8004384:	f04f 0300 	mov.w	r3, #0
 8004388:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 800438c:	4659      	mov	r1, fp
 800438e:	00cb      	lsls	r3, r1, #3
 8004390:	4651      	mov	r1, sl
 8004392:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004396:	4651      	mov	r1, sl
 8004398:	00ca      	lsls	r2, r1, #3
 800439a:	4610      	mov	r0, r2
 800439c:	4619      	mov	r1, r3
 800439e:	4603      	mov	r3, r0
 80043a0:	4642      	mov	r2, r8
 80043a2:	189b      	adds	r3, r3, r2
 80043a4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80043a8:	464b      	mov	r3, r9
 80043aa:	460a      	mov	r2, r1
 80043ac:	eb42 0303 	adc.w	r3, r2, r3
 80043b0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80043b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80043b8:	685b      	ldr	r3, [r3, #4]
 80043ba:	2200      	movs	r2, #0
 80043bc:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80043c0:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80043c4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80043c8:	460b      	mov	r3, r1
 80043ca:	18db      	adds	r3, r3, r3
 80043cc:	62bb      	str	r3, [r7, #40]	; 0x28
 80043ce:	4613      	mov	r3, r2
 80043d0:	eb42 0303 	adc.w	r3, r2, r3
 80043d4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80043d6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80043da:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80043de:	f7fc fbf3 	bl	8000bc8 <__aeabi_uldivmod>
 80043e2:	4602      	mov	r2, r0
 80043e4:	460b      	mov	r3, r1
 80043e6:	4b0d      	ldr	r3, [pc, #52]	; (800441c <UART_SetConfig+0x2d4>)
 80043e8:	fba3 1302 	umull	r1, r3, r3, r2
 80043ec:	095b      	lsrs	r3, r3, #5
 80043ee:	2164      	movs	r1, #100	; 0x64
 80043f0:	fb01 f303 	mul.w	r3, r1, r3
 80043f4:	1ad3      	subs	r3, r2, r3
 80043f6:	00db      	lsls	r3, r3, #3
 80043f8:	3332      	adds	r3, #50	; 0x32
 80043fa:	4a08      	ldr	r2, [pc, #32]	; (800441c <UART_SetConfig+0x2d4>)
 80043fc:	fba2 2303 	umull	r2, r3, r2, r3
 8004400:	095b      	lsrs	r3, r3, #5
 8004402:	f003 0207 	and.w	r2, r3, #7
 8004406:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	4422      	add	r2, r4
 800440e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004410:	e105      	b.n	800461e <UART_SetConfig+0x4d6>
 8004412:	bf00      	nop
 8004414:	40011000 	.word	0x40011000
 8004418:	40011400 	.word	0x40011400
 800441c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004420:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004424:	2200      	movs	r2, #0
 8004426:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800442a:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800442e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8004432:	4642      	mov	r2, r8
 8004434:	464b      	mov	r3, r9
 8004436:	1891      	adds	r1, r2, r2
 8004438:	6239      	str	r1, [r7, #32]
 800443a:	415b      	adcs	r3, r3
 800443c:	627b      	str	r3, [r7, #36]	; 0x24
 800443e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004442:	4641      	mov	r1, r8
 8004444:	1854      	adds	r4, r2, r1
 8004446:	4649      	mov	r1, r9
 8004448:	eb43 0501 	adc.w	r5, r3, r1
 800444c:	f04f 0200 	mov.w	r2, #0
 8004450:	f04f 0300 	mov.w	r3, #0
 8004454:	00eb      	lsls	r3, r5, #3
 8004456:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800445a:	00e2      	lsls	r2, r4, #3
 800445c:	4614      	mov	r4, r2
 800445e:	461d      	mov	r5, r3
 8004460:	4643      	mov	r3, r8
 8004462:	18e3      	adds	r3, r4, r3
 8004464:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8004468:	464b      	mov	r3, r9
 800446a:	eb45 0303 	adc.w	r3, r5, r3
 800446e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8004472:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004476:	685b      	ldr	r3, [r3, #4]
 8004478:	2200      	movs	r2, #0
 800447a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800447e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8004482:	f04f 0200 	mov.w	r2, #0
 8004486:	f04f 0300 	mov.w	r3, #0
 800448a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800448e:	4629      	mov	r1, r5
 8004490:	008b      	lsls	r3, r1, #2
 8004492:	4621      	mov	r1, r4
 8004494:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004498:	4621      	mov	r1, r4
 800449a:	008a      	lsls	r2, r1, #2
 800449c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80044a0:	f7fc fb92 	bl	8000bc8 <__aeabi_uldivmod>
 80044a4:	4602      	mov	r2, r0
 80044a6:	460b      	mov	r3, r1
 80044a8:	4b60      	ldr	r3, [pc, #384]	; (800462c <UART_SetConfig+0x4e4>)
 80044aa:	fba3 2302 	umull	r2, r3, r3, r2
 80044ae:	095b      	lsrs	r3, r3, #5
 80044b0:	011c      	lsls	r4, r3, #4
 80044b2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80044b6:	2200      	movs	r2, #0
 80044b8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80044bc:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80044c0:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80044c4:	4642      	mov	r2, r8
 80044c6:	464b      	mov	r3, r9
 80044c8:	1891      	adds	r1, r2, r2
 80044ca:	61b9      	str	r1, [r7, #24]
 80044cc:	415b      	adcs	r3, r3
 80044ce:	61fb      	str	r3, [r7, #28]
 80044d0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80044d4:	4641      	mov	r1, r8
 80044d6:	1851      	adds	r1, r2, r1
 80044d8:	6139      	str	r1, [r7, #16]
 80044da:	4649      	mov	r1, r9
 80044dc:	414b      	adcs	r3, r1
 80044de:	617b      	str	r3, [r7, #20]
 80044e0:	f04f 0200 	mov.w	r2, #0
 80044e4:	f04f 0300 	mov.w	r3, #0
 80044e8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80044ec:	4659      	mov	r1, fp
 80044ee:	00cb      	lsls	r3, r1, #3
 80044f0:	4651      	mov	r1, sl
 80044f2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80044f6:	4651      	mov	r1, sl
 80044f8:	00ca      	lsls	r2, r1, #3
 80044fa:	4610      	mov	r0, r2
 80044fc:	4619      	mov	r1, r3
 80044fe:	4603      	mov	r3, r0
 8004500:	4642      	mov	r2, r8
 8004502:	189b      	adds	r3, r3, r2
 8004504:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004508:	464b      	mov	r3, r9
 800450a:	460a      	mov	r2, r1
 800450c:	eb42 0303 	adc.w	r3, r2, r3
 8004510:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004514:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004518:	685b      	ldr	r3, [r3, #4]
 800451a:	2200      	movs	r2, #0
 800451c:	67bb      	str	r3, [r7, #120]	; 0x78
 800451e:	67fa      	str	r2, [r7, #124]	; 0x7c
 8004520:	f04f 0200 	mov.w	r2, #0
 8004524:	f04f 0300 	mov.w	r3, #0
 8004528:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 800452c:	4649      	mov	r1, r9
 800452e:	008b      	lsls	r3, r1, #2
 8004530:	4641      	mov	r1, r8
 8004532:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004536:	4641      	mov	r1, r8
 8004538:	008a      	lsls	r2, r1, #2
 800453a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800453e:	f7fc fb43 	bl	8000bc8 <__aeabi_uldivmod>
 8004542:	4602      	mov	r2, r0
 8004544:	460b      	mov	r3, r1
 8004546:	4b39      	ldr	r3, [pc, #228]	; (800462c <UART_SetConfig+0x4e4>)
 8004548:	fba3 1302 	umull	r1, r3, r3, r2
 800454c:	095b      	lsrs	r3, r3, #5
 800454e:	2164      	movs	r1, #100	; 0x64
 8004550:	fb01 f303 	mul.w	r3, r1, r3
 8004554:	1ad3      	subs	r3, r2, r3
 8004556:	011b      	lsls	r3, r3, #4
 8004558:	3332      	adds	r3, #50	; 0x32
 800455a:	4a34      	ldr	r2, [pc, #208]	; (800462c <UART_SetConfig+0x4e4>)
 800455c:	fba2 2303 	umull	r2, r3, r2, r3
 8004560:	095b      	lsrs	r3, r3, #5
 8004562:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004566:	441c      	add	r4, r3
 8004568:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800456c:	2200      	movs	r2, #0
 800456e:	673b      	str	r3, [r7, #112]	; 0x70
 8004570:	677a      	str	r2, [r7, #116]	; 0x74
 8004572:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8004576:	4642      	mov	r2, r8
 8004578:	464b      	mov	r3, r9
 800457a:	1891      	adds	r1, r2, r2
 800457c:	60b9      	str	r1, [r7, #8]
 800457e:	415b      	adcs	r3, r3
 8004580:	60fb      	str	r3, [r7, #12]
 8004582:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004586:	4641      	mov	r1, r8
 8004588:	1851      	adds	r1, r2, r1
 800458a:	6039      	str	r1, [r7, #0]
 800458c:	4649      	mov	r1, r9
 800458e:	414b      	adcs	r3, r1
 8004590:	607b      	str	r3, [r7, #4]
 8004592:	f04f 0200 	mov.w	r2, #0
 8004596:	f04f 0300 	mov.w	r3, #0
 800459a:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800459e:	4659      	mov	r1, fp
 80045a0:	00cb      	lsls	r3, r1, #3
 80045a2:	4651      	mov	r1, sl
 80045a4:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80045a8:	4651      	mov	r1, sl
 80045aa:	00ca      	lsls	r2, r1, #3
 80045ac:	4610      	mov	r0, r2
 80045ae:	4619      	mov	r1, r3
 80045b0:	4603      	mov	r3, r0
 80045b2:	4642      	mov	r2, r8
 80045b4:	189b      	adds	r3, r3, r2
 80045b6:	66bb      	str	r3, [r7, #104]	; 0x68
 80045b8:	464b      	mov	r3, r9
 80045ba:	460a      	mov	r2, r1
 80045bc:	eb42 0303 	adc.w	r3, r2, r3
 80045c0:	66fb      	str	r3, [r7, #108]	; 0x6c
 80045c2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80045c6:	685b      	ldr	r3, [r3, #4]
 80045c8:	2200      	movs	r2, #0
 80045ca:	663b      	str	r3, [r7, #96]	; 0x60
 80045cc:	667a      	str	r2, [r7, #100]	; 0x64
 80045ce:	f04f 0200 	mov.w	r2, #0
 80045d2:	f04f 0300 	mov.w	r3, #0
 80045d6:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80045da:	4649      	mov	r1, r9
 80045dc:	008b      	lsls	r3, r1, #2
 80045de:	4641      	mov	r1, r8
 80045e0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80045e4:	4641      	mov	r1, r8
 80045e6:	008a      	lsls	r2, r1, #2
 80045e8:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80045ec:	f7fc faec 	bl	8000bc8 <__aeabi_uldivmod>
 80045f0:	4602      	mov	r2, r0
 80045f2:	460b      	mov	r3, r1
 80045f4:	4b0d      	ldr	r3, [pc, #52]	; (800462c <UART_SetConfig+0x4e4>)
 80045f6:	fba3 1302 	umull	r1, r3, r3, r2
 80045fa:	095b      	lsrs	r3, r3, #5
 80045fc:	2164      	movs	r1, #100	; 0x64
 80045fe:	fb01 f303 	mul.w	r3, r1, r3
 8004602:	1ad3      	subs	r3, r2, r3
 8004604:	011b      	lsls	r3, r3, #4
 8004606:	3332      	adds	r3, #50	; 0x32
 8004608:	4a08      	ldr	r2, [pc, #32]	; (800462c <UART_SetConfig+0x4e4>)
 800460a:	fba2 2303 	umull	r2, r3, r2, r3
 800460e:	095b      	lsrs	r3, r3, #5
 8004610:	f003 020f 	and.w	r2, r3, #15
 8004614:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	4422      	add	r2, r4
 800461c:	609a      	str	r2, [r3, #8]
}
 800461e:	bf00      	nop
 8004620:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8004624:	46bd      	mov	sp, r7
 8004626:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800462a:	bf00      	nop
 800462c:	51eb851f 	.word	0x51eb851f

08004630 <__errno>:
 8004630:	4b01      	ldr	r3, [pc, #4]	; (8004638 <__errno+0x8>)
 8004632:	6818      	ldr	r0, [r3, #0]
 8004634:	4770      	bx	lr
 8004636:	bf00      	nop
 8004638:	20000010 	.word	0x20000010

0800463c <__libc_init_array>:
 800463c:	b570      	push	{r4, r5, r6, lr}
 800463e:	4d0d      	ldr	r5, [pc, #52]	; (8004674 <__libc_init_array+0x38>)
 8004640:	4c0d      	ldr	r4, [pc, #52]	; (8004678 <__libc_init_array+0x3c>)
 8004642:	1b64      	subs	r4, r4, r5
 8004644:	10a4      	asrs	r4, r4, #2
 8004646:	2600      	movs	r6, #0
 8004648:	42a6      	cmp	r6, r4
 800464a:	d109      	bne.n	8004660 <__libc_init_array+0x24>
 800464c:	4d0b      	ldr	r5, [pc, #44]	; (800467c <__libc_init_array+0x40>)
 800464e:	4c0c      	ldr	r4, [pc, #48]	; (8004680 <__libc_init_array+0x44>)
 8004650:	f002 ff90 	bl	8007574 <_init>
 8004654:	1b64      	subs	r4, r4, r5
 8004656:	10a4      	asrs	r4, r4, #2
 8004658:	2600      	movs	r6, #0
 800465a:	42a6      	cmp	r6, r4
 800465c:	d105      	bne.n	800466a <__libc_init_array+0x2e>
 800465e:	bd70      	pop	{r4, r5, r6, pc}
 8004660:	f855 3b04 	ldr.w	r3, [r5], #4
 8004664:	4798      	blx	r3
 8004666:	3601      	adds	r6, #1
 8004668:	e7ee      	b.n	8004648 <__libc_init_array+0xc>
 800466a:	f855 3b04 	ldr.w	r3, [r5], #4
 800466e:	4798      	blx	r3
 8004670:	3601      	adds	r6, #1
 8004672:	e7f2      	b.n	800465a <__libc_init_array+0x1e>
 8004674:	08007a44 	.word	0x08007a44
 8004678:	08007a44 	.word	0x08007a44
 800467c:	08007a44 	.word	0x08007a44
 8004680:	08007a48 	.word	0x08007a48

08004684 <memcpy>:
 8004684:	440a      	add	r2, r1
 8004686:	4291      	cmp	r1, r2
 8004688:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800468c:	d100      	bne.n	8004690 <memcpy+0xc>
 800468e:	4770      	bx	lr
 8004690:	b510      	push	{r4, lr}
 8004692:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004696:	f803 4f01 	strb.w	r4, [r3, #1]!
 800469a:	4291      	cmp	r1, r2
 800469c:	d1f9      	bne.n	8004692 <memcpy+0xe>
 800469e:	bd10      	pop	{r4, pc}

080046a0 <memset>:
 80046a0:	4402      	add	r2, r0
 80046a2:	4603      	mov	r3, r0
 80046a4:	4293      	cmp	r3, r2
 80046a6:	d100      	bne.n	80046aa <memset+0xa>
 80046a8:	4770      	bx	lr
 80046aa:	f803 1b01 	strb.w	r1, [r3], #1
 80046ae:	e7f9      	b.n	80046a4 <memset+0x4>

080046b0 <__cvt>:
 80046b0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80046b4:	ec55 4b10 	vmov	r4, r5, d0
 80046b8:	2d00      	cmp	r5, #0
 80046ba:	460e      	mov	r6, r1
 80046bc:	4619      	mov	r1, r3
 80046be:	462b      	mov	r3, r5
 80046c0:	bfbb      	ittet	lt
 80046c2:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 80046c6:	461d      	movlt	r5, r3
 80046c8:	2300      	movge	r3, #0
 80046ca:	232d      	movlt	r3, #45	; 0x2d
 80046cc:	700b      	strb	r3, [r1, #0]
 80046ce:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80046d0:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 80046d4:	4691      	mov	r9, r2
 80046d6:	f023 0820 	bic.w	r8, r3, #32
 80046da:	bfbc      	itt	lt
 80046dc:	4622      	movlt	r2, r4
 80046de:	4614      	movlt	r4, r2
 80046e0:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80046e4:	d005      	beq.n	80046f2 <__cvt+0x42>
 80046e6:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 80046ea:	d100      	bne.n	80046ee <__cvt+0x3e>
 80046ec:	3601      	adds	r6, #1
 80046ee:	2102      	movs	r1, #2
 80046f0:	e000      	b.n	80046f4 <__cvt+0x44>
 80046f2:	2103      	movs	r1, #3
 80046f4:	ab03      	add	r3, sp, #12
 80046f6:	9301      	str	r3, [sp, #4]
 80046f8:	ab02      	add	r3, sp, #8
 80046fa:	9300      	str	r3, [sp, #0]
 80046fc:	ec45 4b10 	vmov	d0, r4, r5
 8004700:	4653      	mov	r3, sl
 8004702:	4632      	mov	r2, r6
 8004704:	f000 fe38 	bl	8005378 <_dtoa_r>
 8004708:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800470c:	4607      	mov	r7, r0
 800470e:	d102      	bne.n	8004716 <__cvt+0x66>
 8004710:	f019 0f01 	tst.w	r9, #1
 8004714:	d022      	beq.n	800475c <__cvt+0xac>
 8004716:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800471a:	eb07 0906 	add.w	r9, r7, r6
 800471e:	d110      	bne.n	8004742 <__cvt+0x92>
 8004720:	783b      	ldrb	r3, [r7, #0]
 8004722:	2b30      	cmp	r3, #48	; 0x30
 8004724:	d10a      	bne.n	800473c <__cvt+0x8c>
 8004726:	2200      	movs	r2, #0
 8004728:	2300      	movs	r3, #0
 800472a:	4620      	mov	r0, r4
 800472c:	4629      	mov	r1, r5
 800472e:	f7fc f9db 	bl	8000ae8 <__aeabi_dcmpeq>
 8004732:	b918      	cbnz	r0, 800473c <__cvt+0x8c>
 8004734:	f1c6 0601 	rsb	r6, r6, #1
 8004738:	f8ca 6000 	str.w	r6, [sl]
 800473c:	f8da 3000 	ldr.w	r3, [sl]
 8004740:	4499      	add	r9, r3
 8004742:	2200      	movs	r2, #0
 8004744:	2300      	movs	r3, #0
 8004746:	4620      	mov	r0, r4
 8004748:	4629      	mov	r1, r5
 800474a:	f7fc f9cd 	bl	8000ae8 <__aeabi_dcmpeq>
 800474e:	b108      	cbz	r0, 8004754 <__cvt+0xa4>
 8004750:	f8cd 900c 	str.w	r9, [sp, #12]
 8004754:	2230      	movs	r2, #48	; 0x30
 8004756:	9b03      	ldr	r3, [sp, #12]
 8004758:	454b      	cmp	r3, r9
 800475a:	d307      	bcc.n	800476c <__cvt+0xbc>
 800475c:	9b03      	ldr	r3, [sp, #12]
 800475e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004760:	1bdb      	subs	r3, r3, r7
 8004762:	4638      	mov	r0, r7
 8004764:	6013      	str	r3, [r2, #0]
 8004766:	b004      	add	sp, #16
 8004768:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800476c:	1c59      	adds	r1, r3, #1
 800476e:	9103      	str	r1, [sp, #12]
 8004770:	701a      	strb	r2, [r3, #0]
 8004772:	e7f0      	b.n	8004756 <__cvt+0xa6>

08004774 <__exponent>:
 8004774:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004776:	4603      	mov	r3, r0
 8004778:	2900      	cmp	r1, #0
 800477a:	bfb8      	it	lt
 800477c:	4249      	neglt	r1, r1
 800477e:	f803 2b02 	strb.w	r2, [r3], #2
 8004782:	bfb4      	ite	lt
 8004784:	222d      	movlt	r2, #45	; 0x2d
 8004786:	222b      	movge	r2, #43	; 0x2b
 8004788:	2909      	cmp	r1, #9
 800478a:	7042      	strb	r2, [r0, #1]
 800478c:	dd2a      	ble.n	80047e4 <__exponent+0x70>
 800478e:	f10d 0407 	add.w	r4, sp, #7
 8004792:	46a4      	mov	ip, r4
 8004794:	270a      	movs	r7, #10
 8004796:	46a6      	mov	lr, r4
 8004798:	460a      	mov	r2, r1
 800479a:	fb91 f6f7 	sdiv	r6, r1, r7
 800479e:	fb07 1516 	mls	r5, r7, r6, r1
 80047a2:	3530      	adds	r5, #48	; 0x30
 80047a4:	2a63      	cmp	r2, #99	; 0x63
 80047a6:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 80047aa:	f80e 5c01 	strb.w	r5, [lr, #-1]
 80047ae:	4631      	mov	r1, r6
 80047b0:	dcf1      	bgt.n	8004796 <__exponent+0x22>
 80047b2:	3130      	adds	r1, #48	; 0x30
 80047b4:	f1ae 0502 	sub.w	r5, lr, #2
 80047b8:	f804 1c01 	strb.w	r1, [r4, #-1]
 80047bc:	1c44      	adds	r4, r0, #1
 80047be:	4629      	mov	r1, r5
 80047c0:	4561      	cmp	r1, ip
 80047c2:	d30a      	bcc.n	80047da <__exponent+0x66>
 80047c4:	f10d 0209 	add.w	r2, sp, #9
 80047c8:	eba2 020e 	sub.w	r2, r2, lr
 80047cc:	4565      	cmp	r5, ip
 80047ce:	bf88      	it	hi
 80047d0:	2200      	movhi	r2, #0
 80047d2:	4413      	add	r3, r2
 80047d4:	1a18      	subs	r0, r3, r0
 80047d6:	b003      	add	sp, #12
 80047d8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80047da:	f811 2b01 	ldrb.w	r2, [r1], #1
 80047de:	f804 2f01 	strb.w	r2, [r4, #1]!
 80047e2:	e7ed      	b.n	80047c0 <__exponent+0x4c>
 80047e4:	2330      	movs	r3, #48	; 0x30
 80047e6:	3130      	adds	r1, #48	; 0x30
 80047e8:	7083      	strb	r3, [r0, #2]
 80047ea:	70c1      	strb	r1, [r0, #3]
 80047ec:	1d03      	adds	r3, r0, #4
 80047ee:	e7f1      	b.n	80047d4 <__exponent+0x60>

080047f0 <_printf_float>:
 80047f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80047f4:	ed2d 8b02 	vpush	{d8}
 80047f8:	b08d      	sub	sp, #52	; 0x34
 80047fa:	460c      	mov	r4, r1
 80047fc:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8004800:	4616      	mov	r6, r2
 8004802:	461f      	mov	r7, r3
 8004804:	4605      	mov	r5, r0
 8004806:	f001 fd5d 	bl	80062c4 <_localeconv_r>
 800480a:	f8d0 a000 	ldr.w	sl, [r0]
 800480e:	4650      	mov	r0, sl
 8004810:	f7fb fcee 	bl	80001f0 <strlen>
 8004814:	2300      	movs	r3, #0
 8004816:	930a      	str	r3, [sp, #40]	; 0x28
 8004818:	6823      	ldr	r3, [r4, #0]
 800481a:	9305      	str	r3, [sp, #20]
 800481c:	f8d8 3000 	ldr.w	r3, [r8]
 8004820:	f894 b018 	ldrb.w	fp, [r4, #24]
 8004824:	3307      	adds	r3, #7
 8004826:	f023 0307 	bic.w	r3, r3, #7
 800482a:	f103 0208 	add.w	r2, r3, #8
 800482e:	f8c8 2000 	str.w	r2, [r8]
 8004832:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004836:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800483a:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800483e:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8004842:	9307      	str	r3, [sp, #28]
 8004844:	f8cd 8018 	str.w	r8, [sp, #24]
 8004848:	ee08 0a10 	vmov	s16, r0
 800484c:	4b9f      	ldr	r3, [pc, #636]	; (8004acc <_printf_float+0x2dc>)
 800484e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004852:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004856:	f7fc f979 	bl	8000b4c <__aeabi_dcmpun>
 800485a:	bb88      	cbnz	r0, 80048c0 <_printf_float+0xd0>
 800485c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004860:	4b9a      	ldr	r3, [pc, #616]	; (8004acc <_printf_float+0x2dc>)
 8004862:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004866:	f7fc f953 	bl	8000b10 <__aeabi_dcmple>
 800486a:	bb48      	cbnz	r0, 80048c0 <_printf_float+0xd0>
 800486c:	2200      	movs	r2, #0
 800486e:	2300      	movs	r3, #0
 8004870:	4640      	mov	r0, r8
 8004872:	4649      	mov	r1, r9
 8004874:	f7fc f942 	bl	8000afc <__aeabi_dcmplt>
 8004878:	b110      	cbz	r0, 8004880 <_printf_float+0x90>
 800487a:	232d      	movs	r3, #45	; 0x2d
 800487c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004880:	4b93      	ldr	r3, [pc, #588]	; (8004ad0 <_printf_float+0x2e0>)
 8004882:	4894      	ldr	r0, [pc, #592]	; (8004ad4 <_printf_float+0x2e4>)
 8004884:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8004888:	bf94      	ite	ls
 800488a:	4698      	movls	r8, r3
 800488c:	4680      	movhi	r8, r0
 800488e:	2303      	movs	r3, #3
 8004890:	6123      	str	r3, [r4, #16]
 8004892:	9b05      	ldr	r3, [sp, #20]
 8004894:	f023 0204 	bic.w	r2, r3, #4
 8004898:	6022      	str	r2, [r4, #0]
 800489a:	f04f 0900 	mov.w	r9, #0
 800489e:	9700      	str	r7, [sp, #0]
 80048a0:	4633      	mov	r3, r6
 80048a2:	aa0b      	add	r2, sp, #44	; 0x2c
 80048a4:	4621      	mov	r1, r4
 80048a6:	4628      	mov	r0, r5
 80048a8:	f000 f9d8 	bl	8004c5c <_printf_common>
 80048ac:	3001      	adds	r0, #1
 80048ae:	f040 8090 	bne.w	80049d2 <_printf_float+0x1e2>
 80048b2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80048b6:	b00d      	add	sp, #52	; 0x34
 80048b8:	ecbd 8b02 	vpop	{d8}
 80048bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80048c0:	4642      	mov	r2, r8
 80048c2:	464b      	mov	r3, r9
 80048c4:	4640      	mov	r0, r8
 80048c6:	4649      	mov	r1, r9
 80048c8:	f7fc f940 	bl	8000b4c <__aeabi_dcmpun>
 80048cc:	b140      	cbz	r0, 80048e0 <_printf_float+0xf0>
 80048ce:	464b      	mov	r3, r9
 80048d0:	2b00      	cmp	r3, #0
 80048d2:	bfbc      	itt	lt
 80048d4:	232d      	movlt	r3, #45	; 0x2d
 80048d6:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80048da:	487f      	ldr	r0, [pc, #508]	; (8004ad8 <_printf_float+0x2e8>)
 80048dc:	4b7f      	ldr	r3, [pc, #508]	; (8004adc <_printf_float+0x2ec>)
 80048de:	e7d1      	b.n	8004884 <_printf_float+0x94>
 80048e0:	6863      	ldr	r3, [r4, #4]
 80048e2:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 80048e6:	9206      	str	r2, [sp, #24]
 80048e8:	1c5a      	adds	r2, r3, #1
 80048ea:	d13f      	bne.n	800496c <_printf_float+0x17c>
 80048ec:	2306      	movs	r3, #6
 80048ee:	6063      	str	r3, [r4, #4]
 80048f0:	9b05      	ldr	r3, [sp, #20]
 80048f2:	6861      	ldr	r1, [r4, #4]
 80048f4:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80048f8:	2300      	movs	r3, #0
 80048fa:	9303      	str	r3, [sp, #12]
 80048fc:	ab0a      	add	r3, sp, #40	; 0x28
 80048fe:	e9cd b301 	strd	fp, r3, [sp, #4]
 8004902:	ab09      	add	r3, sp, #36	; 0x24
 8004904:	ec49 8b10 	vmov	d0, r8, r9
 8004908:	9300      	str	r3, [sp, #0]
 800490a:	6022      	str	r2, [r4, #0]
 800490c:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8004910:	4628      	mov	r0, r5
 8004912:	f7ff fecd 	bl	80046b0 <__cvt>
 8004916:	9b06      	ldr	r3, [sp, #24]
 8004918:	9909      	ldr	r1, [sp, #36]	; 0x24
 800491a:	2b47      	cmp	r3, #71	; 0x47
 800491c:	4680      	mov	r8, r0
 800491e:	d108      	bne.n	8004932 <_printf_float+0x142>
 8004920:	1cc8      	adds	r0, r1, #3
 8004922:	db02      	blt.n	800492a <_printf_float+0x13a>
 8004924:	6863      	ldr	r3, [r4, #4]
 8004926:	4299      	cmp	r1, r3
 8004928:	dd41      	ble.n	80049ae <_printf_float+0x1be>
 800492a:	f1ab 0b02 	sub.w	fp, fp, #2
 800492e:	fa5f fb8b 	uxtb.w	fp, fp
 8004932:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8004936:	d820      	bhi.n	800497a <_printf_float+0x18a>
 8004938:	3901      	subs	r1, #1
 800493a:	465a      	mov	r2, fp
 800493c:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8004940:	9109      	str	r1, [sp, #36]	; 0x24
 8004942:	f7ff ff17 	bl	8004774 <__exponent>
 8004946:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004948:	1813      	adds	r3, r2, r0
 800494a:	2a01      	cmp	r2, #1
 800494c:	4681      	mov	r9, r0
 800494e:	6123      	str	r3, [r4, #16]
 8004950:	dc02      	bgt.n	8004958 <_printf_float+0x168>
 8004952:	6822      	ldr	r2, [r4, #0]
 8004954:	07d2      	lsls	r2, r2, #31
 8004956:	d501      	bpl.n	800495c <_printf_float+0x16c>
 8004958:	3301      	adds	r3, #1
 800495a:	6123      	str	r3, [r4, #16]
 800495c:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8004960:	2b00      	cmp	r3, #0
 8004962:	d09c      	beq.n	800489e <_printf_float+0xae>
 8004964:	232d      	movs	r3, #45	; 0x2d
 8004966:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800496a:	e798      	b.n	800489e <_printf_float+0xae>
 800496c:	9a06      	ldr	r2, [sp, #24]
 800496e:	2a47      	cmp	r2, #71	; 0x47
 8004970:	d1be      	bne.n	80048f0 <_printf_float+0x100>
 8004972:	2b00      	cmp	r3, #0
 8004974:	d1bc      	bne.n	80048f0 <_printf_float+0x100>
 8004976:	2301      	movs	r3, #1
 8004978:	e7b9      	b.n	80048ee <_printf_float+0xfe>
 800497a:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800497e:	d118      	bne.n	80049b2 <_printf_float+0x1c2>
 8004980:	2900      	cmp	r1, #0
 8004982:	6863      	ldr	r3, [r4, #4]
 8004984:	dd0b      	ble.n	800499e <_printf_float+0x1ae>
 8004986:	6121      	str	r1, [r4, #16]
 8004988:	b913      	cbnz	r3, 8004990 <_printf_float+0x1a0>
 800498a:	6822      	ldr	r2, [r4, #0]
 800498c:	07d0      	lsls	r0, r2, #31
 800498e:	d502      	bpl.n	8004996 <_printf_float+0x1a6>
 8004990:	3301      	adds	r3, #1
 8004992:	440b      	add	r3, r1
 8004994:	6123      	str	r3, [r4, #16]
 8004996:	65a1      	str	r1, [r4, #88]	; 0x58
 8004998:	f04f 0900 	mov.w	r9, #0
 800499c:	e7de      	b.n	800495c <_printf_float+0x16c>
 800499e:	b913      	cbnz	r3, 80049a6 <_printf_float+0x1b6>
 80049a0:	6822      	ldr	r2, [r4, #0]
 80049a2:	07d2      	lsls	r2, r2, #31
 80049a4:	d501      	bpl.n	80049aa <_printf_float+0x1ba>
 80049a6:	3302      	adds	r3, #2
 80049a8:	e7f4      	b.n	8004994 <_printf_float+0x1a4>
 80049aa:	2301      	movs	r3, #1
 80049ac:	e7f2      	b.n	8004994 <_printf_float+0x1a4>
 80049ae:	f04f 0b67 	mov.w	fp, #103	; 0x67
 80049b2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80049b4:	4299      	cmp	r1, r3
 80049b6:	db05      	blt.n	80049c4 <_printf_float+0x1d4>
 80049b8:	6823      	ldr	r3, [r4, #0]
 80049ba:	6121      	str	r1, [r4, #16]
 80049bc:	07d8      	lsls	r0, r3, #31
 80049be:	d5ea      	bpl.n	8004996 <_printf_float+0x1a6>
 80049c0:	1c4b      	adds	r3, r1, #1
 80049c2:	e7e7      	b.n	8004994 <_printf_float+0x1a4>
 80049c4:	2900      	cmp	r1, #0
 80049c6:	bfd4      	ite	le
 80049c8:	f1c1 0202 	rsble	r2, r1, #2
 80049cc:	2201      	movgt	r2, #1
 80049ce:	4413      	add	r3, r2
 80049d0:	e7e0      	b.n	8004994 <_printf_float+0x1a4>
 80049d2:	6823      	ldr	r3, [r4, #0]
 80049d4:	055a      	lsls	r2, r3, #21
 80049d6:	d407      	bmi.n	80049e8 <_printf_float+0x1f8>
 80049d8:	6923      	ldr	r3, [r4, #16]
 80049da:	4642      	mov	r2, r8
 80049dc:	4631      	mov	r1, r6
 80049de:	4628      	mov	r0, r5
 80049e0:	47b8      	blx	r7
 80049e2:	3001      	adds	r0, #1
 80049e4:	d12c      	bne.n	8004a40 <_printf_float+0x250>
 80049e6:	e764      	b.n	80048b2 <_printf_float+0xc2>
 80049e8:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80049ec:	f240 80e0 	bls.w	8004bb0 <_printf_float+0x3c0>
 80049f0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80049f4:	2200      	movs	r2, #0
 80049f6:	2300      	movs	r3, #0
 80049f8:	f7fc f876 	bl	8000ae8 <__aeabi_dcmpeq>
 80049fc:	2800      	cmp	r0, #0
 80049fe:	d034      	beq.n	8004a6a <_printf_float+0x27a>
 8004a00:	4a37      	ldr	r2, [pc, #220]	; (8004ae0 <_printf_float+0x2f0>)
 8004a02:	2301      	movs	r3, #1
 8004a04:	4631      	mov	r1, r6
 8004a06:	4628      	mov	r0, r5
 8004a08:	47b8      	blx	r7
 8004a0a:	3001      	adds	r0, #1
 8004a0c:	f43f af51 	beq.w	80048b2 <_printf_float+0xc2>
 8004a10:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004a14:	429a      	cmp	r2, r3
 8004a16:	db02      	blt.n	8004a1e <_printf_float+0x22e>
 8004a18:	6823      	ldr	r3, [r4, #0]
 8004a1a:	07d8      	lsls	r0, r3, #31
 8004a1c:	d510      	bpl.n	8004a40 <_printf_float+0x250>
 8004a1e:	ee18 3a10 	vmov	r3, s16
 8004a22:	4652      	mov	r2, sl
 8004a24:	4631      	mov	r1, r6
 8004a26:	4628      	mov	r0, r5
 8004a28:	47b8      	blx	r7
 8004a2a:	3001      	adds	r0, #1
 8004a2c:	f43f af41 	beq.w	80048b2 <_printf_float+0xc2>
 8004a30:	f04f 0800 	mov.w	r8, #0
 8004a34:	f104 091a 	add.w	r9, r4, #26
 8004a38:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004a3a:	3b01      	subs	r3, #1
 8004a3c:	4543      	cmp	r3, r8
 8004a3e:	dc09      	bgt.n	8004a54 <_printf_float+0x264>
 8004a40:	6823      	ldr	r3, [r4, #0]
 8004a42:	079b      	lsls	r3, r3, #30
 8004a44:	f100 8105 	bmi.w	8004c52 <_printf_float+0x462>
 8004a48:	68e0      	ldr	r0, [r4, #12]
 8004a4a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004a4c:	4298      	cmp	r0, r3
 8004a4e:	bfb8      	it	lt
 8004a50:	4618      	movlt	r0, r3
 8004a52:	e730      	b.n	80048b6 <_printf_float+0xc6>
 8004a54:	2301      	movs	r3, #1
 8004a56:	464a      	mov	r2, r9
 8004a58:	4631      	mov	r1, r6
 8004a5a:	4628      	mov	r0, r5
 8004a5c:	47b8      	blx	r7
 8004a5e:	3001      	adds	r0, #1
 8004a60:	f43f af27 	beq.w	80048b2 <_printf_float+0xc2>
 8004a64:	f108 0801 	add.w	r8, r8, #1
 8004a68:	e7e6      	b.n	8004a38 <_printf_float+0x248>
 8004a6a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004a6c:	2b00      	cmp	r3, #0
 8004a6e:	dc39      	bgt.n	8004ae4 <_printf_float+0x2f4>
 8004a70:	4a1b      	ldr	r2, [pc, #108]	; (8004ae0 <_printf_float+0x2f0>)
 8004a72:	2301      	movs	r3, #1
 8004a74:	4631      	mov	r1, r6
 8004a76:	4628      	mov	r0, r5
 8004a78:	47b8      	blx	r7
 8004a7a:	3001      	adds	r0, #1
 8004a7c:	f43f af19 	beq.w	80048b2 <_printf_float+0xc2>
 8004a80:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004a84:	4313      	orrs	r3, r2
 8004a86:	d102      	bne.n	8004a8e <_printf_float+0x29e>
 8004a88:	6823      	ldr	r3, [r4, #0]
 8004a8a:	07d9      	lsls	r1, r3, #31
 8004a8c:	d5d8      	bpl.n	8004a40 <_printf_float+0x250>
 8004a8e:	ee18 3a10 	vmov	r3, s16
 8004a92:	4652      	mov	r2, sl
 8004a94:	4631      	mov	r1, r6
 8004a96:	4628      	mov	r0, r5
 8004a98:	47b8      	blx	r7
 8004a9a:	3001      	adds	r0, #1
 8004a9c:	f43f af09 	beq.w	80048b2 <_printf_float+0xc2>
 8004aa0:	f04f 0900 	mov.w	r9, #0
 8004aa4:	f104 0a1a 	add.w	sl, r4, #26
 8004aa8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004aaa:	425b      	negs	r3, r3
 8004aac:	454b      	cmp	r3, r9
 8004aae:	dc01      	bgt.n	8004ab4 <_printf_float+0x2c4>
 8004ab0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004ab2:	e792      	b.n	80049da <_printf_float+0x1ea>
 8004ab4:	2301      	movs	r3, #1
 8004ab6:	4652      	mov	r2, sl
 8004ab8:	4631      	mov	r1, r6
 8004aba:	4628      	mov	r0, r5
 8004abc:	47b8      	blx	r7
 8004abe:	3001      	adds	r0, #1
 8004ac0:	f43f aef7 	beq.w	80048b2 <_printf_float+0xc2>
 8004ac4:	f109 0901 	add.w	r9, r9, #1
 8004ac8:	e7ee      	b.n	8004aa8 <_printf_float+0x2b8>
 8004aca:	bf00      	nop
 8004acc:	7fefffff 	.word	0x7fefffff
 8004ad0:	08007664 	.word	0x08007664
 8004ad4:	08007668 	.word	0x08007668
 8004ad8:	08007670 	.word	0x08007670
 8004adc:	0800766c 	.word	0x0800766c
 8004ae0:	08007674 	.word	0x08007674
 8004ae4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004ae6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8004ae8:	429a      	cmp	r2, r3
 8004aea:	bfa8      	it	ge
 8004aec:	461a      	movge	r2, r3
 8004aee:	2a00      	cmp	r2, #0
 8004af0:	4691      	mov	r9, r2
 8004af2:	dc37      	bgt.n	8004b64 <_printf_float+0x374>
 8004af4:	f04f 0b00 	mov.w	fp, #0
 8004af8:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004afc:	f104 021a 	add.w	r2, r4, #26
 8004b00:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8004b02:	9305      	str	r3, [sp, #20]
 8004b04:	eba3 0309 	sub.w	r3, r3, r9
 8004b08:	455b      	cmp	r3, fp
 8004b0a:	dc33      	bgt.n	8004b74 <_printf_float+0x384>
 8004b0c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004b10:	429a      	cmp	r2, r3
 8004b12:	db3b      	blt.n	8004b8c <_printf_float+0x39c>
 8004b14:	6823      	ldr	r3, [r4, #0]
 8004b16:	07da      	lsls	r2, r3, #31
 8004b18:	d438      	bmi.n	8004b8c <_printf_float+0x39c>
 8004b1a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004b1c:	9a05      	ldr	r2, [sp, #20]
 8004b1e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8004b20:	1a9a      	subs	r2, r3, r2
 8004b22:	eba3 0901 	sub.w	r9, r3, r1
 8004b26:	4591      	cmp	r9, r2
 8004b28:	bfa8      	it	ge
 8004b2a:	4691      	movge	r9, r2
 8004b2c:	f1b9 0f00 	cmp.w	r9, #0
 8004b30:	dc35      	bgt.n	8004b9e <_printf_float+0x3ae>
 8004b32:	f04f 0800 	mov.w	r8, #0
 8004b36:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004b3a:	f104 0a1a 	add.w	sl, r4, #26
 8004b3e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004b42:	1a9b      	subs	r3, r3, r2
 8004b44:	eba3 0309 	sub.w	r3, r3, r9
 8004b48:	4543      	cmp	r3, r8
 8004b4a:	f77f af79 	ble.w	8004a40 <_printf_float+0x250>
 8004b4e:	2301      	movs	r3, #1
 8004b50:	4652      	mov	r2, sl
 8004b52:	4631      	mov	r1, r6
 8004b54:	4628      	mov	r0, r5
 8004b56:	47b8      	blx	r7
 8004b58:	3001      	adds	r0, #1
 8004b5a:	f43f aeaa 	beq.w	80048b2 <_printf_float+0xc2>
 8004b5e:	f108 0801 	add.w	r8, r8, #1
 8004b62:	e7ec      	b.n	8004b3e <_printf_float+0x34e>
 8004b64:	4613      	mov	r3, r2
 8004b66:	4631      	mov	r1, r6
 8004b68:	4642      	mov	r2, r8
 8004b6a:	4628      	mov	r0, r5
 8004b6c:	47b8      	blx	r7
 8004b6e:	3001      	adds	r0, #1
 8004b70:	d1c0      	bne.n	8004af4 <_printf_float+0x304>
 8004b72:	e69e      	b.n	80048b2 <_printf_float+0xc2>
 8004b74:	2301      	movs	r3, #1
 8004b76:	4631      	mov	r1, r6
 8004b78:	4628      	mov	r0, r5
 8004b7a:	9205      	str	r2, [sp, #20]
 8004b7c:	47b8      	blx	r7
 8004b7e:	3001      	adds	r0, #1
 8004b80:	f43f ae97 	beq.w	80048b2 <_printf_float+0xc2>
 8004b84:	9a05      	ldr	r2, [sp, #20]
 8004b86:	f10b 0b01 	add.w	fp, fp, #1
 8004b8a:	e7b9      	b.n	8004b00 <_printf_float+0x310>
 8004b8c:	ee18 3a10 	vmov	r3, s16
 8004b90:	4652      	mov	r2, sl
 8004b92:	4631      	mov	r1, r6
 8004b94:	4628      	mov	r0, r5
 8004b96:	47b8      	blx	r7
 8004b98:	3001      	adds	r0, #1
 8004b9a:	d1be      	bne.n	8004b1a <_printf_float+0x32a>
 8004b9c:	e689      	b.n	80048b2 <_printf_float+0xc2>
 8004b9e:	9a05      	ldr	r2, [sp, #20]
 8004ba0:	464b      	mov	r3, r9
 8004ba2:	4442      	add	r2, r8
 8004ba4:	4631      	mov	r1, r6
 8004ba6:	4628      	mov	r0, r5
 8004ba8:	47b8      	blx	r7
 8004baa:	3001      	adds	r0, #1
 8004bac:	d1c1      	bne.n	8004b32 <_printf_float+0x342>
 8004bae:	e680      	b.n	80048b2 <_printf_float+0xc2>
 8004bb0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004bb2:	2a01      	cmp	r2, #1
 8004bb4:	dc01      	bgt.n	8004bba <_printf_float+0x3ca>
 8004bb6:	07db      	lsls	r3, r3, #31
 8004bb8:	d538      	bpl.n	8004c2c <_printf_float+0x43c>
 8004bba:	2301      	movs	r3, #1
 8004bbc:	4642      	mov	r2, r8
 8004bbe:	4631      	mov	r1, r6
 8004bc0:	4628      	mov	r0, r5
 8004bc2:	47b8      	blx	r7
 8004bc4:	3001      	adds	r0, #1
 8004bc6:	f43f ae74 	beq.w	80048b2 <_printf_float+0xc2>
 8004bca:	ee18 3a10 	vmov	r3, s16
 8004bce:	4652      	mov	r2, sl
 8004bd0:	4631      	mov	r1, r6
 8004bd2:	4628      	mov	r0, r5
 8004bd4:	47b8      	blx	r7
 8004bd6:	3001      	adds	r0, #1
 8004bd8:	f43f ae6b 	beq.w	80048b2 <_printf_float+0xc2>
 8004bdc:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8004be0:	2200      	movs	r2, #0
 8004be2:	2300      	movs	r3, #0
 8004be4:	f7fb ff80 	bl	8000ae8 <__aeabi_dcmpeq>
 8004be8:	b9d8      	cbnz	r0, 8004c22 <_printf_float+0x432>
 8004bea:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004bec:	f108 0201 	add.w	r2, r8, #1
 8004bf0:	3b01      	subs	r3, #1
 8004bf2:	4631      	mov	r1, r6
 8004bf4:	4628      	mov	r0, r5
 8004bf6:	47b8      	blx	r7
 8004bf8:	3001      	adds	r0, #1
 8004bfa:	d10e      	bne.n	8004c1a <_printf_float+0x42a>
 8004bfc:	e659      	b.n	80048b2 <_printf_float+0xc2>
 8004bfe:	2301      	movs	r3, #1
 8004c00:	4652      	mov	r2, sl
 8004c02:	4631      	mov	r1, r6
 8004c04:	4628      	mov	r0, r5
 8004c06:	47b8      	blx	r7
 8004c08:	3001      	adds	r0, #1
 8004c0a:	f43f ae52 	beq.w	80048b2 <_printf_float+0xc2>
 8004c0e:	f108 0801 	add.w	r8, r8, #1
 8004c12:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004c14:	3b01      	subs	r3, #1
 8004c16:	4543      	cmp	r3, r8
 8004c18:	dcf1      	bgt.n	8004bfe <_printf_float+0x40e>
 8004c1a:	464b      	mov	r3, r9
 8004c1c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8004c20:	e6dc      	b.n	80049dc <_printf_float+0x1ec>
 8004c22:	f04f 0800 	mov.w	r8, #0
 8004c26:	f104 0a1a 	add.w	sl, r4, #26
 8004c2a:	e7f2      	b.n	8004c12 <_printf_float+0x422>
 8004c2c:	2301      	movs	r3, #1
 8004c2e:	4642      	mov	r2, r8
 8004c30:	e7df      	b.n	8004bf2 <_printf_float+0x402>
 8004c32:	2301      	movs	r3, #1
 8004c34:	464a      	mov	r2, r9
 8004c36:	4631      	mov	r1, r6
 8004c38:	4628      	mov	r0, r5
 8004c3a:	47b8      	blx	r7
 8004c3c:	3001      	adds	r0, #1
 8004c3e:	f43f ae38 	beq.w	80048b2 <_printf_float+0xc2>
 8004c42:	f108 0801 	add.w	r8, r8, #1
 8004c46:	68e3      	ldr	r3, [r4, #12]
 8004c48:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8004c4a:	1a5b      	subs	r3, r3, r1
 8004c4c:	4543      	cmp	r3, r8
 8004c4e:	dcf0      	bgt.n	8004c32 <_printf_float+0x442>
 8004c50:	e6fa      	b.n	8004a48 <_printf_float+0x258>
 8004c52:	f04f 0800 	mov.w	r8, #0
 8004c56:	f104 0919 	add.w	r9, r4, #25
 8004c5a:	e7f4      	b.n	8004c46 <_printf_float+0x456>

08004c5c <_printf_common>:
 8004c5c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004c60:	4616      	mov	r6, r2
 8004c62:	4699      	mov	r9, r3
 8004c64:	688a      	ldr	r2, [r1, #8]
 8004c66:	690b      	ldr	r3, [r1, #16]
 8004c68:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004c6c:	4293      	cmp	r3, r2
 8004c6e:	bfb8      	it	lt
 8004c70:	4613      	movlt	r3, r2
 8004c72:	6033      	str	r3, [r6, #0]
 8004c74:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004c78:	4607      	mov	r7, r0
 8004c7a:	460c      	mov	r4, r1
 8004c7c:	b10a      	cbz	r2, 8004c82 <_printf_common+0x26>
 8004c7e:	3301      	adds	r3, #1
 8004c80:	6033      	str	r3, [r6, #0]
 8004c82:	6823      	ldr	r3, [r4, #0]
 8004c84:	0699      	lsls	r1, r3, #26
 8004c86:	bf42      	ittt	mi
 8004c88:	6833      	ldrmi	r3, [r6, #0]
 8004c8a:	3302      	addmi	r3, #2
 8004c8c:	6033      	strmi	r3, [r6, #0]
 8004c8e:	6825      	ldr	r5, [r4, #0]
 8004c90:	f015 0506 	ands.w	r5, r5, #6
 8004c94:	d106      	bne.n	8004ca4 <_printf_common+0x48>
 8004c96:	f104 0a19 	add.w	sl, r4, #25
 8004c9a:	68e3      	ldr	r3, [r4, #12]
 8004c9c:	6832      	ldr	r2, [r6, #0]
 8004c9e:	1a9b      	subs	r3, r3, r2
 8004ca0:	42ab      	cmp	r3, r5
 8004ca2:	dc26      	bgt.n	8004cf2 <_printf_common+0x96>
 8004ca4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004ca8:	1e13      	subs	r3, r2, #0
 8004caa:	6822      	ldr	r2, [r4, #0]
 8004cac:	bf18      	it	ne
 8004cae:	2301      	movne	r3, #1
 8004cb0:	0692      	lsls	r2, r2, #26
 8004cb2:	d42b      	bmi.n	8004d0c <_printf_common+0xb0>
 8004cb4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004cb8:	4649      	mov	r1, r9
 8004cba:	4638      	mov	r0, r7
 8004cbc:	47c0      	blx	r8
 8004cbe:	3001      	adds	r0, #1
 8004cc0:	d01e      	beq.n	8004d00 <_printf_common+0xa4>
 8004cc2:	6823      	ldr	r3, [r4, #0]
 8004cc4:	68e5      	ldr	r5, [r4, #12]
 8004cc6:	6832      	ldr	r2, [r6, #0]
 8004cc8:	f003 0306 	and.w	r3, r3, #6
 8004ccc:	2b04      	cmp	r3, #4
 8004cce:	bf08      	it	eq
 8004cd0:	1aad      	subeq	r5, r5, r2
 8004cd2:	68a3      	ldr	r3, [r4, #8]
 8004cd4:	6922      	ldr	r2, [r4, #16]
 8004cd6:	bf0c      	ite	eq
 8004cd8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004cdc:	2500      	movne	r5, #0
 8004cde:	4293      	cmp	r3, r2
 8004ce0:	bfc4      	itt	gt
 8004ce2:	1a9b      	subgt	r3, r3, r2
 8004ce4:	18ed      	addgt	r5, r5, r3
 8004ce6:	2600      	movs	r6, #0
 8004ce8:	341a      	adds	r4, #26
 8004cea:	42b5      	cmp	r5, r6
 8004cec:	d11a      	bne.n	8004d24 <_printf_common+0xc8>
 8004cee:	2000      	movs	r0, #0
 8004cf0:	e008      	b.n	8004d04 <_printf_common+0xa8>
 8004cf2:	2301      	movs	r3, #1
 8004cf4:	4652      	mov	r2, sl
 8004cf6:	4649      	mov	r1, r9
 8004cf8:	4638      	mov	r0, r7
 8004cfa:	47c0      	blx	r8
 8004cfc:	3001      	adds	r0, #1
 8004cfe:	d103      	bne.n	8004d08 <_printf_common+0xac>
 8004d00:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004d04:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004d08:	3501      	adds	r5, #1
 8004d0a:	e7c6      	b.n	8004c9a <_printf_common+0x3e>
 8004d0c:	18e1      	adds	r1, r4, r3
 8004d0e:	1c5a      	adds	r2, r3, #1
 8004d10:	2030      	movs	r0, #48	; 0x30
 8004d12:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004d16:	4422      	add	r2, r4
 8004d18:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004d1c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004d20:	3302      	adds	r3, #2
 8004d22:	e7c7      	b.n	8004cb4 <_printf_common+0x58>
 8004d24:	2301      	movs	r3, #1
 8004d26:	4622      	mov	r2, r4
 8004d28:	4649      	mov	r1, r9
 8004d2a:	4638      	mov	r0, r7
 8004d2c:	47c0      	blx	r8
 8004d2e:	3001      	adds	r0, #1
 8004d30:	d0e6      	beq.n	8004d00 <_printf_common+0xa4>
 8004d32:	3601      	adds	r6, #1
 8004d34:	e7d9      	b.n	8004cea <_printf_common+0x8e>
	...

08004d38 <_printf_i>:
 8004d38:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004d3c:	7e0f      	ldrb	r7, [r1, #24]
 8004d3e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8004d40:	2f78      	cmp	r7, #120	; 0x78
 8004d42:	4691      	mov	r9, r2
 8004d44:	4680      	mov	r8, r0
 8004d46:	460c      	mov	r4, r1
 8004d48:	469a      	mov	sl, r3
 8004d4a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8004d4e:	d807      	bhi.n	8004d60 <_printf_i+0x28>
 8004d50:	2f62      	cmp	r7, #98	; 0x62
 8004d52:	d80a      	bhi.n	8004d6a <_printf_i+0x32>
 8004d54:	2f00      	cmp	r7, #0
 8004d56:	f000 80d8 	beq.w	8004f0a <_printf_i+0x1d2>
 8004d5a:	2f58      	cmp	r7, #88	; 0x58
 8004d5c:	f000 80a3 	beq.w	8004ea6 <_printf_i+0x16e>
 8004d60:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004d64:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004d68:	e03a      	b.n	8004de0 <_printf_i+0xa8>
 8004d6a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004d6e:	2b15      	cmp	r3, #21
 8004d70:	d8f6      	bhi.n	8004d60 <_printf_i+0x28>
 8004d72:	a101      	add	r1, pc, #4	; (adr r1, 8004d78 <_printf_i+0x40>)
 8004d74:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004d78:	08004dd1 	.word	0x08004dd1
 8004d7c:	08004de5 	.word	0x08004de5
 8004d80:	08004d61 	.word	0x08004d61
 8004d84:	08004d61 	.word	0x08004d61
 8004d88:	08004d61 	.word	0x08004d61
 8004d8c:	08004d61 	.word	0x08004d61
 8004d90:	08004de5 	.word	0x08004de5
 8004d94:	08004d61 	.word	0x08004d61
 8004d98:	08004d61 	.word	0x08004d61
 8004d9c:	08004d61 	.word	0x08004d61
 8004da0:	08004d61 	.word	0x08004d61
 8004da4:	08004ef1 	.word	0x08004ef1
 8004da8:	08004e15 	.word	0x08004e15
 8004dac:	08004ed3 	.word	0x08004ed3
 8004db0:	08004d61 	.word	0x08004d61
 8004db4:	08004d61 	.word	0x08004d61
 8004db8:	08004f13 	.word	0x08004f13
 8004dbc:	08004d61 	.word	0x08004d61
 8004dc0:	08004e15 	.word	0x08004e15
 8004dc4:	08004d61 	.word	0x08004d61
 8004dc8:	08004d61 	.word	0x08004d61
 8004dcc:	08004edb 	.word	0x08004edb
 8004dd0:	682b      	ldr	r3, [r5, #0]
 8004dd2:	1d1a      	adds	r2, r3, #4
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	602a      	str	r2, [r5, #0]
 8004dd8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004ddc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004de0:	2301      	movs	r3, #1
 8004de2:	e0a3      	b.n	8004f2c <_printf_i+0x1f4>
 8004de4:	6820      	ldr	r0, [r4, #0]
 8004de6:	6829      	ldr	r1, [r5, #0]
 8004de8:	0606      	lsls	r6, r0, #24
 8004dea:	f101 0304 	add.w	r3, r1, #4
 8004dee:	d50a      	bpl.n	8004e06 <_printf_i+0xce>
 8004df0:	680e      	ldr	r6, [r1, #0]
 8004df2:	602b      	str	r3, [r5, #0]
 8004df4:	2e00      	cmp	r6, #0
 8004df6:	da03      	bge.n	8004e00 <_printf_i+0xc8>
 8004df8:	232d      	movs	r3, #45	; 0x2d
 8004dfa:	4276      	negs	r6, r6
 8004dfc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004e00:	485e      	ldr	r0, [pc, #376]	; (8004f7c <_printf_i+0x244>)
 8004e02:	230a      	movs	r3, #10
 8004e04:	e019      	b.n	8004e3a <_printf_i+0x102>
 8004e06:	680e      	ldr	r6, [r1, #0]
 8004e08:	602b      	str	r3, [r5, #0]
 8004e0a:	f010 0f40 	tst.w	r0, #64	; 0x40
 8004e0e:	bf18      	it	ne
 8004e10:	b236      	sxthne	r6, r6
 8004e12:	e7ef      	b.n	8004df4 <_printf_i+0xbc>
 8004e14:	682b      	ldr	r3, [r5, #0]
 8004e16:	6820      	ldr	r0, [r4, #0]
 8004e18:	1d19      	adds	r1, r3, #4
 8004e1a:	6029      	str	r1, [r5, #0]
 8004e1c:	0601      	lsls	r1, r0, #24
 8004e1e:	d501      	bpl.n	8004e24 <_printf_i+0xec>
 8004e20:	681e      	ldr	r6, [r3, #0]
 8004e22:	e002      	b.n	8004e2a <_printf_i+0xf2>
 8004e24:	0646      	lsls	r6, r0, #25
 8004e26:	d5fb      	bpl.n	8004e20 <_printf_i+0xe8>
 8004e28:	881e      	ldrh	r6, [r3, #0]
 8004e2a:	4854      	ldr	r0, [pc, #336]	; (8004f7c <_printf_i+0x244>)
 8004e2c:	2f6f      	cmp	r7, #111	; 0x6f
 8004e2e:	bf0c      	ite	eq
 8004e30:	2308      	moveq	r3, #8
 8004e32:	230a      	movne	r3, #10
 8004e34:	2100      	movs	r1, #0
 8004e36:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004e3a:	6865      	ldr	r5, [r4, #4]
 8004e3c:	60a5      	str	r5, [r4, #8]
 8004e3e:	2d00      	cmp	r5, #0
 8004e40:	bfa2      	ittt	ge
 8004e42:	6821      	ldrge	r1, [r4, #0]
 8004e44:	f021 0104 	bicge.w	r1, r1, #4
 8004e48:	6021      	strge	r1, [r4, #0]
 8004e4a:	b90e      	cbnz	r6, 8004e50 <_printf_i+0x118>
 8004e4c:	2d00      	cmp	r5, #0
 8004e4e:	d04d      	beq.n	8004eec <_printf_i+0x1b4>
 8004e50:	4615      	mov	r5, r2
 8004e52:	fbb6 f1f3 	udiv	r1, r6, r3
 8004e56:	fb03 6711 	mls	r7, r3, r1, r6
 8004e5a:	5dc7      	ldrb	r7, [r0, r7]
 8004e5c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8004e60:	4637      	mov	r7, r6
 8004e62:	42bb      	cmp	r3, r7
 8004e64:	460e      	mov	r6, r1
 8004e66:	d9f4      	bls.n	8004e52 <_printf_i+0x11a>
 8004e68:	2b08      	cmp	r3, #8
 8004e6a:	d10b      	bne.n	8004e84 <_printf_i+0x14c>
 8004e6c:	6823      	ldr	r3, [r4, #0]
 8004e6e:	07de      	lsls	r6, r3, #31
 8004e70:	d508      	bpl.n	8004e84 <_printf_i+0x14c>
 8004e72:	6923      	ldr	r3, [r4, #16]
 8004e74:	6861      	ldr	r1, [r4, #4]
 8004e76:	4299      	cmp	r1, r3
 8004e78:	bfde      	ittt	le
 8004e7a:	2330      	movle	r3, #48	; 0x30
 8004e7c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004e80:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8004e84:	1b52      	subs	r2, r2, r5
 8004e86:	6122      	str	r2, [r4, #16]
 8004e88:	f8cd a000 	str.w	sl, [sp]
 8004e8c:	464b      	mov	r3, r9
 8004e8e:	aa03      	add	r2, sp, #12
 8004e90:	4621      	mov	r1, r4
 8004e92:	4640      	mov	r0, r8
 8004e94:	f7ff fee2 	bl	8004c5c <_printf_common>
 8004e98:	3001      	adds	r0, #1
 8004e9a:	d14c      	bne.n	8004f36 <_printf_i+0x1fe>
 8004e9c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004ea0:	b004      	add	sp, #16
 8004ea2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004ea6:	4835      	ldr	r0, [pc, #212]	; (8004f7c <_printf_i+0x244>)
 8004ea8:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8004eac:	6829      	ldr	r1, [r5, #0]
 8004eae:	6823      	ldr	r3, [r4, #0]
 8004eb0:	f851 6b04 	ldr.w	r6, [r1], #4
 8004eb4:	6029      	str	r1, [r5, #0]
 8004eb6:	061d      	lsls	r5, r3, #24
 8004eb8:	d514      	bpl.n	8004ee4 <_printf_i+0x1ac>
 8004eba:	07df      	lsls	r7, r3, #31
 8004ebc:	bf44      	itt	mi
 8004ebe:	f043 0320 	orrmi.w	r3, r3, #32
 8004ec2:	6023      	strmi	r3, [r4, #0]
 8004ec4:	b91e      	cbnz	r6, 8004ece <_printf_i+0x196>
 8004ec6:	6823      	ldr	r3, [r4, #0]
 8004ec8:	f023 0320 	bic.w	r3, r3, #32
 8004ecc:	6023      	str	r3, [r4, #0]
 8004ece:	2310      	movs	r3, #16
 8004ed0:	e7b0      	b.n	8004e34 <_printf_i+0xfc>
 8004ed2:	6823      	ldr	r3, [r4, #0]
 8004ed4:	f043 0320 	orr.w	r3, r3, #32
 8004ed8:	6023      	str	r3, [r4, #0]
 8004eda:	2378      	movs	r3, #120	; 0x78
 8004edc:	4828      	ldr	r0, [pc, #160]	; (8004f80 <_printf_i+0x248>)
 8004ede:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004ee2:	e7e3      	b.n	8004eac <_printf_i+0x174>
 8004ee4:	0659      	lsls	r1, r3, #25
 8004ee6:	bf48      	it	mi
 8004ee8:	b2b6      	uxthmi	r6, r6
 8004eea:	e7e6      	b.n	8004eba <_printf_i+0x182>
 8004eec:	4615      	mov	r5, r2
 8004eee:	e7bb      	b.n	8004e68 <_printf_i+0x130>
 8004ef0:	682b      	ldr	r3, [r5, #0]
 8004ef2:	6826      	ldr	r6, [r4, #0]
 8004ef4:	6961      	ldr	r1, [r4, #20]
 8004ef6:	1d18      	adds	r0, r3, #4
 8004ef8:	6028      	str	r0, [r5, #0]
 8004efa:	0635      	lsls	r5, r6, #24
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	d501      	bpl.n	8004f04 <_printf_i+0x1cc>
 8004f00:	6019      	str	r1, [r3, #0]
 8004f02:	e002      	b.n	8004f0a <_printf_i+0x1d2>
 8004f04:	0670      	lsls	r0, r6, #25
 8004f06:	d5fb      	bpl.n	8004f00 <_printf_i+0x1c8>
 8004f08:	8019      	strh	r1, [r3, #0]
 8004f0a:	2300      	movs	r3, #0
 8004f0c:	6123      	str	r3, [r4, #16]
 8004f0e:	4615      	mov	r5, r2
 8004f10:	e7ba      	b.n	8004e88 <_printf_i+0x150>
 8004f12:	682b      	ldr	r3, [r5, #0]
 8004f14:	1d1a      	adds	r2, r3, #4
 8004f16:	602a      	str	r2, [r5, #0]
 8004f18:	681d      	ldr	r5, [r3, #0]
 8004f1a:	6862      	ldr	r2, [r4, #4]
 8004f1c:	2100      	movs	r1, #0
 8004f1e:	4628      	mov	r0, r5
 8004f20:	f7fb f96e 	bl	8000200 <memchr>
 8004f24:	b108      	cbz	r0, 8004f2a <_printf_i+0x1f2>
 8004f26:	1b40      	subs	r0, r0, r5
 8004f28:	6060      	str	r0, [r4, #4]
 8004f2a:	6863      	ldr	r3, [r4, #4]
 8004f2c:	6123      	str	r3, [r4, #16]
 8004f2e:	2300      	movs	r3, #0
 8004f30:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004f34:	e7a8      	b.n	8004e88 <_printf_i+0x150>
 8004f36:	6923      	ldr	r3, [r4, #16]
 8004f38:	462a      	mov	r2, r5
 8004f3a:	4649      	mov	r1, r9
 8004f3c:	4640      	mov	r0, r8
 8004f3e:	47d0      	blx	sl
 8004f40:	3001      	adds	r0, #1
 8004f42:	d0ab      	beq.n	8004e9c <_printf_i+0x164>
 8004f44:	6823      	ldr	r3, [r4, #0]
 8004f46:	079b      	lsls	r3, r3, #30
 8004f48:	d413      	bmi.n	8004f72 <_printf_i+0x23a>
 8004f4a:	68e0      	ldr	r0, [r4, #12]
 8004f4c:	9b03      	ldr	r3, [sp, #12]
 8004f4e:	4298      	cmp	r0, r3
 8004f50:	bfb8      	it	lt
 8004f52:	4618      	movlt	r0, r3
 8004f54:	e7a4      	b.n	8004ea0 <_printf_i+0x168>
 8004f56:	2301      	movs	r3, #1
 8004f58:	4632      	mov	r2, r6
 8004f5a:	4649      	mov	r1, r9
 8004f5c:	4640      	mov	r0, r8
 8004f5e:	47d0      	blx	sl
 8004f60:	3001      	adds	r0, #1
 8004f62:	d09b      	beq.n	8004e9c <_printf_i+0x164>
 8004f64:	3501      	adds	r5, #1
 8004f66:	68e3      	ldr	r3, [r4, #12]
 8004f68:	9903      	ldr	r1, [sp, #12]
 8004f6a:	1a5b      	subs	r3, r3, r1
 8004f6c:	42ab      	cmp	r3, r5
 8004f6e:	dcf2      	bgt.n	8004f56 <_printf_i+0x21e>
 8004f70:	e7eb      	b.n	8004f4a <_printf_i+0x212>
 8004f72:	2500      	movs	r5, #0
 8004f74:	f104 0619 	add.w	r6, r4, #25
 8004f78:	e7f5      	b.n	8004f66 <_printf_i+0x22e>
 8004f7a:	bf00      	nop
 8004f7c:	08007676 	.word	0x08007676
 8004f80:	08007687 	.word	0x08007687

08004f84 <iprintf>:
 8004f84:	b40f      	push	{r0, r1, r2, r3}
 8004f86:	4b0a      	ldr	r3, [pc, #40]	; (8004fb0 <iprintf+0x2c>)
 8004f88:	b513      	push	{r0, r1, r4, lr}
 8004f8a:	681c      	ldr	r4, [r3, #0]
 8004f8c:	b124      	cbz	r4, 8004f98 <iprintf+0x14>
 8004f8e:	69a3      	ldr	r3, [r4, #24]
 8004f90:	b913      	cbnz	r3, 8004f98 <iprintf+0x14>
 8004f92:	4620      	mov	r0, r4
 8004f94:	f001 f8f8 	bl	8006188 <__sinit>
 8004f98:	ab05      	add	r3, sp, #20
 8004f9a:	9a04      	ldr	r2, [sp, #16]
 8004f9c:	68a1      	ldr	r1, [r4, #8]
 8004f9e:	9301      	str	r3, [sp, #4]
 8004fa0:	4620      	mov	r0, r4
 8004fa2:	f002 f803 	bl	8006fac <_vfiprintf_r>
 8004fa6:	b002      	add	sp, #8
 8004fa8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004fac:	b004      	add	sp, #16
 8004fae:	4770      	bx	lr
 8004fb0:	20000010 	.word	0x20000010

08004fb4 <_puts_r>:
 8004fb4:	b570      	push	{r4, r5, r6, lr}
 8004fb6:	460e      	mov	r6, r1
 8004fb8:	4605      	mov	r5, r0
 8004fba:	b118      	cbz	r0, 8004fc4 <_puts_r+0x10>
 8004fbc:	6983      	ldr	r3, [r0, #24]
 8004fbe:	b90b      	cbnz	r3, 8004fc4 <_puts_r+0x10>
 8004fc0:	f001 f8e2 	bl	8006188 <__sinit>
 8004fc4:	69ab      	ldr	r3, [r5, #24]
 8004fc6:	68ac      	ldr	r4, [r5, #8]
 8004fc8:	b913      	cbnz	r3, 8004fd0 <_puts_r+0x1c>
 8004fca:	4628      	mov	r0, r5
 8004fcc:	f001 f8dc 	bl	8006188 <__sinit>
 8004fd0:	4b2c      	ldr	r3, [pc, #176]	; (8005084 <_puts_r+0xd0>)
 8004fd2:	429c      	cmp	r4, r3
 8004fd4:	d120      	bne.n	8005018 <_puts_r+0x64>
 8004fd6:	686c      	ldr	r4, [r5, #4]
 8004fd8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004fda:	07db      	lsls	r3, r3, #31
 8004fdc:	d405      	bmi.n	8004fea <_puts_r+0x36>
 8004fde:	89a3      	ldrh	r3, [r4, #12]
 8004fe0:	0598      	lsls	r0, r3, #22
 8004fe2:	d402      	bmi.n	8004fea <_puts_r+0x36>
 8004fe4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004fe6:	f001 f972 	bl	80062ce <__retarget_lock_acquire_recursive>
 8004fea:	89a3      	ldrh	r3, [r4, #12]
 8004fec:	0719      	lsls	r1, r3, #28
 8004fee:	d51d      	bpl.n	800502c <_puts_r+0x78>
 8004ff0:	6923      	ldr	r3, [r4, #16]
 8004ff2:	b1db      	cbz	r3, 800502c <_puts_r+0x78>
 8004ff4:	3e01      	subs	r6, #1
 8004ff6:	68a3      	ldr	r3, [r4, #8]
 8004ff8:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8004ffc:	3b01      	subs	r3, #1
 8004ffe:	60a3      	str	r3, [r4, #8]
 8005000:	bb39      	cbnz	r1, 8005052 <_puts_r+0x9e>
 8005002:	2b00      	cmp	r3, #0
 8005004:	da38      	bge.n	8005078 <_puts_r+0xc4>
 8005006:	4622      	mov	r2, r4
 8005008:	210a      	movs	r1, #10
 800500a:	4628      	mov	r0, r5
 800500c:	f000 f868 	bl	80050e0 <__swbuf_r>
 8005010:	3001      	adds	r0, #1
 8005012:	d011      	beq.n	8005038 <_puts_r+0x84>
 8005014:	250a      	movs	r5, #10
 8005016:	e011      	b.n	800503c <_puts_r+0x88>
 8005018:	4b1b      	ldr	r3, [pc, #108]	; (8005088 <_puts_r+0xd4>)
 800501a:	429c      	cmp	r4, r3
 800501c:	d101      	bne.n	8005022 <_puts_r+0x6e>
 800501e:	68ac      	ldr	r4, [r5, #8]
 8005020:	e7da      	b.n	8004fd8 <_puts_r+0x24>
 8005022:	4b1a      	ldr	r3, [pc, #104]	; (800508c <_puts_r+0xd8>)
 8005024:	429c      	cmp	r4, r3
 8005026:	bf08      	it	eq
 8005028:	68ec      	ldreq	r4, [r5, #12]
 800502a:	e7d5      	b.n	8004fd8 <_puts_r+0x24>
 800502c:	4621      	mov	r1, r4
 800502e:	4628      	mov	r0, r5
 8005030:	f000 f8a8 	bl	8005184 <__swsetup_r>
 8005034:	2800      	cmp	r0, #0
 8005036:	d0dd      	beq.n	8004ff4 <_puts_r+0x40>
 8005038:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 800503c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800503e:	07da      	lsls	r2, r3, #31
 8005040:	d405      	bmi.n	800504e <_puts_r+0x9a>
 8005042:	89a3      	ldrh	r3, [r4, #12]
 8005044:	059b      	lsls	r3, r3, #22
 8005046:	d402      	bmi.n	800504e <_puts_r+0x9a>
 8005048:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800504a:	f001 f941 	bl	80062d0 <__retarget_lock_release_recursive>
 800504e:	4628      	mov	r0, r5
 8005050:	bd70      	pop	{r4, r5, r6, pc}
 8005052:	2b00      	cmp	r3, #0
 8005054:	da04      	bge.n	8005060 <_puts_r+0xac>
 8005056:	69a2      	ldr	r2, [r4, #24]
 8005058:	429a      	cmp	r2, r3
 800505a:	dc06      	bgt.n	800506a <_puts_r+0xb6>
 800505c:	290a      	cmp	r1, #10
 800505e:	d004      	beq.n	800506a <_puts_r+0xb6>
 8005060:	6823      	ldr	r3, [r4, #0]
 8005062:	1c5a      	adds	r2, r3, #1
 8005064:	6022      	str	r2, [r4, #0]
 8005066:	7019      	strb	r1, [r3, #0]
 8005068:	e7c5      	b.n	8004ff6 <_puts_r+0x42>
 800506a:	4622      	mov	r2, r4
 800506c:	4628      	mov	r0, r5
 800506e:	f000 f837 	bl	80050e0 <__swbuf_r>
 8005072:	3001      	adds	r0, #1
 8005074:	d1bf      	bne.n	8004ff6 <_puts_r+0x42>
 8005076:	e7df      	b.n	8005038 <_puts_r+0x84>
 8005078:	6823      	ldr	r3, [r4, #0]
 800507a:	250a      	movs	r5, #10
 800507c:	1c5a      	adds	r2, r3, #1
 800507e:	6022      	str	r2, [r4, #0]
 8005080:	701d      	strb	r5, [r3, #0]
 8005082:	e7db      	b.n	800503c <_puts_r+0x88>
 8005084:	08007748 	.word	0x08007748
 8005088:	08007768 	.word	0x08007768
 800508c:	08007728 	.word	0x08007728

08005090 <puts>:
 8005090:	4b02      	ldr	r3, [pc, #8]	; (800509c <puts+0xc>)
 8005092:	4601      	mov	r1, r0
 8005094:	6818      	ldr	r0, [r3, #0]
 8005096:	f7ff bf8d 	b.w	8004fb4 <_puts_r>
 800509a:	bf00      	nop
 800509c:	20000010 	.word	0x20000010

080050a0 <siprintf>:
 80050a0:	b40e      	push	{r1, r2, r3}
 80050a2:	b500      	push	{lr}
 80050a4:	b09c      	sub	sp, #112	; 0x70
 80050a6:	ab1d      	add	r3, sp, #116	; 0x74
 80050a8:	9002      	str	r0, [sp, #8]
 80050aa:	9006      	str	r0, [sp, #24]
 80050ac:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80050b0:	4809      	ldr	r0, [pc, #36]	; (80050d8 <siprintf+0x38>)
 80050b2:	9107      	str	r1, [sp, #28]
 80050b4:	9104      	str	r1, [sp, #16]
 80050b6:	4909      	ldr	r1, [pc, #36]	; (80050dc <siprintf+0x3c>)
 80050b8:	f853 2b04 	ldr.w	r2, [r3], #4
 80050bc:	9105      	str	r1, [sp, #20]
 80050be:	6800      	ldr	r0, [r0, #0]
 80050c0:	9301      	str	r3, [sp, #4]
 80050c2:	a902      	add	r1, sp, #8
 80050c4:	f001 fe48 	bl	8006d58 <_svfiprintf_r>
 80050c8:	9b02      	ldr	r3, [sp, #8]
 80050ca:	2200      	movs	r2, #0
 80050cc:	701a      	strb	r2, [r3, #0]
 80050ce:	b01c      	add	sp, #112	; 0x70
 80050d0:	f85d eb04 	ldr.w	lr, [sp], #4
 80050d4:	b003      	add	sp, #12
 80050d6:	4770      	bx	lr
 80050d8:	20000010 	.word	0x20000010
 80050dc:	ffff0208 	.word	0xffff0208

080050e0 <__swbuf_r>:
 80050e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80050e2:	460e      	mov	r6, r1
 80050e4:	4614      	mov	r4, r2
 80050e6:	4605      	mov	r5, r0
 80050e8:	b118      	cbz	r0, 80050f2 <__swbuf_r+0x12>
 80050ea:	6983      	ldr	r3, [r0, #24]
 80050ec:	b90b      	cbnz	r3, 80050f2 <__swbuf_r+0x12>
 80050ee:	f001 f84b 	bl	8006188 <__sinit>
 80050f2:	4b21      	ldr	r3, [pc, #132]	; (8005178 <__swbuf_r+0x98>)
 80050f4:	429c      	cmp	r4, r3
 80050f6:	d12b      	bne.n	8005150 <__swbuf_r+0x70>
 80050f8:	686c      	ldr	r4, [r5, #4]
 80050fa:	69a3      	ldr	r3, [r4, #24]
 80050fc:	60a3      	str	r3, [r4, #8]
 80050fe:	89a3      	ldrh	r3, [r4, #12]
 8005100:	071a      	lsls	r2, r3, #28
 8005102:	d52f      	bpl.n	8005164 <__swbuf_r+0x84>
 8005104:	6923      	ldr	r3, [r4, #16]
 8005106:	b36b      	cbz	r3, 8005164 <__swbuf_r+0x84>
 8005108:	6923      	ldr	r3, [r4, #16]
 800510a:	6820      	ldr	r0, [r4, #0]
 800510c:	1ac0      	subs	r0, r0, r3
 800510e:	6963      	ldr	r3, [r4, #20]
 8005110:	b2f6      	uxtb	r6, r6
 8005112:	4283      	cmp	r3, r0
 8005114:	4637      	mov	r7, r6
 8005116:	dc04      	bgt.n	8005122 <__swbuf_r+0x42>
 8005118:	4621      	mov	r1, r4
 800511a:	4628      	mov	r0, r5
 800511c:	f000 ffa0 	bl	8006060 <_fflush_r>
 8005120:	bb30      	cbnz	r0, 8005170 <__swbuf_r+0x90>
 8005122:	68a3      	ldr	r3, [r4, #8]
 8005124:	3b01      	subs	r3, #1
 8005126:	60a3      	str	r3, [r4, #8]
 8005128:	6823      	ldr	r3, [r4, #0]
 800512a:	1c5a      	adds	r2, r3, #1
 800512c:	6022      	str	r2, [r4, #0]
 800512e:	701e      	strb	r6, [r3, #0]
 8005130:	6963      	ldr	r3, [r4, #20]
 8005132:	3001      	adds	r0, #1
 8005134:	4283      	cmp	r3, r0
 8005136:	d004      	beq.n	8005142 <__swbuf_r+0x62>
 8005138:	89a3      	ldrh	r3, [r4, #12]
 800513a:	07db      	lsls	r3, r3, #31
 800513c:	d506      	bpl.n	800514c <__swbuf_r+0x6c>
 800513e:	2e0a      	cmp	r6, #10
 8005140:	d104      	bne.n	800514c <__swbuf_r+0x6c>
 8005142:	4621      	mov	r1, r4
 8005144:	4628      	mov	r0, r5
 8005146:	f000 ff8b 	bl	8006060 <_fflush_r>
 800514a:	b988      	cbnz	r0, 8005170 <__swbuf_r+0x90>
 800514c:	4638      	mov	r0, r7
 800514e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005150:	4b0a      	ldr	r3, [pc, #40]	; (800517c <__swbuf_r+0x9c>)
 8005152:	429c      	cmp	r4, r3
 8005154:	d101      	bne.n	800515a <__swbuf_r+0x7a>
 8005156:	68ac      	ldr	r4, [r5, #8]
 8005158:	e7cf      	b.n	80050fa <__swbuf_r+0x1a>
 800515a:	4b09      	ldr	r3, [pc, #36]	; (8005180 <__swbuf_r+0xa0>)
 800515c:	429c      	cmp	r4, r3
 800515e:	bf08      	it	eq
 8005160:	68ec      	ldreq	r4, [r5, #12]
 8005162:	e7ca      	b.n	80050fa <__swbuf_r+0x1a>
 8005164:	4621      	mov	r1, r4
 8005166:	4628      	mov	r0, r5
 8005168:	f000 f80c 	bl	8005184 <__swsetup_r>
 800516c:	2800      	cmp	r0, #0
 800516e:	d0cb      	beq.n	8005108 <__swbuf_r+0x28>
 8005170:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8005174:	e7ea      	b.n	800514c <__swbuf_r+0x6c>
 8005176:	bf00      	nop
 8005178:	08007748 	.word	0x08007748
 800517c:	08007768 	.word	0x08007768
 8005180:	08007728 	.word	0x08007728

08005184 <__swsetup_r>:
 8005184:	4b32      	ldr	r3, [pc, #200]	; (8005250 <__swsetup_r+0xcc>)
 8005186:	b570      	push	{r4, r5, r6, lr}
 8005188:	681d      	ldr	r5, [r3, #0]
 800518a:	4606      	mov	r6, r0
 800518c:	460c      	mov	r4, r1
 800518e:	b125      	cbz	r5, 800519a <__swsetup_r+0x16>
 8005190:	69ab      	ldr	r3, [r5, #24]
 8005192:	b913      	cbnz	r3, 800519a <__swsetup_r+0x16>
 8005194:	4628      	mov	r0, r5
 8005196:	f000 fff7 	bl	8006188 <__sinit>
 800519a:	4b2e      	ldr	r3, [pc, #184]	; (8005254 <__swsetup_r+0xd0>)
 800519c:	429c      	cmp	r4, r3
 800519e:	d10f      	bne.n	80051c0 <__swsetup_r+0x3c>
 80051a0:	686c      	ldr	r4, [r5, #4]
 80051a2:	89a3      	ldrh	r3, [r4, #12]
 80051a4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80051a8:	0719      	lsls	r1, r3, #28
 80051aa:	d42c      	bmi.n	8005206 <__swsetup_r+0x82>
 80051ac:	06dd      	lsls	r5, r3, #27
 80051ae:	d411      	bmi.n	80051d4 <__swsetup_r+0x50>
 80051b0:	2309      	movs	r3, #9
 80051b2:	6033      	str	r3, [r6, #0]
 80051b4:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80051b8:	81a3      	strh	r3, [r4, #12]
 80051ba:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80051be:	e03e      	b.n	800523e <__swsetup_r+0xba>
 80051c0:	4b25      	ldr	r3, [pc, #148]	; (8005258 <__swsetup_r+0xd4>)
 80051c2:	429c      	cmp	r4, r3
 80051c4:	d101      	bne.n	80051ca <__swsetup_r+0x46>
 80051c6:	68ac      	ldr	r4, [r5, #8]
 80051c8:	e7eb      	b.n	80051a2 <__swsetup_r+0x1e>
 80051ca:	4b24      	ldr	r3, [pc, #144]	; (800525c <__swsetup_r+0xd8>)
 80051cc:	429c      	cmp	r4, r3
 80051ce:	bf08      	it	eq
 80051d0:	68ec      	ldreq	r4, [r5, #12]
 80051d2:	e7e6      	b.n	80051a2 <__swsetup_r+0x1e>
 80051d4:	0758      	lsls	r0, r3, #29
 80051d6:	d512      	bpl.n	80051fe <__swsetup_r+0x7a>
 80051d8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80051da:	b141      	cbz	r1, 80051ee <__swsetup_r+0x6a>
 80051dc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80051e0:	4299      	cmp	r1, r3
 80051e2:	d002      	beq.n	80051ea <__swsetup_r+0x66>
 80051e4:	4630      	mov	r0, r6
 80051e6:	f001 fc7b 	bl	8006ae0 <_free_r>
 80051ea:	2300      	movs	r3, #0
 80051ec:	6363      	str	r3, [r4, #52]	; 0x34
 80051ee:	89a3      	ldrh	r3, [r4, #12]
 80051f0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80051f4:	81a3      	strh	r3, [r4, #12]
 80051f6:	2300      	movs	r3, #0
 80051f8:	6063      	str	r3, [r4, #4]
 80051fa:	6923      	ldr	r3, [r4, #16]
 80051fc:	6023      	str	r3, [r4, #0]
 80051fe:	89a3      	ldrh	r3, [r4, #12]
 8005200:	f043 0308 	orr.w	r3, r3, #8
 8005204:	81a3      	strh	r3, [r4, #12]
 8005206:	6923      	ldr	r3, [r4, #16]
 8005208:	b94b      	cbnz	r3, 800521e <__swsetup_r+0x9a>
 800520a:	89a3      	ldrh	r3, [r4, #12]
 800520c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8005210:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005214:	d003      	beq.n	800521e <__swsetup_r+0x9a>
 8005216:	4621      	mov	r1, r4
 8005218:	4630      	mov	r0, r6
 800521a:	f001 f87f 	bl	800631c <__smakebuf_r>
 800521e:	89a0      	ldrh	r0, [r4, #12]
 8005220:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005224:	f010 0301 	ands.w	r3, r0, #1
 8005228:	d00a      	beq.n	8005240 <__swsetup_r+0xbc>
 800522a:	2300      	movs	r3, #0
 800522c:	60a3      	str	r3, [r4, #8]
 800522e:	6963      	ldr	r3, [r4, #20]
 8005230:	425b      	negs	r3, r3
 8005232:	61a3      	str	r3, [r4, #24]
 8005234:	6923      	ldr	r3, [r4, #16]
 8005236:	b943      	cbnz	r3, 800524a <__swsetup_r+0xc6>
 8005238:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800523c:	d1ba      	bne.n	80051b4 <__swsetup_r+0x30>
 800523e:	bd70      	pop	{r4, r5, r6, pc}
 8005240:	0781      	lsls	r1, r0, #30
 8005242:	bf58      	it	pl
 8005244:	6963      	ldrpl	r3, [r4, #20]
 8005246:	60a3      	str	r3, [r4, #8]
 8005248:	e7f4      	b.n	8005234 <__swsetup_r+0xb0>
 800524a:	2000      	movs	r0, #0
 800524c:	e7f7      	b.n	800523e <__swsetup_r+0xba>
 800524e:	bf00      	nop
 8005250:	20000010 	.word	0x20000010
 8005254:	08007748 	.word	0x08007748
 8005258:	08007768 	.word	0x08007768
 800525c:	08007728 	.word	0x08007728

08005260 <quorem>:
 8005260:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005264:	6903      	ldr	r3, [r0, #16]
 8005266:	690c      	ldr	r4, [r1, #16]
 8005268:	42a3      	cmp	r3, r4
 800526a:	4607      	mov	r7, r0
 800526c:	f2c0 8081 	blt.w	8005372 <quorem+0x112>
 8005270:	3c01      	subs	r4, #1
 8005272:	f101 0814 	add.w	r8, r1, #20
 8005276:	f100 0514 	add.w	r5, r0, #20
 800527a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800527e:	9301      	str	r3, [sp, #4]
 8005280:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8005284:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005288:	3301      	adds	r3, #1
 800528a:	429a      	cmp	r2, r3
 800528c:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8005290:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8005294:	fbb2 f6f3 	udiv	r6, r2, r3
 8005298:	d331      	bcc.n	80052fe <quorem+0x9e>
 800529a:	f04f 0e00 	mov.w	lr, #0
 800529e:	4640      	mov	r0, r8
 80052a0:	46ac      	mov	ip, r5
 80052a2:	46f2      	mov	sl, lr
 80052a4:	f850 2b04 	ldr.w	r2, [r0], #4
 80052a8:	b293      	uxth	r3, r2
 80052aa:	fb06 e303 	mla	r3, r6, r3, lr
 80052ae:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 80052b2:	b29b      	uxth	r3, r3
 80052b4:	ebaa 0303 	sub.w	r3, sl, r3
 80052b8:	f8dc a000 	ldr.w	sl, [ip]
 80052bc:	0c12      	lsrs	r2, r2, #16
 80052be:	fa13 f38a 	uxtah	r3, r3, sl
 80052c2:	fb06 e202 	mla	r2, r6, r2, lr
 80052c6:	9300      	str	r3, [sp, #0]
 80052c8:	9b00      	ldr	r3, [sp, #0]
 80052ca:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80052ce:	b292      	uxth	r2, r2
 80052d0:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 80052d4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80052d8:	f8bd 3000 	ldrh.w	r3, [sp]
 80052dc:	4581      	cmp	r9, r0
 80052de:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80052e2:	f84c 3b04 	str.w	r3, [ip], #4
 80052e6:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80052ea:	d2db      	bcs.n	80052a4 <quorem+0x44>
 80052ec:	f855 300b 	ldr.w	r3, [r5, fp]
 80052f0:	b92b      	cbnz	r3, 80052fe <quorem+0x9e>
 80052f2:	9b01      	ldr	r3, [sp, #4]
 80052f4:	3b04      	subs	r3, #4
 80052f6:	429d      	cmp	r5, r3
 80052f8:	461a      	mov	r2, r3
 80052fa:	d32e      	bcc.n	800535a <quorem+0xfa>
 80052fc:	613c      	str	r4, [r7, #16]
 80052fe:	4638      	mov	r0, r7
 8005300:	f001 fad6 	bl	80068b0 <__mcmp>
 8005304:	2800      	cmp	r0, #0
 8005306:	db24      	blt.n	8005352 <quorem+0xf2>
 8005308:	3601      	adds	r6, #1
 800530a:	4628      	mov	r0, r5
 800530c:	f04f 0c00 	mov.w	ip, #0
 8005310:	f858 2b04 	ldr.w	r2, [r8], #4
 8005314:	f8d0 e000 	ldr.w	lr, [r0]
 8005318:	b293      	uxth	r3, r2
 800531a:	ebac 0303 	sub.w	r3, ip, r3
 800531e:	0c12      	lsrs	r2, r2, #16
 8005320:	fa13 f38e 	uxtah	r3, r3, lr
 8005324:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8005328:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800532c:	b29b      	uxth	r3, r3
 800532e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005332:	45c1      	cmp	r9, r8
 8005334:	f840 3b04 	str.w	r3, [r0], #4
 8005338:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800533c:	d2e8      	bcs.n	8005310 <quorem+0xb0>
 800533e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005342:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005346:	b922      	cbnz	r2, 8005352 <quorem+0xf2>
 8005348:	3b04      	subs	r3, #4
 800534a:	429d      	cmp	r5, r3
 800534c:	461a      	mov	r2, r3
 800534e:	d30a      	bcc.n	8005366 <quorem+0x106>
 8005350:	613c      	str	r4, [r7, #16]
 8005352:	4630      	mov	r0, r6
 8005354:	b003      	add	sp, #12
 8005356:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800535a:	6812      	ldr	r2, [r2, #0]
 800535c:	3b04      	subs	r3, #4
 800535e:	2a00      	cmp	r2, #0
 8005360:	d1cc      	bne.n	80052fc <quorem+0x9c>
 8005362:	3c01      	subs	r4, #1
 8005364:	e7c7      	b.n	80052f6 <quorem+0x96>
 8005366:	6812      	ldr	r2, [r2, #0]
 8005368:	3b04      	subs	r3, #4
 800536a:	2a00      	cmp	r2, #0
 800536c:	d1f0      	bne.n	8005350 <quorem+0xf0>
 800536e:	3c01      	subs	r4, #1
 8005370:	e7eb      	b.n	800534a <quorem+0xea>
 8005372:	2000      	movs	r0, #0
 8005374:	e7ee      	b.n	8005354 <quorem+0xf4>
	...

08005378 <_dtoa_r>:
 8005378:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800537c:	ed2d 8b04 	vpush	{d8-d9}
 8005380:	ec57 6b10 	vmov	r6, r7, d0
 8005384:	b093      	sub	sp, #76	; 0x4c
 8005386:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8005388:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800538c:	9106      	str	r1, [sp, #24]
 800538e:	ee10 aa10 	vmov	sl, s0
 8005392:	4604      	mov	r4, r0
 8005394:	9209      	str	r2, [sp, #36]	; 0x24
 8005396:	930c      	str	r3, [sp, #48]	; 0x30
 8005398:	46bb      	mov	fp, r7
 800539a:	b975      	cbnz	r5, 80053ba <_dtoa_r+0x42>
 800539c:	2010      	movs	r0, #16
 800539e:	f000 fffd 	bl	800639c <malloc>
 80053a2:	4602      	mov	r2, r0
 80053a4:	6260      	str	r0, [r4, #36]	; 0x24
 80053a6:	b920      	cbnz	r0, 80053b2 <_dtoa_r+0x3a>
 80053a8:	4ba7      	ldr	r3, [pc, #668]	; (8005648 <_dtoa_r+0x2d0>)
 80053aa:	21ea      	movs	r1, #234	; 0xea
 80053ac:	48a7      	ldr	r0, [pc, #668]	; (800564c <_dtoa_r+0x2d4>)
 80053ae:	f001 ff93 	bl	80072d8 <__assert_func>
 80053b2:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80053b6:	6005      	str	r5, [r0, #0]
 80053b8:	60c5      	str	r5, [r0, #12]
 80053ba:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80053bc:	6819      	ldr	r1, [r3, #0]
 80053be:	b151      	cbz	r1, 80053d6 <_dtoa_r+0x5e>
 80053c0:	685a      	ldr	r2, [r3, #4]
 80053c2:	604a      	str	r2, [r1, #4]
 80053c4:	2301      	movs	r3, #1
 80053c6:	4093      	lsls	r3, r2
 80053c8:	608b      	str	r3, [r1, #8]
 80053ca:	4620      	mov	r0, r4
 80053cc:	f001 f82e 	bl	800642c <_Bfree>
 80053d0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80053d2:	2200      	movs	r2, #0
 80053d4:	601a      	str	r2, [r3, #0]
 80053d6:	1e3b      	subs	r3, r7, #0
 80053d8:	bfaa      	itet	ge
 80053da:	2300      	movge	r3, #0
 80053dc:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 80053e0:	f8c8 3000 	strge.w	r3, [r8]
 80053e4:	4b9a      	ldr	r3, [pc, #616]	; (8005650 <_dtoa_r+0x2d8>)
 80053e6:	bfbc      	itt	lt
 80053e8:	2201      	movlt	r2, #1
 80053ea:	f8c8 2000 	strlt.w	r2, [r8]
 80053ee:	ea33 030b 	bics.w	r3, r3, fp
 80053f2:	d11b      	bne.n	800542c <_dtoa_r+0xb4>
 80053f4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80053f6:	f242 730f 	movw	r3, #9999	; 0x270f
 80053fa:	6013      	str	r3, [r2, #0]
 80053fc:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8005400:	4333      	orrs	r3, r6
 8005402:	f000 8592 	beq.w	8005f2a <_dtoa_r+0xbb2>
 8005406:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005408:	b963      	cbnz	r3, 8005424 <_dtoa_r+0xac>
 800540a:	4b92      	ldr	r3, [pc, #584]	; (8005654 <_dtoa_r+0x2dc>)
 800540c:	e022      	b.n	8005454 <_dtoa_r+0xdc>
 800540e:	4b92      	ldr	r3, [pc, #584]	; (8005658 <_dtoa_r+0x2e0>)
 8005410:	9301      	str	r3, [sp, #4]
 8005412:	3308      	adds	r3, #8
 8005414:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8005416:	6013      	str	r3, [r2, #0]
 8005418:	9801      	ldr	r0, [sp, #4]
 800541a:	b013      	add	sp, #76	; 0x4c
 800541c:	ecbd 8b04 	vpop	{d8-d9}
 8005420:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005424:	4b8b      	ldr	r3, [pc, #556]	; (8005654 <_dtoa_r+0x2dc>)
 8005426:	9301      	str	r3, [sp, #4]
 8005428:	3303      	adds	r3, #3
 800542a:	e7f3      	b.n	8005414 <_dtoa_r+0x9c>
 800542c:	2200      	movs	r2, #0
 800542e:	2300      	movs	r3, #0
 8005430:	4650      	mov	r0, sl
 8005432:	4659      	mov	r1, fp
 8005434:	f7fb fb58 	bl	8000ae8 <__aeabi_dcmpeq>
 8005438:	ec4b ab19 	vmov	d9, sl, fp
 800543c:	4680      	mov	r8, r0
 800543e:	b158      	cbz	r0, 8005458 <_dtoa_r+0xe0>
 8005440:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8005442:	2301      	movs	r3, #1
 8005444:	6013      	str	r3, [r2, #0]
 8005446:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005448:	2b00      	cmp	r3, #0
 800544a:	f000 856b 	beq.w	8005f24 <_dtoa_r+0xbac>
 800544e:	4883      	ldr	r0, [pc, #524]	; (800565c <_dtoa_r+0x2e4>)
 8005450:	6018      	str	r0, [r3, #0]
 8005452:	1e43      	subs	r3, r0, #1
 8005454:	9301      	str	r3, [sp, #4]
 8005456:	e7df      	b.n	8005418 <_dtoa_r+0xa0>
 8005458:	ec4b ab10 	vmov	d0, sl, fp
 800545c:	aa10      	add	r2, sp, #64	; 0x40
 800545e:	a911      	add	r1, sp, #68	; 0x44
 8005460:	4620      	mov	r0, r4
 8005462:	f001 facb 	bl	80069fc <__d2b>
 8005466:	f3cb 550a 	ubfx	r5, fp, #20, #11
 800546a:	ee08 0a10 	vmov	s16, r0
 800546e:	2d00      	cmp	r5, #0
 8005470:	f000 8084 	beq.w	800557c <_dtoa_r+0x204>
 8005474:	ee19 3a90 	vmov	r3, s19
 8005478:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800547c:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8005480:	4656      	mov	r6, sl
 8005482:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8005486:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800548a:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 800548e:	4b74      	ldr	r3, [pc, #464]	; (8005660 <_dtoa_r+0x2e8>)
 8005490:	2200      	movs	r2, #0
 8005492:	4630      	mov	r0, r6
 8005494:	4639      	mov	r1, r7
 8005496:	f7fa ff07 	bl	80002a8 <__aeabi_dsub>
 800549a:	a365      	add	r3, pc, #404	; (adr r3, 8005630 <_dtoa_r+0x2b8>)
 800549c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80054a0:	f7fb f8ba 	bl	8000618 <__aeabi_dmul>
 80054a4:	a364      	add	r3, pc, #400	; (adr r3, 8005638 <_dtoa_r+0x2c0>)
 80054a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80054aa:	f7fa feff 	bl	80002ac <__adddf3>
 80054ae:	4606      	mov	r6, r0
 80054b0:	4628      	mov	r0, r5
 80054b2:	460f      	mov	r7, r1
 80054b4:	f7fb f846 	bl	8000544 <__aeabi_i2d>
 80054b8:	a361      	add	r3, pc, #388	; (adr r3, 8005640 <_dtoa_r+0x2c8>)
 80054ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80054be:	f7fb f8ab 	bl	8000618 <__aeabi_dmul>
 80054c2:	4602      	mov	r2, r0
 80054c4:	460b      	mov	r3, r1
 80054c6:	4630      	mov	r0, r6
 80054c8:	4639      	mov	r1, r7
 80054ca:	f7fa feef 	bl	80002ac <__adddf3>
 80054ce:	4606      	mov	r6, r0
 80054d0:	460f      	mov	r7, r1
 80054d2:	f7fb fb51 	bl	8000b78 <__aeabi_d2iz>
 80054d6:	2200      	movs	r2, #0
 80054d8:	9000      	str	r0, [sp, #0]
 80054da:	2300      	movs	r3, #0
 80054dc:	4630      	mov	r0, r6
 80054de:	4639      	mov	r1, r7
 80054e0:	f7fb fb0c 	bl	8000afc <__aeabi_dcmplt>
 80054e4:	b150      	cbz	r0, 80054fc <_dtoa_r+0x184>
 80054e6:	9800      	ldr	r0, [sp, #0]
 80054e8:	f7fb f82c 	bl	8000544 <__aeabi_i2d>
 80054ec:	4632      	mov	r2, r6
 80054ee:	463b      	mov	r3, r7
 80054f0:	f7fb fafa 	bl	8000ae8 <__aeabi_dcmpeq>
 80054f4:	b910      	cbnz	r0, 80054fc <_dtoa_r+0x184>
 80054f6:	9b00      	ldr	r3, [sp, #0]
 80054f8:	3b01      	subs	r3, #1
 80054fa:	9300      	str	r3, [sp, #0]
 80054fc:	9b00      	ldr	r3, [sp, #0]
 80054fe:	2b16      	cmp	r3, #22
 8005500:	d85a      	bhi.n	80055b8 <_dtoa_r+0x240>
 8005502:	9a00      	ldr	r2, [sp, #0]
 8005504:	4b57      	ldr	r3, [pc, #348]	; (8005664 <_dtoa_r+0x2ec>)
 8005506:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800550a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800550e:	ec51 0b19 	vmov	r0, r1, d9
 8005512:	f7fb faf3 	bl	8000afc <__aeabi_dcmplt>
 8005516:	2800      	cmp	r0, #0
 8005518:	d050      	beq.n	80055bc <_dtoa_r+0x244>
 800551a:	9b00      	ldr	r3, [sp, #0]
 800551c:	3b01      	subs	r3, #1
 800551e:	9300      	str	r3, [sp, #0]
 8005520:	2300      	movs	r3, #0
 8005522:	930b      	str	r3, [sp, #44]	; 0x2c
 8005524:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8005526:	1b5d      	subs	r5, r3, r5
 8005528:	1e6b      	subs	r3, r5, #1
 800552a:	9305      	str	r3, [sp, #20]
 800552c:	bf45      	ittet	mi
 800552e:	f1c5 0301 	rsbmi	r3, r5, #1
 8005532:	9304      	strmi	r3, [sp, #16]
 8005534:	2300      	movpl	r3, #0
 8005536:	2300      	movmi	r3, #0
 8005538:	bf4c      	ite	mi
 800553a:	9305      	strmi	r3, [sp, #20]
 800553c:	9304      	strpl	r3, [sp, #16]
 800553e:	9b00      	ldr	r3, [sp, #0]
 8005540:	2b00      	cmp	r3, #0
 8005542:	db3d      	blt.n	80055c0 <_dtoa_r+0x248>
 8005544:	9b05      	ldr	r3, [sp, #20]
 8005546:	9a00      	ldr	r2, [sp, #0]
 8005548:	920a      	str	r2, [sp, #40]	; 0x28
 800554a:	4413      	add	r3, r2
 800554c:	9305      	str	r3, [sp, #20]
 800554e:	2300      	movs	r3, #0
 8005550:	9307      	str	r3, [sp, #28]
 8005552:	9b06      	ldr	r3, [sp, #24]
 8005554:	2b09      	cmp	r3, #9
 8005556:	f200 8089 	bhi.w	800566c <_dtoa_r+0x2f4>
 800555a:	2b05      	cmp	r3, #5
 800555c:	bfc4      	itt	gt
 800555e:	3b04      	subgt	r3, #4
 8005560:	9306      	strgt	r3, [sp, #24]
 8005562:	9b06      	ldr	r3, [sp, #24]
 8005564:	f1a3 0302 	sub.w	r3, r3, #2
 8005568:	bfcc      	ite	gt
 800556a:	2500      	movgt	r5, #0
 800556c:	2501      	movle	r5, #1
 800556e:	2b03      	cmp	r3, #3
 8005570:	f200 8087 	bhi.w	8005682 <_dtoa_r+0x30a>
 8005574:	e8df f003 	tbb	[pc, r3]
 8005578:	59383a2d 	.word	0x59383a2d
 800557c:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8005580:	441d      	add	r5, r3
 8005582:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8005586:	2b20      	cmp	r3, #32
 8005588:	bfc1      	itttt	gt
 800558a:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800558e:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8005592:	fa0b f303 	lslgt.w	r3, fp, r3
 8005596:	fa26 f000 	lsrgt.w	r0, r6, r0
 800559a:	bfda      	itte	le
 800559c:	f1c3 0320 	rsble	r3, r3, #32
 80055a0:	fa06 f003 	lslle.w	r0, r6, r3
 80055a4:	4318      	orrgt	r0, r3
 80055a6:	f7fa ffbd 	bl	8000524 <__aeabi_ui2d>
 80055aa:	2301      	movs	r3, #1
 80055ac:	4606      	mov	r6, r0
 80055ae:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 80055b2:	3d01      	subs	r5, #1
 80055b4:	930e      	str	r3, [sp, #56]	; 0x38
 80055b6:	e76a      	b.n	800548e <_dtoa_r+0x116>
 80055b8:	2301      	movs	r3, #1
 80055ba:	e7b2      	b.n	8005522 <_dtoa_r+0x1aa>
 80055bc:	900b      	str	r0, [sp, #44]	; 0x2c
 80055be:	e7b1      	b.n	8005524 <_dtoa_r+0x1ac>
 80055c0:	9b04      	ldr	r3, [sp, #16]
 80055c2:	9a00      	ldr	r2, [sp, #0]
 80055c4:	1a9b      	subs	r3, r3, r2
 80055c6:	9304      	str	r3, [sp, #16]
 80055c8:	4253      	negs	r3, r2
 80055ca:	9307      	str	r3, [sp, #28]
 80055cc:	2300      	movs	r3, #0
 80055ce:	930a      	str	r3, [sp, #40]	; 0x28
 80055d0:	e7bf      	b.n	8005552 <_dtoa_r+0x1da>
 80055d2:	2300      	movs	r3, #0
 80055d4:	9308      	str	r3, [sp, #32]
 80055d6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80055d8:	2b00      	cmp	r3, #0
 80055da:	dc55      	bgt.n	8005688 <_dtoa_r+0x310>
 80055dc:	2301      	movs	r3, #1
 80055de:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80055e2:	461a      	mov	r2, r3
 80055e4:	9209      	str	r2, [sp, #36]	; 0x24
 80055e6:	e00c      	b.n	8005602 <_dtoa_r+0x28a>
 80055e8:	2301      	movs	r3, #1
 80055ea:	e7f3      	b.n	80055d4 <_dtoa_r+0x25c>
 80055ec:	2300      	movs	r3, #0
 80055ee:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80055f0:	9308      	str	r3, [sp, #32]
 80055f2:	9b00      	ldr	r3, [sp, #0]
 80055f4:	4413      	add	r3, r2
 80055f6:	9302      	str	r3, [sp, #8]
 80055f8:	3301      	adds	r3, #1
 80055fa:	2b01      	cmp	r3, #1
 80055fc:	9303      	str	r3, [sp, #12]
 80055fe:	bfb8      	it	lt
 8005600:	2301      	movlt	r3, #1
 8005602:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8005604:	2200      	movs	r2, #0
 8005606:	6042      	str	r2, [r0, #4]
 8005608:	2204      	movs	r2, #4
 800560a:	f102 0614 	add.w	r6, r2, #20
 800560e:	429e      	cmp	r6, r3
 8005610:	6841      	ldr	r1, [r0, #4]
 8005612:	d93d      	bls.n	8005690 <_dtoa_r+0x318>
 8005614:	4620      	mov	r0, r4
 8005616:	f000 fec9 	bl	80063ac <_Balloc>
 800561a:	9001      	str	r0, [sp, #4]
 800561c:	2800      	cmp	r0, #0
 800561e:	d13b      	bne.n	8005698 <_dtoa_r+0x320>
 8005620:	4b11      	ldr	r3, [pc, #68]	; (8005668 <_dtoa_r+0x2f0>)
 8005622:	4602      	mov	r2, r0
 8005624:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8005628:	e6c0      	b.n	80053ac <_dtoa_r+0x34>
 800562a:	2301      	movs	r3, #1
 800562c:	e7df      	b.n	80055ee <_dtoa_r+0x276>
 800562e:	bf00      	nop
 8005630:	636f4361 	.word	0x636f4361
 8005634:	3fd287a7 	.word	0x3fd287a7
 8005638:	8b60c8b3 	.word	0x8b60c8b3
 800563c:	3fc68a28 	.word	0x3fc68a28
 8005640:	509f79fb 	.word	0x509f79fb
 8005644:	3fd34413 	.word	0x3fd34413
 8005648:	080076a5 	.word	0x080076a5
 800564c:	080076bc 	.word	0x080076bc
 8005650:	7ff00000 	.word	0x7ff00000
 8005654:	080076a1 	.word	0x080076a1
 8005658:	08007698 	.word	0x08007698
 800565c:	08007675 	.word	0x08007675
 8005660:	3ff80000 	.word	0x3ff80000
 8005664:	08007810 	.word	0x08007810
 8005668:	08007717 	.word	0x08007717
 800566c:	2501      	movs	r5, #1
 800566e:	2300      	movs	r3, #0
 8005670:	9306      	str	r3, [sp, #24]
 8005672:	9508      	str	r5, [sp, #32]
 8005674:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005678:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800567c:	2200      	movs	r2, #0
 800567e:	2312      	movs	r3, #18
 8005680:	e7b0      	b.n	80055e4 <_dtoa_r+0x26c>
 8005682:	2301      	movs	r3, #1
 8005684:	9308      	str	r3, [sp, #32]
 8005686:	e7f5      	b.n	8005674 <_dtoa_r+0x2fc>
 8005688:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800568a:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800568e:	e7b8      	b.n	8005602 <_dtoa_r+0x28a>
 8005690:	3101      	adds	r1, #1
 8005692:	6041      	str	r1, [r0, #4]
 8005694:	0052      	lsls	r2, r2, #1
 8005696:	e7b8      	b.n	800560a <_dtoa_r+0x292>
 8005698:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800569a:	9a01      	ldr	r2, [sp, #4]
 800569c:	601a      	str	r2, [r3, #0]
 800569e:	9b03      	ldr	r3, [sp, #12]
 80056a0:	2b0e      	cmp	r3, #14
 80056a2:	f200 809d 	bhi.w	80057e0 <_dtoa_r+0x468>
 80056a6:	2d00      	cmp	r5, #0
 80056a8:	f000 809a 	beq.w	80057e0 <_dtoa_r+0x468>
 80056ac:	9b00      	ldr	r3, [sp, #0]
 80056ae:	2b00      	cmp	r3, #0
 80056b0:	dd32      	ble.n	8005718 <_dtoa_r+0x3a0>
 80056b2:	4ab7      	ldr	r2, [pc, #732]	; (8005990 <_dtoa_r+0x618>)
 80056b4:	f003 030f 	and.w	r3, r3, #15
 80056b8:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80056bc:	e9d3 8900 	ldrd	r8, r9, [r3]
 80056c0:	9b00      	ldr	r3, [sp, #0]
 80056c2:	05d8      	lsls	r0, r3, #23
 80056c4:	ea4f 1723 	mov.w	r7, r3, asr #4
 80056c8:	d516      	bpl.n	80056f8 <_dtoa_r+0x380>
 80056ca:	4bb2      	ldr	r3, [pc, #712]	; (8005994 <_dtoa_r+0x61c>)
 80056cc:	ec51 0b19 	vmov	r0, r1, d9
 80056d0:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80056d4:	f7fb f8ca 	bl	800086c <__aeabi_ddiv>
 80056d8:	f007 070f 	and.w	r7, r7, #15
 80056dc:	4682      	mov	sl, r0
 80056de:	468b      	mov	fp, r1
 80056e0:	2503      	movs	r5, #3
 80056e2:	4eac      	ldr	r6, [pc, #688]	; (8005994 <_dtoa_r+0x61c>)
 80056e4:	b957      	cbnz	r7, 80056fc <_dtoa_r+0x384>
 80056e6:	4642      	mov	r2, r8
 80056e8:	464b      	mov	r3, r9
 80056ea:	4650      	mov	r0, sl
 80056ec:	4659      	mov	r1, fp
 80056ee:	f7fb f8bd 	bl	800086c <__aeabi_ddiv>
 80056f2:	4682      	mov	sl, r0
 80056f4:	468b      	mov	fp, r1
 80056f6:	e028      	b.n	800574a <_dtoa_r+0x3d2>
 80056f8:	2502      	movs	r5, #2
 80056fa:	e7f2      	b.n	80056e2 <_dtoa_r+0x36a>
 80056fc:	07f9      	lsls	r1, r7, #31
 80056fe:	d508      	bpl.n	8005712 <_dtoa_r+0x39a>
 8005700:	4640      	mov	r0, r8
 8005702:	4649      	mov	r1, r9
 8005704:	e9d6 2300 	ldrd	r2, r3, [r6]
 8005708:	f7fa ff86 	bl	8000618 <__aeabi_dmul>
 800570c:	3501      	adds	r5, #1
 800570e:	4680      	mov	r8, r0
 8005710:	4689      	mov	r9, r1
 8005712:	107f      	asrs	r7, r7, #1
 8005714:	3608      	adds	r6, #8
 8005716:	e7e5      	b.n	80056e4 <_dtoa_r+0x36c>
 8005718:	f000 809b 	beq.w	8005852 <_dtoa_r+0x4da>
 800571c:	9b00      	ldr	r3, [sp, #0]
 800571e:	4f9d      	ldr	r7, [pc, #628]	; (8005994 <_dtoa_r+0x61c>)
 8005720:	425e      	negs	r6, r3
 8005722:	4b9b      	ldr	r3, [pc, #620]	; (8005990 <_dtoa_r+0x618>)
 8005724:	f006 020f 	and.w	r2, r6, #15
 8005728:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800572c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005730:	ec51 0b19 	vmov	r0, r1, d9
 8005734:	f7fa ff70 	bl	8000618 <__aeabi_dmul>
 8005738:	1136      	asrs	r6, r6, #4
 800573a:	4682      	mov	sl, r0
 800573c:	468b      	mov	fp, r1
 800573e:	2300      	movs	r3, #0
 8005740:	2502      	movs	r5, #2
 8005742:	2e00      	cmp	r6, #0
 8005744:	d17a      	bne.n	800583c <_dtoa_r+0x4c4>
 8005746:	2b00      	cmp	r3, #0
 8005748:	d1d3      	bne.n	80056f2 <_dtoa_r+0x37a>
 800574a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800574c:	2b00      	cmp	r3, #0
 800574e:	f000 8082 	beq.w	8005856 <_dtoa_r+0x4de>
 8005752:	4b91      	ldr	r3, [pc, #580]	; (8005998 <_dtoa_r+0x620>)
 8005754:	2200      	movs	r2, #0
 8005756:	4650      	mov	r0, sl
 8005758:	4659      	mov	r1, fp
 800575a:	f7fb f9cf 	bl	8000afc <__aeabi_dcmplt>
 800575e:	2800      	cmp	r0, #0
 8005760:	d079      	beq.n	8005856 <_dtoa_r+0x4de>
 8005762:	9b03      	ldr	r3, [sp, #12]
 8005764:	2b00      	cmp	r3, #0
 8005766:	d076      	beq.n	8005856 <_dtoa_r+0x4de>
 8005768:	9b02      	ldr	r3, [sp, #8]
 800576a:	2b00      	cmp	r3, #0
 800576c:	dd36      	ble.n	80057dc <_dtoa_r+0x464>
 800576e:	9b00      	ldr	r3, [sp, #0]
 8005770:	4650      	mov	r0, sl
 8005772:	4659      	mov	r1, fp
 8005774:	1e5f      	subs	r7, r3, #1
 8005776:	2200      	movs	r2, #0
 8005778:	4b88      	ldr	r3, [pc, #544]	; (800599c <_dtoa_r+0x624>)
 800577a:	f7fa ff4d 	bl	8000618 <__aeabi_dmul>
 800577e:	9e02      	ldr	r6, [sp, #8]
 8005780:	4682      	mov	sl, r0
 8005782:	468b      	mov	fp, r1
 8005784:	3501      	adds	r5, #1
 8005786:	4628      	mov	r0, r5
 8005788:	f7fa fedc 	bl	8000544 <__aeabi_i2d>
 800578c:	4652      	mov	r2, sl
 800578e:	465b      	mov	r3, fp
 8005790:	f7fa ff42 	bl	8000618 <__aeabi_dmul>
 8005794:	4b82      	ldr	r3, [pc, #520]	; (80059a0 <_dtoa_r+0x628>)
 8005796:	2200      	movs	r2, #0
 8005798:	f7fa fd88 	bl	80002ac <__adddf3>
 800579c:	46d0      	mov	r8, sl
 800579e:	46d9      	mov	r9, fp
 80057a0:	4682      	mov	sl, r0
 80057a2:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 80057a6:	2e00      	cmp	r6, #0
 80057a8:	d158      	bne.n	800585c <_dtoa_r+0x4e4>
 80057aa:	4b7e      	ldr	r3, [pc, #504]	; (80059a4 <_dtoa_r+0x62c>)
 80057ac:	2200      	movs	r2, #0
 80057ae:	4640      	mov	r0, r8
 80057b0:	4649      	mov	r1, r9
 80057b2:	f7fa fd79 	bl	80002a8 <__aeabi_dsub>
 80057b6:	4652      	mov	r2, sl
 80057b8:	465b      	mov	r3, fp
 80057ba:	4680      	mov	r8, r0
 80057bc:	4689      	mov	r9, r1
 80057be:	f7fb f9bb 	bl	8000b38 <__aeabi_dcmpgt>
 80057c2:	2800      	cmp	r0, #0
 80057c4:	f040 8295 	bne.w	8005cf2 <_dtoa_r+0x97a>
 80057c8:	4652      	mov	r2, sl
 80057ca:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 80057ce:	4640      	mov	r0, r8
 80057d0:	4649      	mov	r1, r9
 80057d2:	f7fb f993 	bl	8000afc <__aeabi_dcmplt>
 80057d6:	2800      	cmp	r0, #0
 80057d8:	f040 8289 	bne.w	8005cee <_dtoa_r+0x976>
 80057dc:	ec5b ab19 	vmov	sl, fp, d9
 80057e0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80057e2:	2b00      	cmp	r3, #0
 80057e4:	f2c0 8148 	blt.w	8005a78 <_dtoa_r+0x700>
 80057e8:	9a00      	ldr	r2, [sp, #0]
 80057ea:	2a0e      	cmp	r2, #14
 80057ec:	f300 8144 	bgt.w	8005a78 <_dtoa_r+0x700>
 80057f0:	4b67      	ldr	r3, [pc, #412]	; (8005990 <_dtoa_r+0x618>)
 80057f2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80057f6:	e9d3 8900 	ldrd	r8, r9, [r3]
 80057fa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80057fc:	2b00      	cmp	r3, #0
 80057fe:	f280 80d5 	bge.w	80059ac <_dtoa_r+0x634>
 8005802:	9b03      	ldr	r3, [sp, #12]
 8005804:	2b00      	cmp	r3, #0
 8005806:	f300 80d1 	bgt.w	80059ac <_dtoa_r+0x634>
 800580a:	f040 826f 	bne.w	8005cec <_dtoa_r+0x974>
 800580e:	4b65      	ldr	r3, [pc, #404]	; (80059a4 <_dtoa_r+0x62c>)
 8005810:	2200      	movs	r2, #0
 8005812:	4640      	mov	r0, r8
 8005814:	4649      	mov	r1, r9
 8005816:	f7fa feff 	bl	8000618 <__aeabi_dmul>
 800581a:	4652      	mov	r2, sl
 800581c:	465b      	mov	r3, fp
 800581e:	f7fb f981 	bl	8000b24 <__aeabi_dcmpge>
 8005822:	9e03      	ldr	r6, [sp, #12]
 8005824:	4637      	mov	r7, r6
 8005826:	2800      	cmp	r0, #0
 8005828:	f040 8245 	bne.w	8005cb6 <_dtoa_r+0x93e>
 800582c:	9d01      	ldr	r5, [sp, #4]
 800582e:	2331      	movs	r3, #49	; 0x31
 8005830:	f805 3b01 	strb.w	r3, [r5], #1
 8005834:	9b00      	ldr	r3, [sp, #0]
 8005836:	3301      	adds	r3, #1
 8005838:	9300      	str	r3, [sp, #0]
 800583a:	e240      	b.n	8005cbe <_dtoa_r+0x946>
 800583c:	07f2      	lsls	r2, r6, #31
 800583e:	d505      	bpl.n	800584c <_dtoa_r+0x4d4>
 8005840:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005844:	f7fa fee8 	bl	8000618 <__aeabi_dmul>
 8005848:	3501      	adds	r5, #1
 800584a:	2301      	movs	r3, #1
 800584c:	1076      	asrs	r6, r6, #1
 800584e:	3708      	adds	r7, #8
 8005850:	e777      	b.n	8005742 <_dtoa_r+0x3ca>
 8005852:	2502      	movs	r5, #2
 8005854:	e779      	b.n	800574a <_dtoa_r+0x3d2>
 8005856:	9f00      	ldr	r7, [sp, #0]
 8005858:	9e03      	ldr	r6, [sp, #12]
 800585a:	e794      	b.n	8005786 <_dtoa_r+0x40e>
 800585c:	9901      	ldr	r1, [sp, #4]
 800585e:	4b4c      	ldr	r3, [pc, #304]	; (8005990 <_dtoa_r+0x618>)
 8005860:	4431      	add	r1, r6
 8005862:	910d      	str	r1, [sp, #52]	; 0x34
 8005864:	9908      	ldr	r1, [sp, #32]
 8005866:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800586a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800586e:	2900      	cmp	r1, #0
 8005870:	d043      	beq.n	80058fa <_dtoa_r+0x582>
 8005872:	494d      	ldr	r1, [pc, #308]	; (80059a8 <_dtoa_r+0x630>)
 8005874:	2000      	movs	r0, #0
 8005876:	f7fa fff9 	bl	800086c <__aeabi_ddiv>
 800587a:	4652      	mov	r2, sl
 800587c:	465b      	mov	r3, fp
 800587e:	f7fa fd13 	bl	80002a8 <__aeabi_dsub>
 8005882:	9d01      	ldr	r5, [sp, #4]
 8005884:	4682      	mov	sl, r0
 8005886:	468b      	mov	fp, r1
 8005888:	4649      	mov	r1, r9
 800588a:	4640      	mov	r0, r8
 800588c:	f7fb f974 	bl	8000b78 <__aeabi_d2iz>
 8005890:	4606      	mov	r6, r0
 8005892:	f7fa fe57 	bl	8000544 <__aeabi_i2d>
 8005896:	4602      	mov	r2, r0
 8005898:	460b      	mov	r3, r1
 800589a:	4640      	mov	r0, r8
 800589c:	4649      	mov	r1, r9
 800589e:	f7fa fd03 	bl	80002a8 <__aeabi_dsub>
 80058a2:	3630      	adds	r6, #48	; 0x30
 80058a4:	f805 6b01 	strb.w	r6, [r5], #1
 80058a8:	4652      	mov	r2, sl
 80058aa:	465b      	mov	r3, fp
 80058ac:	4680      	mov	r8, r0
 80058ae:	4689      	mov	r9, r1
 80058b0:	f7fb f924 	bl	8000afc <__aeabi_dcmplt>
 80058b4:	2800      	cmp	r0, #0
 80058b6:	d163      	bne.n	8005980 <_dtoa_r+0x608>
 80058b8:	4642      	mov	r2, r8
 80058ba:	464b      	mov	r3, r9
 80058bc:	4936      	ldr	r1, [pc, #216]	; (8005998 <_dtoa_r+0x620>)
 80058be:	2000      	movs	r0, #0
 80058c0:	f7fa fcf2 	bl	80002a8 <__aeabi_dsub>
 80058c4:	4652      	mov	r2, sl
 80058c6:	465b      	mov	r3, fp
 80058c8:	f7fb f918 	bl	8000afc <__aeabi_dcmplt>
 80058cc:	2800      	cmp	r0, #0
 80058ce:	f040 80b5 	bne.w	8005a3c <_dtoa_r+0x6c4>
 80058d2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80058d4:	429d      	cmp	r5, r3
 80058d6:	d081      	beq.n	80057dc <_dtoa_r+0x464>
 80058d8:	4b30      	ldr	r3, [pc, #192]	; (800599c <_dtoa_r+0x624>)
 80058da:	2200      	movs	r2, #0
 80058dc:	4650      	mov	r0, sl
 80058de:	4659      	mov	r1, fp
 80058e0:	f7fa fe9a 	bl	8000618 <__aeabi_dmul>
 80058e4:	4b2d      	ldr	r3, [pc, #180]	; (800599c <_dtoa_r+0x624>)
 80058e6:	4682      	mov	sl, r0
 80058e8:	468b      	mov	fp, r1
 80058ea:	4640      	mov	r0, r8
 80058ec:	4649      	mov	r1, r9
 80058ee:	2200      	movs	r2, #0
 80058f0:	f7fa fe92 	bl	8000618 <__aeabi_dmul>
 80058f4:	4680      	mov	r8, r0
 80058f6:	4689      	mov	r9, r1
 80058f8:	e7c6      	b.n	8005888 <_dtoa_r+0x510>
 80058fa:	4650      	mov	r0, sl
 80058fc:	4659      	mov	r1, fp
 80058fe:	f7fa fe8b 	bl	8000618 <__aeabi_dmul>
 8005902:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005904:	9d01      	ldr	r5, [sp, #4]
 8005906:	930f      	str	r3, [sp, #60]	; 0x3c
 8005908:	4682      	mov	sl, r0
 800590a:	468b      	mov	fp, r1
 800590c:	4649      	mov	r1, r9
 800590e:	4640      	mov	r0, r8
 8005910:	f7fb f932 	bl	8000b78 <__aeabi_d2iz>
 8005914:	4606      	mov	r6, r0
 8005916:	f7fa fe15 	bl	8000544 <__aeabi_i2d>
 800591a:	3630      	adds	r6, #48	; 0x30
 800591c:	4602      	mov	r2, r0
 800591e:	460b      	mov	r3, r1
 8005920:	4640      	mov	r0, r8
 8005922:	4649      	mov	r1, r9
 8005924:	f7fa fcc0 	bl	80002a8 <__aeabi_dsub>
 8005928:	f805 6b01 	strb.w	r6, [r5], #1
 800592c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800592e:	429d      	cmp	r5, r3
 8005930:	4680      	mov	r8, r0
 8005932:	4689      	mov	r9, r1
 8005934:	f04f 0200 	mov.w	r2, #0
 8005938:	d124      	bne.n	8005984 <_dtoa_r+0x60c>
 800593a:	4b1b      	ldr	r3, [pc, #108]	; (80059a8 <_dtoa_r+0x630>)
 800593c:	4650      	mov	r0, sl
 800593e:	4659      	mov	r1, fp
 8005940:	f7fa fcb4 	bl	80002ac <__adddf3>
 8005944:	4602      	mov	r2, r0
 8005946:	460b      	mov	r3, r1
 8005948:	4640      	mov	r0, r8
 800594a:	4649      	mov	r1, r9
 800594c:	f7fb f8f4 	bl	8000b38 <__aeabi_dcmpgt>
 8005950:	2800      	cmp	r0, #0
 8005952:	d173      	bne.n	8005a3c <_dtoa_r+0x6c4>
 8005954:	4652      	mov	r2, sl
 8005956:	465b      	mov	r3, fp
 8005958:	4913      	ldr	r1, [pc, #76]	; (80059a8 <_dtoa_r+0x630>)
 800595a:	2000      	movs	r0, #0
 800595c:	f7fa fca4 	bl	80002a8 <__aeabi_dsub>
 8005960:	4602      	mov	r2, r0
 8005962:	460b      	mov	r3, r1
 8005964:	4640      	mov	r0, r8
 8005966:	4649      	mov	r1, r9
 8005968:	f7fb f8c8 	bl	8000afc <__aeabi_dcmplt>
 800596c:	2800      	cmp	r0, #0
 800596e:	f43f af35 	beq.w	80057dc <_dtoa_r+0x464>
 8005972:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8005974:	1e6b      	subs	r3, r5, #1
 8005976:	930f      	str	r3, [sp, #60]	; 0x3c
 8005978:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800597c:	2b30      	cmp	r3, #48	; 0x30
 800597e:	d0f8      	beq.n	8005972 <_dtoa_r+0x5fa>
 8005980:	9700      	str	r7, [sp, #0]
 8005982:	e049      	b.n	8005a18 <_dtoa_r+0x6a0>
 8005984:	4b05      	ldr	r3, [pc, #20]	; (800599c <_dtoa_r+0x624>)
 8005986:	f7fa fe47 	bl	8000618 <__aeabi_dmul>
 800598a:	4680      	mov	r8, r0
 800598c:	4689      	mov	r9, r1
 800598e:	e7bd      	b.n	800590c <_dtoa_r+0x594>
 8005990:	08007810 	.word	0x08007810
 8005994:	080077e8 	.word	0x080077e8
 8005998:	3ff00000 	.word	0x3ff00000
 800599c:	40240000 	.word	0x40240000
 80059a0:	401c0000 	.word	0x401c0000
 80059a4:	40140000 	.word	0x40140000
 80059a8:	3fe00000 	.word	0x3fe00000
 80059ac:	9d01      	ldr	r5, [sp, #4]
 80059ae:	4656      	mov	r6, sl
 80059b0:	465f      	mov	r7, fp
 80059b2:	4642      	mov	r2, r8
 80059b4:	464b      	mov	r3, r9
 80059b6:	4630      	mov	r0, r6
 80059b8:	4639      	mov	r1, r7
 80059ba:	f7fa ff57 	bl	800086c <__aeabi_ddiv>
 80059be:	f7fb f8db 	bl	8000b78 <__aeabi_d2iz>
 80059c2:	4682      	mov	sl, r0
 80059c4:	f7fa fdbe 	bl	8000544 <__aeabi_i2d>
 80059c8:	4642      	mov	r2, r8
 80059ca:	464b      	mov	r3, r9
 80059cc:	f7fa fe24 	bl	8000618 <__aeabi_dmul>
 80059d0:	4602      	mov	r2, r0
 80059d2:	460b      	mov	r3, r1
 80059d4:	4630      	mov	r0, r6
 80059d6:	4639      	mov	r1, r7
 80059d8:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 80059dc:	f7fa fc64 	bl	80002a8 <__aeabi_dsub>
 80059e0:	f805 6b01 	strb.w	r6, [r5], #1
 80059e4:	9e01      	ldr	r6, [sp, #4]
 80059e6:	9f03      	ldr	r7, [sp, #12]
 80059e8:	1bae      	subs	r6, r5, r6
 80059ea:	42b7      	cmp	r7, r6
 80059ec:	4602      	mov	r2, r0
 80059ee:	460b      	mov	r3, r1
 80059f0:	d135      	bne.n	8005a5e <_dtoa_r+0x6e6>
 80059f2:	f7fa fc5b 	bl	80002ac <__adddf3>
 80059f6:	4642      	mov	r2, r8
 80059f8:	464b      	mov	r3, r9
 80059fa:	4606      	mov	r6, r0
 80059fc:	460f      	mov	r7, r1
 80059fe:	f7fb f89b 	bl	8000b38 <__aeabi_dcmpgt>
 8005a02:	b9d0      	cbnz	r0, 8005a3a <_dtoa_r+0x6c2>
 8005a04:	4642      	mov	r2, r8
 8005a06:	464b      	mov	r3, r9
 8005a08:	4630      	mov	r0, r6
 8005a0a:	4639      	mov	r1, r7
 8005a0c:	f7fb f86c 	bl	8000ae8 <__aeabi_dcmpeq>
 8005a10:	b110      	cbz	r0, 8005a18 <_dtoa_r+0x6a0>
 8005a12:	f01a 0f01 	tst.w	sl, #1
 8005a16:	d110      	bne.n	8005a3a <_dtoa_r+0x6c2>
 8005a18:	4620      	mov	r0, r4
 8005a1a:	ee18 1a10 	vmov	r1, s16
 8005a1e:	f000 fd05 	bl	800642c <_Bfree>
 8005a22:	2300      	movs	r3, #0
 8005a24:	9800      	ldr	r0, [sp, #0]
 8005a26:	702b      	strb	r3, [r5, #0]
 8005a28:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005a2a:	3001      	adds	r0, #1
 8005a2c:	6018      	str	r0, [r3, #0]
 8005a2e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005a30:	2b00      	cmp	r3, #0
 8005a32:	f43f acf1 	beq.w	8005418 <_dtoa_r+0xa0>
 8005a36:	601d      	str	r5, [r3, #0]
 8005a38:	e4ee      	b.n	8005418 <_dtoa_r+0xa0>
 8005a3a:	9f00      	ldr	r7, [sp, #0]
 8005a3c:	462b      	mov	r3, r5
 8005a3e:	461d      	mov	r5, r3
 8005a40:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8005a44:	2a39      	cmp	r2, #57	; 0x39
 8005a46:	d106      	bne.n	8005a56 <_dtoa_r+0x6de>
 8005a48:	9a01      	ldr	r2, [sp, #4]
 8005a4a:	429a      	cmp	r2, r3
 8005a4c:	d1f7      	bne.n	8005a3e <_dtoa_r+0x6c6>
 8005a4e:	9901      	ldr	r1, [sp, #4]
 8005a50:	2230      	movs	r2, #48	; 0x30
 8005a52:	3701      	adds	r7, #1
 8005a54:	700a      	strb	r2, [r1, #0]
 8005a56:	781a      	ldrb	r2, [r3, #0]
 8005a58:	3201      	adds	r2, #1
 8005a5a:	701a      	strb	r2, [r3, #0]
 8005a5c:	e790      	b.n	8005980 <_dtoa_r+0x608>
 8005a5e:	4ba6      	ldr	r3, [pc, #664]	; (8005cf8 <_dtoa_r+0x980>)
 8005a60:	2200      	movs	r2, #0
 8005a62:	f7fa fdd9 	bl	8000618 <__aeabi_dmul>
 8005a66:	2200      	movs	r2, #0
 8005a68:	2300      	movs	r3, #0
 8005a6a:	4606      	mov	r6, r0
 8005a6c:	460f      	mov	r7, r1
 8005a6e:	f7fb f83b 	bl	8000ae8 <__aeabi_dcmpeq>
 8005a72:	2800      	cmp	r0, #0
 8005a74:	d09d      	beq.n	80059b2 <_dtoa_r+0x63a>
 8005a76:	e7cf      	b.n	8005a18 <_dtoa_r+0x6a0>
 8005a78:	9a08      	ldr	r2, [sp, #32]
 8005a7a:	2a00      	cmp	r2, #0
 8005a7c:	f000 80d7 	beq.w	8005c2e <_dtoa_r+0x8b6>
 8005a80:	9a06      	ldr	r2, [sp, #24]
 8005a82:	2a01      	cmp	r2, #1
 8005a84:	f300 80ba 	bgt.w	8005bfc <_dtoa_r+0x884>
 8005a88:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005a8a:	2a00      	cmp	r2, #0
 8005a8c:	f000 80b2 	beq.w	8005bf4 <_dtoa_r+0x87c>
 8005a90:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8005a94:	9e07      	ldr	r6, [sp, #28]
 8005a96:	9d04      	ldr	r5, [sp, #16]
 8005a98:	9a04      	ldr	r2, [sp, #16]
 8005a9a:	441a      	add	r2, r3
 8005a9c:	9204      	str	r2, [sp, #16]
 8005a9e:	9a05      	ldr	r2, [sp, #20]
 8005aa0:	2101      	movs	r1, #1
 8005aa2:	441a      	add	r2, r3
 8005aa4:	4620      	mov	r0, r4
 8005aa6:	9205      	str	r2, [sp, #20]
 8005aa8:	f000 fd78 	bl	800659c <__i2b>
 8005aac:	4607      	mov	r7, r0
 8005aae:	2d00      	cmp	r5, #0
 8005ab0:	dd0c      	ble.n	8005acc <_dtoa_r+0x754>
 8005ab2:	9b05      	ldr	r3, [sp, #20]
 8005ab4:	2b00      	cmp	r3, #0
 8005ab6:	dd09      	ble.n	8005acc <_dtoa_r+0x754>
 8005ab8:	42ab      	cmp	r3, r5
 8005aba:	9a04      	ldr	r2, [sp, #16]
 8005abc:	bfa8      	it	ge
 8005abe:	462b      	movge	r3, r5
 8005ac0:	1ad2      	subs	r2, r2, r3
 8005ac2:	9204      	str	r2, [sp, #16]
 8005ac4:	9a05      	ldr	r2, [sp, #20]
 8005ac6:	1aed      	subs	r5, r5, r3
 8005ac8:	1ad3      	subs	r3, r2, r3
 8005aca:	9305      	str	r3, [sp, #20]
 8005acc:	9b07      	ldr	r3, [sp, #28]
 8005ace:	b31b      	cbz	r3, 8005b18 <_dtoa_r+0x7a0>
 8005ad0:	9b08      	ldr	r3, [sp, #32]
 8005ad2:	2b00      	cmp	r3, #0
 8005ad4:	f000 80af 	beq.w	8005c36 <_dtoa_r+0x8be>
 8005ad8:	2e00      	cmp	r6, #0
 8005ada:	dd13      	ble.n	8005b04 <_dtoa_r+0x78c>
 8005adc:	4639      	mov	r1, r7
 8005ade:	4632      	mov	r2, r6
 8005ae0:	4620      	mov	r0, r4
 8005ae2:	f000 fe1b 	bl	800671c <__pow5mult>
 8005ae6:	ee18 2a10 	vmov	r2, s16
 8005aea:	4601      	mov	r1, r0
 8005aec:	4607      	mov	r7, r0
 8005aee:	4620      	mov	r0, r4
 8005af0:	f000 fd6a 	bl	80065c8 <__multiply>
 8005af4:	ee18 1a10 	vmov	r1, s16
 8005af8:	4680      	mov	r8, r0
 8005afa:	4620      	mov	r0, r4
 8005afc:	f000 fc96 	bl	800642c <_Bfree>
 8005b00:	ee08 8a10 	vmov	s16, r8
 8005b04:	9b07      	ldr	r3, [sp, #28]
 8005b06:	1b9a      	subs	r2, r3, r6
 8005b08:	d006      	beq.n	8005b18 <_dtoa_r+0x7a0>
 8005b0a:	ee18 1a10 	vmov	r1, s16
 8005b0e:	4620      	mov	r0, r4
 8005b10:	f000 fe04 	bl	800671c <__pow5mult>
 8005b14:	ee08 0a10 	vmov	s16, r0
 8005b18:	2101      	movs	r1, #1
 8005b1a:	4620      	mov	r0, r4
 8005b1c:	f000 fd3e 	bl	800659c <__i2b>
 8005b20:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005b22:	2b00      	cmp	r3, #0
 8005b24:	4606      	mov	r6, r0
 8005b26:	f340 8088 	ble.w	8005c3a <_dtoa_r+0x8c2>
 8005b2a:	461a      	mov	r2, r3
 8005b2c:	4601      	mov	r1, r0
 8005b2e:	4620      	mov	r0, r4
 8005b30:	f000 fdf4 	bl	800671c <__pow5mult>
 8005b34:	9b06      	ldr	r3, [sp, #24]
 8005b36:	2b01      	cmp	r3, #1
 8005b38:	4606      	mov	r6, r0
 8005b3a:	f340 8081 	ble.w	8005c40 <_dtoa_r+0x8c8>
 8005b3e:	f04f 0800 	mov.w	r8, #0
 8005b42:	6933      	ldr	r3, [r6, #16]
 8005b44:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8005b48:	6918      	ldr	r0, [r3, #16]
 8005b4a:	f000 fcd7 	bl	80064fc <__hi0bits>
 8005b4e:	f1c0 0020 	rsb	r0, r0, #32
 8005b52:	9b05      	ldr	r3, [sp, #20]
 8005b54:	4418      	add	r0, r3
 8005b56:	f010 001f 	ands.w	r0, r0, #31
 8005b5a:	f000 8092 	beq.w	8005c82 <_dtoa_r+0x90a>
 8005b5e:	f1c0 0320 	rsb	r3, r0, #32
 8005b62:	2b04      	cmp	r3, #4
 8005b64:	f340 808a 	ble.w	8005c7c <_dtoa_r+0x904>
 8005b68:	f1c0 001c 	rsb	r0, r0, #28
 8005b6c:	9b04      	ldr	r3, [sp, #16]
 8005b6e:	4403      	add	r3, r0
 8005b70:	9304      	str	r3, [sp, #16]
 8005b72:	9b05      	ldr	r3, [sp, #20]
 8005b74:	4403      	add	r3, r0
 8005b76:	4405      	add	r5, r0
 8005b78:	9305      	str	r3, [sp, #20]
 8005b7a:	9b04      	ldr	r3, [sp, #16]
 8005b7c:	2b00      	cmp	r3, #0
 8005b7e:	dd07      	ble.n	8005b90 <_dtoa_r+0x818>
 8005b80:	ee18 1a10 	vmov	r1, s16
 8005b84:	461a      	mov	r2, r3
 8005b86:	4620      	mov	r0, r4
 8005b88:	f000 fe22 	bl	80067d0 <__lshift>
 8005b8c:	ee08 0a10 	vmov	s16, r0
 8005b90:	9b05      	ldr	r3, [sp, #20]
 8005b92:	2b00      	cmp	r3, #0
 8005b94:	dd05      	ble.n	8005ba2 <_dtoa_r+0x82a>
 8005b96:	4631      	mov	r1, r6
 8005b98:	461a      	mov	r2, r3
 8005b9a:	4620      	mov	r0, r4
 8005b9c:	f000 fe18 	bl	80067d0 <__lshift>
 8005ba0:	4606      	mov	r6, r0
 8005ba2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005ba4:	2b00      	cmp	r3, #0
 8005ba6:	d06e      	beq.n	8005c86 <_dtoa_r+0x90e>
 8005ba8:	ee18 0a10 	vmov	r0, s16
 8005bac:	4631      	mov	r1, r6
 8005bae:	f000 fe7f 	bl	80068b0 <__mcmp>
 8005bb2:	2800      	cmp	r0, #0
 8005bb4:	da67      	bge.n	8005c86 <_dtoa_r+0x90e>
 8005bb6:	9b00      	ldr	r3, [sp, #0]
 8005bb8:	3b01      	subs	r3, #1
 8005bba:	ee18 1a10 	vmov	r1, s16
 8005bbe:	9300      	str	r3, [sp, #0]
 8005bc0:	220a      	movs	r2, #10
 8005bc2:	2300      	movs	r3, #0
 8005bc4:	4620      	mov	r0, r4
 8005bc6:	f000 fc53 	bl	8006470 <__multadd>
 8005bca:	9b08      	ldr	r3, [sp, #32]
 8005bcc:	ee08 0a10 	vmov	s16, r0
 8005bd0:	2b00      	cmp	r3, #0
 8005bd2:	f000 81b1 	beq.w	8005f38 <_dtoa_r+0xbc0>
 8005bd6:	2300      	movs	r3, #0
 8005bd8:	4639      	mov	r1, r7
 8005bda:	220a      	movs	r2, #10
 8005bdc:	4620      	mov	r0, r4
 8005bde:	f000 fc47 	bl	8006470 <__multadd>
 8005be2:	9b02      	ldr	r3, [sp, #8]
 8005be4:	2b00      	cmp	r3, #0
 8005be6:	4607      	mov	r7, r0
 8005be8:	f300 808e 	bgt.w	8005d08 <_dtoa_r+0x990>
 8005bec:	9b06      	ldr	r3, [sp, #24]
 8005bee:	2b02      	cmp	r3, #2
 8005bf0:	dc51      	bgt.n	8005c96 <_dtoa_r+0x91e>
 8005bf2:	e089      	b.n	8005d08 <_dtoa_r+0x990>
 8005bf4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8005bf6:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8005bfa:	e74b      	b.n	8005a94 <_dtoa_r+0x71c>
 8005bfc:	9b03      	ldr	r3, [sp, #12]
 8005bfe:	1e5e      	subs	r6, r3, #1
 8005c00:	9b07      	ldr	r3, [sp, #28]
 8005c02:	42b3      	cmp	r3, r6
 8005c04:	bfbf      	itttt	lt
 8005c06:	9b07      	ldrlt	r3, [sp, #28]
 8005c08:	9607      	strlt	r6, [sp, #28]
 8005c0a:	1af2      	sublt	r2, r6, r3
 8005c0c:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8005c0e:	bfb6      	itet	lt
 8005c10:	189b      	addlt	r3, r3, r2
 8005c12:	1b9e      	subge	r6, r3, r6
 8005c14:	930a      	strlt	r3, [sp, #40]	; 0x28
 8005c16:	9b03      	ldr	r3, [sp, #12]
 8005c18:	bfb8      	it	lt
 8005c1a:	2600      	movlt	r6, #0
 8005c1c:	2b00      	cmp	r3, #0
 8005c1e:	bfb7      	itett	lt
 8005c20:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 8005c24:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 8005c28:	1a9d      	sublt	r5, r3, r2
 8005c2a:	2300      	movlt	r3, #0
 8005c2c:	e734      	b.n	8005a98 <_dtoa_r+0x720>
 8005c2e:	9e07      	ldr	r6, [sp, #28]
 8005c30:	9d04      	ldr	r5, [sp, #16]
 8005c32:	9f08      	ldr	r7, [sp, #32]
 8005c34:	e73b      	b.n	8005aae <_dtoa_r+0x736>
 8005c36:	9a07      	ldr	r2, [sp, #28]
 8005c38:	e767      	b.n	8005b0a <_dtoa_r+0x792>
 8005c3a:	9b06      	ldr	r3, [sp, #24]
 8005c3c:	2b01      	cmp	r3, #1
 8005c3e:	dc18      	bgt.n	8005c72 <_dtoa_r+0x8fa>
 8005c40:	f1ba 0f00 	cmp.w	sl, #0
 8005c44:	d115      	bne.n	8005c72 <_dtoa_r+0x8fa>
 8005c46:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8005c4a:	b993      	cbnz	r3, 8005c72 <_dtoa_r+0x8fa>
 8005c4c:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8005c50:	0d1b      	lsrs	r3, r3, #20
 8005c52:	051b      	lsls	r3, r3, #20
 8005c54:	b183      	cbz	r3, 8005c78 <_dtoa_r+0x900>
 8005c56:	9b04      	ldr	r3, [sp, #16]
 8005c58:	3301      	adds	r3, #1
 8005c5a:	9304      	str	r3, [sp, #16]
 8005c5c:	9b05      	ldr	r3, [sp, #20]
 8005c5e:	3301      	adds	r3, #1
 8005c60:	9305      	str	r3, [sp, #20]
 8005c62:	f04f 0801 	mov.w	r8, #1
 8005c66:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005c68:	2b00      	cmp	r3, #0
 8005c6a:	f47f af6a 	bne.w	8005b42 <_dtoa_r+0x7ca>
 8005c6e:	2001      	movs	r0, #1
 8005c70:	e76f      	b.n	8005b52 <_dtoa_r+0x7da>
 8005c72:	f04f 0800 	mov.w	r8, #0
 8005c76:	e7f6      	b.n	8005c66 <_dtoa_r+0x8ee>
 8005c78:	4698      	mov	r8, r3
 8005c7a:	e7f4      	b.n	8005c66 <_dtoa_r+0x8ee>
 8005c7c:	f43f af7d 	beq.w	8005b7a <_dtoa_r+0x802>
 8005c80:	4618      	mov	r0, r3
 8005c82:	301c      	adds	r0, #28
 8005c84:	e772      	b.n	8005b6c <_dtoa_r+0x7f4>
 8005c86:	9b03      	ldr	r3, [sp, #12]
 8005c88:	2b00      	cmp	r3, #0
 8005c8a:	dc37      	bgt.n	8005cfc <_dtoa_r+0x984>
 8005c8c:	9b06      	ldr	r3, [sp, #24]
 8005c8e:	2b02      	cmp	r3, #2
 8005c90:	dd34      	ble.n	8005cfc <_dtoa_r+0x984>
 8005c92:	9b03      	ldr	r3, [sp, #12]
 8005c94:	9302      	str	r3, [sp, #8]
 8005c96:	9b02      	ldr	r3, [sp, #8]
 8005c98:	b96b      	cbnz	r3, 8005cb6 <_dtoa_r+0x93e>
 8005c9a:	4631      	mov	r1, r6
 8005c9c:	2205      	movs	r2, #5
 8005c9e:	4620      	mov	r0, r4
 8005ca0:	f000 fbe6 	bl	8006470 <__multadd>
 8005ca4:	4601      	mov	r1, r0
 8005ca6:	4606      	mov	r6, r0
 8005ca8:	ee18 0a10 	vmov	r0, s16
 8005cac:	f000 fe00 	bl	80068b0 <__mcmp>
 8005cb0:	2800      	cmp	r0, #0
 8005cb2:	f73f adbb 	bgt.w	800582c <_dtoa_r+0x4b4>
 8005cb6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005cb8:	9d01      	ldr	r5, [sp, #4]
 8005cba:	43db      	mvns	r3, r3
 8005cbc:	9300      	str	r3, [sp, #0]
 8005cbe:	f04f 0800 	mov.w	r8, #0
 8005cc2:	4631      	mov	r1, r6
 8005cc4:	4620      	mov	r0, r4
 8005cc6:	f000 fbb1 	bl	800642c <_Bfree>
 8005cca:	2f00      	cmp	r7, #0
 8005ccc:	f43f aea4 	beq.w	8005a18 <_dtoa_r+0x6a0>
 8005cd0:	f1b8 0f00 	cmp.w	r8, #0
 8005cd4:	d005      	beq.n	8005ce2 <_dtoa_r+0x96a>
 8005cd6:	45b8      	cmp	r8, r7
 8005cd8:	d003      	beq.n	8005ce2 <_dtoa_r+0x96a>
 8005cda:	4641      	mov	r1, r8
 8005cdc:	4620      	mov	r0, r4
 8005cde:	f000 fba5 	bl	800642c <_Bfree>
 8005ce2:	4639      	mov	r1, r7
 8005ce4:	4620      	mov	r0, r4
 8005ce6:	f000 fba1 	bl	800642c <_Bfree>
 8005cea:	e695      	b.n	8005a18 <_dtoa_r+0x6a0>
 8005cec:	2600      	movs	r6, #0
 8005cee:	4637      	mov	r7, r6
 8005cf0:	e7e1      	b.n	8005cb6 <_dtoa_r+0x93e>
 8005cf2:	9700      	str	r7, [sp, #0]
 8005cf4:	4637      	mov	r7, r6
 8005cf6:	e599      	b.n	800582c <_dtoa_r+0x4b4>
 8005cf8:	40240000 	.word	0x40240000
 8005cfc:	9b08      	ldr	r3, [sp, #32]
 8005cfe:	2b00      	cmp	r3, #0
 8005d00:	f000 80ca 	beq.w	8005e98 <_dtoa_r+0xb20>
 8005d04:	9b03      	ldr	r3, [sp, #12]
 8005d06:	9302      	str	r3, [sp, #8]
 8005d08:	2d00      	cmp	r5, #0
 8005d0a:	dd05      	ble.n	8005d18 <_dtoa_r+0x9a0>
 8005d0c:	4639      	mov	r1, r7
 8005d0e:	462a      	mov	r2, r5
 8005d10:	4620      	mov	r0, r4
 8005d12:	f000 fd5d 	bl	80067d0 <__lshift>
 8005d16:	4607      	mov	r7, r0
 8005d18:	f1b8 0f00 	cmp.w	r8, #0
 8005d1c:	d05b      	beq.n	8005dd6 <_dtoa_r+0xa5e>
 8005d1e:	6879      	ldr	r1, [r7, #4]
 8005d20:	4620      	mov	r0, r4
 8005d22:	f000 fb43 	bl	80063ac <_Balloc>
 8005d26:	4605      	mov	r5, r0
 8005d28:	b928      	cbnz	r0, 8005d36 <_dtoa_r+0x9be>
 8005d2a:	4b87      	ldr	r3, [pc, #540]	; (8005f48 <_dtoa_r+0xbd0>)
 8005d2c:	4602      	mov	r2, r0
 8005d2e:	f240 21ea 	movw	r1, #746	; 0x2ea
 8005d32:	f7ff bb3b 	b.w	80053ac <_dtoa_r+0x34>
 8005d36:	693a      	ldr	r2, [r7, #16]
 8005d38:	3202      	adds	r2, #2
 8005d3a:	0092      	lsls	r2, r2, #2
 8005d3c:	f107 010c 	add.w	r1, r7, #12
 8005d40:	300c      	adds	r0, #12
 8005d42:	f7fe fc9f 	bl	8004684 <memcpy>
 8005d46:	2201      	movs	r2, #1
 8005d48:	4629      	mov	r1, r5
 8005d4a:	4620      	mov	r0, r4
 8005d4c:	f000 fd40 	bl	80067d0 <__lshift>
 8005d50:	9b01      	ldr	r3, [sp, #4]
 8005d52:	f103 0901 	add.w	r9, r3, #1
 8005d56:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 8005d5a:	4413      	add	r3, r2
 8005d5c:	9305      	str	r3, [sp, #20]
 8005d5e:	f00a 0301 	and.w	r3, sl, #1
 8005d62:	46b8      	mov	r8, r7
 8005d64:	9304      	str	r3, [sp, #16]
 8005d66:	4607      	mov	r7, r0
 8005d68:	4631      	mov	r1, r6
 8005d6a:	ee18 0a10 	vmov	r0, s16
 8005d6e:	f7ff fa77 	bl	8005260 <quorem>
 8005d72:	4641      	mov	r1, r8
 8005d74:	9002      	str	r0, [sp, #8]
 8005d76:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8005d7a:	ee18 0a10 	vmov	r0, s16
 8005d7e:	f000 fd97 	bl	80068b0 <__mcmp>
 8005d82:	463a      	mov	r2, r7
 8005d84:	9003      	str	r0, [sp, #12]
 8005d86:	4631      	mov	r1, r6
 8005d88:	4620      	mov	r0, r4
 8005d8a:	f000 fdad 	bl	80068e8 <__mdiff>
 8005d8e:	68c2      	ldr	r2, [r0, #12]
 8005d90:	f109 3bff 	add.w	fp, r9, #4294967295	; 0xffffffff
 8005d94:	4605      	mov	r5, r0
 8005d96:	bb02      	cbnz	r2, 8005dda <_dtoa_r+0xa62>
 8005d98:	4601      	mov	r1, r0
 8005d9a:	ee18 0a10 	vmov	r0, s16
 8005d9e:	f000 fd87 	bl	80068b0 <__mcmp>
 8005da2:	4602      	mov	r2, r0
 8005da4:	4629      	mov	r1, r5
 8005da6:	4620      	mov	r0, r4
 8005da8:	9207      	str	r2, [sp, #28]
 8005daa:	f000 fb3f 	bl	800642c <_Bfree>
 8005dae:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 8005db2:	ea43 0102 	orr.w	r1, r3, r2
 8005db6:	9b04      	ldr	r3, [sp, #16]
 8005db8:	430b      	orrs	r3, r1
 8005dba:	464d      	mov	r5, r9
 8005dbc:	d10f      	bne.n	8005dde <_dtoa_r+0xa66>
 8005dbe:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8005dc2:	d02a      	beq.n	8005e1a <_dtoa_r+0xaa2>
 8005dc4:	9b03      	ldr	r3, [sp, #12]
 8005dc6:	2b00      	cmp	r3, #0
 8005dc8:	dd02      	ble.n	8005dd0 <_dtoa_r+0xa58>
 8005dca:	9b02      	ldr	r3, [sp, #8]
 8005dcc:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8005dd0:	f88b a000 	strb.w	sl, [fp]
 8005dd4:	e775      	b.n	8005cc2 <_dtoa_r+0x94a>
 8005dd6:	4638      	mov	r0, r7
 8005dd8:	e7ba      	b.n	8005d50 <_dtoa_r+0x9d8>
 8005dda:	2201      	movs	r2, #1
 8005ddc:	e7e2      	b.n	8005da4 <_dtoa_r+0xa2c>
 8005dde:	9b03      	ldr	r3, [sp, #12]
 8005de0:	2b00      	cmp	r3, #0
 8005de2:	db04      	blt.n	8005dee <_dtoa_r+0xa76>
 8005de4:	9906      	ldr	r1, [sp, #24]
 8005de6:	430b      	orrs	r3, r1
 8005de8:	9904      	ldr	r1, [sp, #16]
 8005dea:	430b      	orrs	r3, r1
 8005dec:	d122      	bne.n	8005e34 <_dtoa_r+0xabc>
 8005dee:	2a00      	cmp	r2, #0
 8005df0:	ddee      	ble.n	8005dd0 <_dtoa_r+0xa58>
 8005df2:	ee18 1a10 	vmov	r1, s16
 8005df6:	2201      	movs	r2, #1
 8005df8:	4620      	mov	r0, r4
 8005dfa:	f000 fce9 	bl	80067d0 <__lshift>
 8005dfe:	4631      	mov	r1, r6
 8005e00:	ee08 0a10 	vmov	s16, r0
 8005e04:	f000 fd54 	bl	80068b0 <__mcmp>
 8005e08:	2800      	cmp	r0, #0
 8005e0a:	dc03      	bgt.n	8005e14 <_dtoa_r+0xa9c>
 8005e0c:	d1e0      	bne.n	8005dd0 <_dtoa_r+0xa58>
 8005e0e:	f01a 0f01 	tst.w	sl, #1
 8005e12:	d0dd      	beq.n	8005dd0 <_dtoa_r+0xa58>
 8005e14:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8005e18:	d1d7      	bne.n	8005dca <_dtoa_r+0xa52>
 8005e1a:	2339      	movs	r3, #57	; 0x39
 8005e1c:	f88b 3000 	strb.w	r3, [fp]
 8005e20:	462b      	mov	r3, r5
 8005e22:	461d      	mov	r5, r3
 8005e24:	3b01      	subs	r3, #1
 8005e26:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8005e2a:	2a39      	cmp	r2, #57	; 0x39
 8005e2c:	d071      	beq.n	8005f12 <_dtoa_r+0xb9a>
 8005e2e:	3201      	adds	r2, #1
 8005e30:	701a      	strb	r2, [r3, #0]
 8005e32:	e746      	b.n	8005cc2 <_dtoa_r+0x94a>
 8005e34:	2a00      	cmp	r2, #0
 8005e36:	dd07      	ble.n	8005e48 <_dtoa_r+0xad0>
 8005e38:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8005e3c:	d0ed      	beq.n	8005e1a <_dtoa_r+0xaa2>
 8005e3e:	f10a 0301 	add.w	r3, sl, #1
 8005e42:	f88b 3000 	strb.w	r3, [fp]
 8005e46:	e73c      	b.n	8005cc2 <_dtoa_r+0x94a>
 8005e48:	9b05      	ldr	r3, [sp, #20]
 8005e4a:	f809 ac01 	strb.w	sl, [r9, #-1]
 8005e4e:	4599      	cmp	r9, r3
 8005e50:	d047      	beq.n	8005ee2 <_dtoa_r+0xb6a>
 8005e52:	ee18 1a10 	vmov	r1, s16
 8005e56:	2300      	movs	r3, #0
 8005e58:	220a      	movs	r2, #10
 8005e5a:	4620      	mov	r0, r4
 8005e5c:	f000 fb08 	bl	8006470 <__multadd>
 8005e60:	45b8      	cmp	r8, r7
 8005e62:	ee08 0a10 	vmov	s16, r0
 8005e66:	f04f 0300 	mov.w	r3, #0
 8005e6a:	f04f 020a 	mov.w	r2, #10
 8005e6e:	4641      	mov	r1, r8
 8005e70:	4620      	mov	r0, r4
 8005e72:	d106      	bne.n	8005e82 <_dtoa_r+0xb0a>
 8005e74:	f000 fafc 	bl	8006470 <__multadd>
 8005e78:	4680      	mov	r8, r0
 8005e7a:	4607      	mov	r7, r0
 8005e7c:	f109 0901 	add.w	r9, r9, #1
 8005e80:	e772      	b.n	8005d68 <_dtoa_r+0x9f0>
 8005e82:	f000 faf5 	bl	8006470 <__multadd>
 8005e86:	4639      	mov	r1, r7
 8005e88:	4680      	mov	r8, r0
 8005e8a:	2300      	movs	r3, #0
 8005e8c:	220a      	movs	r2, #10
 8005e8e:	4620      	mov	r0, r4
 8005e90:	f000 faee 	bl	8006470 <__multadd>
 8005e94:	4607      	mov	r7, r0
 8005e96:	e7f1      	b.n	8005e7c <_dtoa_r+0xb04>
 8005e98:	9b03      	ldr	r3, [sp, #12]
 8005e9a:	9302      	str	r3, [sp, #8]
 8005e9c:	9d01      	ldr	r5, [sp, #4]
 8005e9e:	ee18 0a10 	vmov	r0, s16
 8005ea2:	4631      	mov	r1, r6
 8005ea4:	f7ff f9dc 	bl	8005260 <quorem>
 8005ea8:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8005eac:	9b01      	ldr	r3, [sp, #4]
 8005eae:	f805 ab01 	strb.w	sl, [r5], #1
 8005eb2:	1aea      	subs	r2, r5, r3
 8005eb4:	9b02      	ldr	r3, [sp, #8]
 8005eb6:	4293      	cmp	r3, r2
 8005eb8:	dd09      	ble.n	8005ece <_dtoa_r+0xb56>
 8005eba:	ee18 1a10 	vmov	r1, s16
 8005ebe:	2300      	movs	r3, #0
 8005ec0:	220a      	movs	r2, #10
 8005ec2:	4620      	mov	r0, r4
 8005ec4:	f000 fad4 	bl	8006470 <__multadd>
 8005ec8:	ee08 0a10 	vmov	s16, r0
 8005ecc:	e7e7      	b.n	8005e9e <_dtoa_r+0xb26>
 8005ece:	9b02      	ldr	r3, [sp, #8]
 8005ed0:	2b00      	cmp	r3, #0
 8005ed2:	bfc8      	it	gt
 8005ed4:	461d      	movgt	r5, r3
 8005ed6:	9b01      	ldr	r3, [sp, #4]
 8005ed8:	bfd8      	it	le
 8005eda:	2501      	movle	r5, #1
 8005edc:	441d      	add	r5, r3
 8005ede:	f04f 0800 	mov.w	r8, #0
 8005ee2:	ee18 1a10 	vmov	r1, s16
 8005ee6:	2201      	movs	r2, #1
 8005ee8:	4620      	mov	r0, r4
 8005eea:	f000 fc71 	bl	80067d0 <__lshift>
 8005eee:	4631      	mov	r1, r6
 8005ef0:	ee08 0a10 	vmov	s16, r0
 8005ef4:	f000 fcdc 	bl	80068b0 <__mcmp>
 8005ef8:	2800      	cmp	r0, #0
 8005efa:	dc91      	bgt.n	8005e20 <_dtoa_r+0xaa8>
 8005efc:	d102      	bne.n	8005f04 <_dtoa_r+0xb8c>
 8005efe:	f01a 0f01 	tst.w	sl, #1
 8005f02:	d18d      	bne.n	8005e20 <_dtoa_r+0xaa8>
 8005f04:	462b      	mov	r3, r5
 8005f06:	461d      	mov	r5, r3
 8005f08:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8005f0c:	2a30      	cmp	r2, #48	; 0x30
 8005f0e:	d0fa      	beq.n	8005f06 <_dtoa_r+0xb8e>
 8005f10:	e6d7      	b.n	8005cc2 <_dtoa_r+0x94a>
 8005f12:	9a01      	ldr	r2, [sp, #4]
 8005f14:	429a      	cmp	r2, r3
 8005f16:	d184      	bne.n	8005e22 <_dtoa_r+0xaaa>
 8005f18:	9b00      	ldr	r3, [sp, #0]
 8005f1a:	3301      	adds	r3, #1
 8005f1c:	9300      	str	r3, [sp, #0]
 8005f1e:	2331      	movs	r3, #49	; 0x31
 8005f20:	7013      	strb	r3, [r2, #0]
 8005f22:	e6ce      	b.n	8005cc2 <_dtoa_r+0x94a>
 8005f24:	4b09      	ldr	r3, [pc, #36]	; (8005f4c <_dtoa_r+0xbd4>)
 8005f26:	f7ff ba95 	b.w	8005454 <_dtoa_r+0xdc>
 8005f2a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005f2c:	2b00      	cmp	r3, #0
 8005f2e:	f47f aa6e 	bne.w	800540e <_dtoa_r+0x96>
 8005f32:	4b07      	ldr	r3, [pc, #28]	; (8005f50 <_dtoa_r+0xbd8>)
 8005f34:	f7ff ba8e 	b.w	8005454 <_dtoa_r+0xdc>
 8005f38:	9b02      	ldr	r3, [sp, #8]
 8005f3a:	2b00      	cmp	r3, #0
 8005f3c:	dcae      	bgt.n	8005e9c <_dtoa_r+0xb24>
 8005f3e:	9b06      	ldr	r3, [sp, #24]
 8005f40:	2b02      	cmp	r3, #2
 8005f42:	f73f aea8 	bgt.w	8005c96 <_dtoa_r+0x91e>
 8005f46:	e7a9      	b.n	8005e9c <_dtoa_r+0xb24>
 8005f48:	08007717 	.word	0x08007717
 8005f4c:	08007674 	.word	0x08007674
 8005f50:	08007698 	.word	0x08007698

08005f54 <__sflush_r>:
 8005f54:	898a      	ldrh	r2, [r1, #12]
 8005f56:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005f5a:	4605      	mov	r5, r0
 8005f5c:	0710      	lsls	r0, r2, #28
 8005f5e:	460c      	mov	r4, r1
 8005f60:	d458      	bmi.n	8006014 <__sflush_r+0xc0>
 8005f62:	684b      	ldr	r3, [r1, #4]
 8005f64:	2b00      	cmp	r3, #0
 8005f66:	dc05      	bgt.n	8005f74 <__sflush_r+0x20>
 8005f68:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8005f6a:	2b00      	cmp	r3, #0
 8005f6c:	dc02      	bgt.n	8005f74 <__sflush_r+0x20>
 8005f6e:	2000      	movs	r0, #0
 8005f70:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005f74:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005f76:	2e00      	cmp	r6, #0
 8005f78:	d0f9      	beq.n	8005f6e <__sflush_r+0x1a>
 8005f7a:	2300      	movs	r3, #0
 8005f7c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8005f80:	682f      	ldr	r7, [r5, #0]
 8005f82:	602b      	str	r3, [r5, #0]
 8005f84:	d032      	beq.n	8005fec <__sflush_r+0x98>
 8005f86:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8005f88:	89a3      	ldrh	r3, [r4, #12]
 8005f8a:	075a      	lsls	r2, r3, #29
 8005f8c:	d505      	bpl.n	8005f9a <__sflush_r+0x46>
 8005f8e:	6863      	ldr	r3, [r4, #4]
 8005f90:	1ac0      	subs	r0, r0, r3
 8005f92:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8005f94:	b10b      	cbz	r3, 8005f9a <__sflush_r+0x46>
 8005f96:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005f98:	1ac0      	subs	r0, r0, r3
 8005f9a:	2300      	movs	r3, #0
 8005f9c:	4602      	mov	r2, r0
 8005f9e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005fa0:	6a21      	ldr	r1, [r4, #32]
 8005fa2:	4628      	mov	r0, r5
 8005fa4:	47b0      	blx	r6
 8005fa6:	1c43      	adds	r3, r0, #1
 8005fa8:	89a3      	ldrh	r3, [r4, #12]
 8005faa:	d106      	bne.n	8005fba <__sflush_r+0x66>
 8005fac:	6829      	ldr	r1, [r5, #0]
 8005fae:	291d      	cmp	r1, #29
 8005fb0:	d82c      	bhi.n	800600c <__sflush_r+0xb8>
 8005fb2:	4a2a      	ldr	r2, [pc, #168]	; (800605c <__sflush_r+0x108>)
 8005fb4:	40ca      	lsrs	r2, r1
 8005fb6:	07d6      	lsls	r6, r2, #31
 8005fb8:	d528      	bpl.n	800600c <__sflush_r+0xb8>
 8005fba:	2200      	movs	r2, #0
 8005fbc:	6062      	str	r2, [r4, #4]
 8005fbe:	04d9      	lsls	r1, r3, #19
 8005fc0:	6922      	ldr	r2, [r4, #16]
 8005fc2:	6022      	str	r2, [r4, #0]
 8005fc4:	d504      	bpl.n	8005fd0 <__sflush_r+0x7c>
 8005fc6:	1c42      	adds	r2, r0, #1
 8005fc8:	d101      	bne.n	8005fce <__sflush_r+0x7a>
 8005fca:	682b      	ldr	r3, [r5, #0]
 8005fcc:	b903      	cbnz	r3, 8005fd0 <__sflush_r+0x7c>
 8005fce:	6560      	str	r0, [r4, #84]	; 0x54
 8005fd0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005fd2:	602f      	str	r7, [r5, #0]
 8005fd4:	2900      	cmp	r1, #0
 8005fd6:	d0ca      	beq.n	8005f6e <__sflush_r+0x1a>
 8005fd8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005fdc:	4299      	cmp	r1, r3
 8005fde:	d002      	beq.n	8005fe6 <__sflush_r+0x92>
 8005fe0:	4628      	mov	r0, r5
 8005fe2:	f000 fd7d 	bl	8006ae0 <_free_r>
 8005fe6:	2000      	movs	r0, #0
 8005fe8:	6360      	str	r0, [r4, #52]	; 0x34
 8005fea:	e7c1      	b.n	8005f70 <__sflush_r+0x1c>
 8005fec:	6a21      	ldr	r1, [r4, #32]
 8005fee:	2301      	movs	r3, #1
 8005ff0:	4628      	mov	r0, r5
 8005ff2:	47b0      	blx	r6
 8005ff4:	1c41      	adds	r1, r0, #1
 8005ff6:	d1c7      	bne.n	8005f88 <__sflush_r+0x34>
 8005ff8:	682b      	ldr	r3, [r5, #0]
 8005ffa:	2b00      	cmp	r3, #0
 8005ffc:	d0c4      	beq.n	8005f88 <__sflush_r+0x34>
 8005ffe:	2b1d      	cmp	r3, #29
 8006000:	d001      	beq.n	8006006 <__sflush_r+0xb2>
 8006002:	2b16      	cmp	r3, #22
 8006004:	d101      	bne.n	800600a <__sflush_r+0xb6>
 8006006:	602f      	str	r7, [r5, #0]
 8006008:	e7b1      	b.n	8005f6e <__sflush_r+0x1a>
 800600a:	89a3      	ldrh	r3, [r4, #12]
 800600c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006010:	81a3      	strh	r3, [r4, #12]
 8006012:	e7ad      	b.n	8005f70 <__sflush_r+0x1c>
 8006014:	690f      	ldr	r7, [r1, #16]
 8006016:	2f00      	cmp	r7, #0
 8006018:	d0a9      	beq.n	8005f6e <__sflush_r+0x1a>
 800601a:	0793      	lsls	r3, r2, #30
 800601c:	680e      	ldr	r6, [r1, #0]
 800601e:	bf08      	it	eq
 8006020:	694b      	ldreq	r3, [r1, #20]
 8006022:	600f      	str	r7, [r1, #0]
 8006024:	bf18      	it	ne
 8006026:	2300      	movne	r3, #0
 8006028:	eba6 0807 	sub.w	r8, r6, r7
 800602c:	608b      	str	r3, [r1, #8]
 800602e:	f1b8 0f00 	cmp.w	r8, #0
 8006032:	dd9c      	ble.n	8005f6e <__sflush_r+0x1a>
 8006034:	6a21      	ldr	r1, [r4, #32]
 8006036:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8006038:	4643      	mov	r3, r8
 800603a:	463a      	mov	r2, r7
 800603c:	4628      	mov	r0, r5
 800603e:	47b0      	blx	r6
 8006040:	2800      	cmp	r0, #0
 8006042:	dc06      	bgt.n	8006052 <__sflush_r+0xfe>
 8006044:	89a3      	ldrh	r3, [r4, #12]
 8006046:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800604a:	81a3      	strh	r3, [r4, #12]
 800604c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006050:	e78e      	b.n	8005f70 <__sflush_r+0x1c>
 8006052:	4407      	add	r7, r0
 8006054:	eba8 0800 	sub.w	r8, r8, r0
 8006058:	e7e9      	b.n	800602e <__sflush_r+0xda>
 800605a:	bf00      	nop
 800605c:	20400001 	.word	0x20400001

08006060 <_fflush_r>:
 8006060:	b538      	push	{r3, r4, r5, lr}
 8006062:	690b      	ldr	r3, [r1, #16]
 8006064:	4605      	mov	r5, r0
 8006066:	460c      	mov	r4, r1
 8006068:	b913      	cbnz	r3, 8006070 <_fflush_r+0x10>
 800606a:	2500      	movs	r5, #0
 800606c:	4628      	mov	r0, r5
 800606e:	bd38      	pop	{r3, r4, r5, pc}
 8006070:	b118      	cbz	r0, 800607a <_fflush_r+0x1a>
 8006072:	6983      	ldr	r3, [r0, #24]
 8006074:	b90b      	cbnz	r3, 800607a <_fflush_r+0x1a>
 8006076:	f000 f887 	bl	8006188 <__sinit>
 800607a:	4b14      	ldr	r3, [pc, #80]	; (80060cc <_fflush_r+0x6c>)
 800607c:	429c      	cmp	r4, r3
 800607e:	d11b      	bne.n	80060b8 <_fflush_r+0x58>
 8006080:	686c      	ldr	r4, [r5, #4]
 8006082:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006086:	2b00      	cmp	r3, #0
 8006088:	d0ef      	beq.n	800606a <_fflush_r+0xa>
 800608a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800608c:	07d0      	lsls	r0, r2, #31
 800608e:	d404      	bmi.n	800609a <_fflush_r+0x3a>
 8006090:	0599      	lsls	r1, r3, #22
 8006092:	d402      	bmi.n	800609a <_fflush_r+0x3a>
 8006094:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006096:	f000 f91a 	bl	80062ce <__retarget_lock_acquire_recursive>
 800609a:	4628      	mov	r0, r5
 800609c:	4621      	mov	r1, r4
 800609e:	f7ff ff59 	bl	8005f54 <__sflush_r>
 80060a2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80060a4:	07da      	lsls	r2, r3, #31
 80060a6:	4605      	mov	r5, r0
 80060a8:	d4e0      	bmi.n	800606c <_fflush_r+0xc>
 80060aa:	89a3      	ldrh	r3, [r4, #12]
 80060ac:	059b      	lsls	r3, r3, #22
 80060ae:	d4dd      	bmi.n	800606c <_fflush_r+0xc>
 80060b0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80060b2:	f000 f90d 	bl	80062d0 <__retarget_lock_release_recursive>
 80060b6:	e7d9      	b.n	800606c <_fflush_r+0xc>
 80060b8:	4b05      	ldr	r3, [pc, #20]	; (80060d0 <_fflush_r+0x70>)
 80060ba:	429c      	cmp	r4, r3
 80060bc:	d101      	bne.n	80060c2 <_fflush_r+0x62>
 80060be:	68ac      	ldr	r4, [r5, #8]
 80060c0:	e7df      	b.n	8006082 <_fflush_r+0x22>
 80060c2:	4b04      	ldr	r3, [pc, #16]	; (80060d4 <_fflush_r+0x74>)
 80060c4:	429c      	cmp	r4, r3
 80060c6:	bf08      	it	eq
 80060c8:	68ec      	ldreq	r4, [r5, #12]
 80060ca:	e7da      	b.n	8006082 <_fflush_r+0x22>
 80060cc:	08007748 	.word	0x08007748
 80060d0:	08007768 	.word	0x08007768
 80060d4:	08007728 	.word	0x08007728

080060d8 <std>:
 80060d8:	2300      	movs	r3, #0
 80060da:	b510      	push	{r4, lr}
 80060dc:	4604      	mov	r4, r0
 80060de:	e9c0 3300 	strd	r3, r3, [r0]
 80060e2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80060e6:	6083      	str	r3, [r0, #8]
 80060e8:	8181      	strh	r1, [r0, #12]
 80060ea:	6643      	str	r3, [r0, #100]	; 0x64
 80060ec:	81c2      	strh	r2, [r0, #14]
 80060ee:	6183      	str	r3, [r0, #24]
 80060f0:	4619      	mov	r1, r3
 80060f2:	2208      	movs	r2, #8
 80060f4:	305c      	adds	r0, #92	; 0x5c
 80060f6:	f7fe fad3 	bl	80046a0 <memset>
 80060fa:	4b05      	ldr	r3, [pc, #20]	; (8006110 <std+0x38>)
 80060fc:	6263      	str	r3, [r4, #36]	; 0x24
 80060fe:	4b05      	ldr	r3, [pc, #20]	; (8006114 <std+0x3c>)
 8006100:	62a3      	str	r3, [r4, #40]	; 0x28
 8006102:	4b05      	ldr	r3, [pc, #20]	; (8006118 <std+0x40>)
 8006104:	62e3      	str	r3, [r4, #44]	; 0x2c
 8006106:	4b05      	ldr	r3, [pc, #20]	; (800611c <std+0x44>)
 8006108:	6224      	str	r4, [r4, #32]
 800610a:	6323      	str	r3, [r4, #48]	; 0x30
 800610c:	bd10      	pop	{r4, pc}
 800610e:	bf00      	nop
 8006110:	0800722d 	.word	0x0800722d
 8006114:	0800724f 	.word	0x0800724f
 8006118:	08007287 	.word	0x08007287
 800611c:	080072ab 	.word	0x080072ab

08006120 <_cleanup_r>:
 8006120:	4901      	ldr	r1, [pc, #4]	; (8006128 <_cleanup_r+0x8>)
 8006122:	f000 b8af 	b.w	8006284 <_fwalk_reent>
 8006126:	bf00      	nop
 8006128:	08006061 	.word	0x08006061

0800612c <__sfmoreglue>:
 800612c:	b570      	push	{r4, r5, r6, lr}
 800612e:	2268      	movs	r2, #104	; 0x68
 8006130:	1e4d      	subs	r5, r1, #1
 8006132:	4355      	muls	r5, r2
 8006134:	460e      	mov	r6, r1
 8006136:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800613a:	f000 fd3d 	bl	8006bb8 <_malloc_r>
 800613e:	4604      	mov	r4, r0
 8006140:	b140      	cbz	r0, 8006154 <__sfmoreglue+0x28>
 8006142:	2100      	movs	r1, #0
 8006144:	e9c0 1600 	strd	r1, r6, [r0]
 8006148:	300c      	adds	r0, #12
 800614a:	60a0      	str	r0, [r4, #8]
 800614c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8006150:	f7fe faa6 	bl	80046a0 <memset>
 8006154:	4620      	mov	r0, r4
 8006156:	bd70      	pop	{r4, r5, r6, pc}

08006158 <__sfp_lock_acquire>:
 8006158:	4801      	ldr	r0, [pc, #4]	; (8006160 <__sfp_lock_acquire+0x8>)
 800615a:	f000 b8b8 	b.w	80062ce <__retarget_lock_acquire_recursive>
 800615e:	bf00      	nop
 8006160:	200003fd 	.word	0x200003fd

08006164 <__sfp_lock_release>:
 8006164:	4801      	ldr	r0, [pc, #4]	; (800616c <__sfp_lock_release+0x8>)
 8006166:	f000 b8b3 	b.w	80062d0 <__retarget_lock_release_recursive>
 800616a:	bf00      	nop
 800616c:	200003fd 	.word	0x200003fd

08006170 <__sinit_lock_acquire>:
 8006170:	4801      	ldr	r0, [pc, #4]	; (8006178 <__sinit_lock_acquire+0x8>)
 8006172:	f000 b8ac 	b.w	80062ce <__retarget_lock_acquire_recursive>
 8006176:	bf00      	nop
 8006178:	200003fe 	.word	0x200003fe

0800617c <__sinit_lock_release>:
 800617c:	4801      	ldr	r0, [pc, #4]	; (8006184 <__sinit_lock_release+0x8>)
 800617e:	f000 b8a7 	b.w	80062d0 <__retarget_lock_release_recursive>
 8006182:	bf00      	nop
 8006184:	200003fe 	.word	0x200003fe

08006188 <__sinit>:
 8006188:	b510      	push	{r4, lr}
 800618a:	4604      	mov	r4, r0
 800618c:	f7ff fff0 	bl	8006170 <__sinit_lock_acquire>
 8006190:	69a3      	ldr	r3, [r4, #24]
 8006192:	b11b      	cbz	r3, 800619c <__sinit+0x14>
 8006194:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006198:	f7ff bff0 	b.w	800617c <__sinit_lock_release>
 800619c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80061a0:	6523      	str	r3, [r4, #80]	; 0x50
 80061a2:	4b13      	ldr	r3, [pc, #76]	; (80061f0 <__sinit+0x68>)
 80061a4:	4a13      	ldr	r2, [pc, #76]	; (80061f4 <__sinit+0x6c>)
 80061a6:	681b      	ldr	r3, [r3, #0]
 80061a8:	62a2      	str	r2, [r4, #40]	; 0x28
 80061aa:	42a3      	cmp	r3, r4
 80061ac:	bf04      	itt	eq
 80061ae:	2301      	moveq	r3, #1
 80061b0:	61a3      	streq	r3, [r4, #24]
 80061b2:	4620      	mov	r0, r4
 80061b4:	f000 f820 	bl	80061f8 <__sfp>
 80061b8:	6060      	str	r0, [r4, #4]
 80061ba:	4620      	mov	r0, r4
 80061bc:	f000 f81c 	bl	80061f8 <__sfp>
 80061c0:	60a0      	str	r0, [r4, #8]
 80061c2:	4620      	mov	r0, r4
 80061c4:	f000 f818 	bl	80061f8 <__sfp>
 80061c8:	2200      	movs	r2, #0
 80061ca:	60e0      	str	r0, [r4, #12]
 80061cc:	2104      	movs	r1, #4
 80061ce:	6860      	ldr	r0, [r4, #4]
 80061d0:	f7ff ff82 	bl	80060d8 <std>
 80061d4:	68a0      	ldr	r0, [r4, #8]
 80061d6:	2201      	movs	r2, #1
 80061d8:	2109      	movs	r1, #9
 80061da:	f7ff ff7d 	bl	80060d8 <std>
 80061de:	68e0      	ldr	r0, [r4, #12]
 80061e0:	2202      	movs	r2, #2
 80061e2:	2112      	movs	r1, #18
 80061e4:	f7ff ff78 	bl	80060d8 <std>
 80061e8:	2301      	movs	r3, #1
 80061ea:	61a3      	str	r3, [r4, #24]
 80061ec:	e7d2      	b.n	8006194 <__sinit+0xc>
 80061ee:	bf00      	nop
 80061f0:	08007660 	.word	0x08007660
 80061f4:	08006121 	.word	0x08006121

080061f8 <__sfp>:
 80061f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80061fa:	4607      	mov	r7, r0
 80061fc:	f7ff ffac 	bl	8006158 <__sfp_lock_acquire>
 8006200:	4b1e      	ldr	r3, [pc, #120]	; (800627c <__sfp+0x84>)
 8006202:	681e      	ldr	r6, [r3, #0]
 8006204:	69b3      	ldr	r3, [r6, #24]
 8006206:	b913      	cbnz	r3, 800620e <__sfp+0x16>
 8006208:	4630      	mov	r0, r6
 800620a:	f7ff ffbd 	bl	8006188 <__sinit>
 800620e:	3648      	adds	r6, #72	; 0x48
 8006210:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8006214:	3b01      	subs	r3, #1
 8006216:	d503      	bpl.n	8006220 <__sfp+0x28>
 8006218:	6833      	ldr	r3, [r6, #0]
 800621a:	b30b      	cbz	r3, 8006260 <__sfp+0x68>
 800621c:	6836      	ldr	r6, [r6, #0]
 800621e:	e7f7      	b.n	8006210 <__sfp+0x18>
 8006220:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8006224:	b9d5      	cbnz	r5, 800625c <__sfp+0x64>
 8006226:	4b16      	ldr	r3, [pc, #88]	; (8006280 <__sfp+0x88>)
 8006228:	60e3      	str	r3, [r4, #12]
 800622a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800622e:	6665      	str	r5, [r4, #100]	; 0x64
 8006230:	f000 f84c 	bl	80062cc <__retarget_lock_init_recursive>
 8006234:	f7ff ff96 	bl	8006164 <__sfp_lock_release>
 8006238:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800623c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8006240:	6025      	str	r5, [r4, #0]
 8006242:	61a5      	str	r5, [r4, #24]
 8006244:	2208      	movs	r2, #8
 8006246:	4629      	mov	r1, r5
 8006248:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800624c:	f7fe fa28 	bl	80046a0 <memset>
 8006250:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8006254:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8006258:	4620      	mov	r0, r4
 800625a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800625c:	3468      	adds	r4, #104	; 0x68
 800625e:	e7d9      	b.n	8006214 <__sfp+0x1c>
 8006260:	2104      	movs	r1, #4
 8006262:	4638      	mov	r0, r7
 8006264:	f7ff ff62 	bl	800612c <__sfmoreglue>
 8006268:	4604      	mov	r4, r0
 800626a:	6030      	str	r0, [r6, #0]
 800626c:	2800      	cmp	r0, #0
 800626e:	d1d5      	bne.n	800621c <__sfp+0x24>
 8006270:	f7ff ff78 	bl	8006164 <__sfp_lock_release>
 8006274:	230c      	movs	r3, #12
 8006276:	603b      	str	r3, [r7, #0]
 8006278:	e7ee      	b.n	8006258 <__sfp+0x60>
 800627a:	bf00      	nop
 800627c:	08007660 	.word	0x08007660
 8006280:	ffff0001 	.word	0xffff0001

08006284 <_fwalk_reent>:
 8006284:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006288:	4606      	mov	r6, r0
 800628a:	4688      	mov	r8, r1
 800628c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8006290:	2700      	movs	r7, #0
 8006292:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006296:	f1b9 0901 	subs.w	r9, r9, #1
 800629a:	d505      	bpl.n	80062a8 <_fwalk_reent+0x24>
 800629c:	6824      	ldr	r4, [r4, #0]
 800629e:	2c00      	cmp	r4, #0
 80062a0:	d1f7      	bne.n	8006292 <_fwalk_reent+0xe>
 80062a2:	4638      	mov	r0, r7
 80062a4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80062a8:	89ab      	ldrh	r3, [r5, #12]
 80062aa:	2b01      	cmp	r3, #1
 80062ac:	d907      	bls.n	80062be <_fwalk_reent+0x3a>
 80062ae:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80062b2:	3301      	adds	r3, #1
 80062b4:	d003      	beq.n	80062be <_fwalk_reent+0x3a>
 80062b6:	4629      	mov	r1, r5
 80062b8:	4630      	mov	r0, r6
 80062ba:	47c0      	blx	r8
 80062bc:	4307      	orrs	r7, r0
 80062be:	3568      	adds	r5, #104	; 0x68
 80062c0:	e7e9      	b.n	8006296 <_fwalk_reent+0x12>
	...

080062c4 <_localeconv_r>:
 80062c4:	4800      	ldr	r0, [pc, #0]	; (80062c8 <_localeconv_r+0x4>)
 80062c6:	4770      	bx	lr
 80062c8:	20000164 	.word	0x20000164

080062cc <__retarget_lock_init_recursive>:
 80062cc:	4770      	bx	lr

080062ce <__retarget_lock_acquire_recursive>:
 80062ce:	4770      	bx	lr

080062d0 <__retarget_lock_release_recursive>:
 80062d0:	4770      	bx	lr

080062d2 <__swhatbuf_r>:
 80062d2:	b570      	push	{r4, r5, r6, lr}
 80062d4:	460e      	mov	r6, r1
 80062d6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80062da:	2900      	cmp	r1, #0
 80062dc:	b096      	sub	sp, #88	; 0x58
 80062de:	4614      	mov	r4, r2
 80062e0:	461d      	mov	r5, r3
 80062e2:	da08      	bge.n	80062f6 <__swhatbuf_r+0x24>
 80062e4:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 80062e8:	2200      	movs	r2, #0
 80062ea:	602a      	str	r2, [r5, #0]
 80062ec:	061a      	lsls	r2, r3, #24
 80062ee:	d410      	bmi.n	8006312 <__swhatbuf_r+0x40>
 80062f0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80062f4:	e00e      	b.n	8006314 <__swhatbuf_r+0x42>
 80062f6:	466a      	mov	r2, sp
 80062f8:	f001 f82e 	bl	8007358 <_fstat_r>
 80062fc:	2800      	cmp	r0, #0
 80062fe:	dbf1      	blt.n	80062e4 <__swhatbuf_r+0x12>
 8006300:	9a01      	ldr	r2, [sp, #4]
 8006302:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8006306:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800630a:	425a      	negs	r2, r3
 800630c:	415a      	adcs	r2, r3
 800630e:	602a      	str	r2, [r5, #0]
 8006310:	e7ee      	b.n	80062f0 <__swhatbuf_r+0x1e>
 8006312:	2340      	movs	r3, #64	; 0x40
 8006314:	2000      	movs	r0, #0
 8006316:	6023      	str	r3, [r4, #0]
 8006318:	b016      	add	sp, #88	; 0x58
 800631a:	bd70      	pop	{r4, r5, r6, pc}

0800631c <__smakebuf_r>:
 800631c:	898b      	ldrh	r3, [r1, #12]
 800631e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8006320:	079d      	lsls	r5, r3, #30
 8006322:	4606      	mov	r6, r0
 8006324:	460c      	mov	r4, r1
 8006326:	d507      	bpl.n	8006338 <__smakebuf_r+0x1c>
 8006328:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800632c:	6023      	str	r3, [r4, #0]
 800632e:	6123      	str	r3, [r4, #16]
 8006330:	2301      	movs	r3, #1
 8006332:	6163      	str	r3, [r4, #20]
 8006334:	b002      	add	sp, #8
 8006336:	bd70      	pop	{r4, r5, r6, pc}
 8006338:	ab01      	add	r3, sp, #4
 800633a:	466a      	mov	r2, sp
 800633c:	f7ff ffc9 	bl	80062d2 <__swhatbuf_r>
 8006340:	9900      	ldr	r1, [sp, #0]
 8006342:	4605      	mov	r5, r0
 8006344:	4630      	mov	r0, r6
 8006346:	f000 fc37 	bl	8006bb8 <_malloc_r>
 800634a:	b948      	cbnz	r0, 8006360 <__smakebuf_r+0x44>
 800634c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006350:	059a      	lsls	r2, r3, #22
 8006352:	d4ef      	bmi.n	8006334 <__smakebuf_r+0x18>
 8006354:	f023 0303 	bic.w	r3, r3, #3
 8006358:	f043 0302 	orr.w	r3, r3, #2
 800635c:	81a3      	strh	r3, [r4, #12]
 800635e:	e7e3      	b.n	8006328 <__smakebuf_r+0xc>
 8006360:	4b0d      	ldr	r3, [pc, #52]	; (8006398 <__smakebuf_r+0x7c>)
 8006362:	62b3      	str	r3, [r6, #40]	; 0x28
 8006364:	89a3      	ldrh	r3, [r4, #12]
 8006366:	6020      	str	r0, [r4, #0]
 8006368:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800636c:	81a3      	strh	r3, [r4, #12]
 800636e:	9b00      	ldr	r3, [sp, #0]
 8006370:	6163      	str	r3, [r4, #20]
 8006372:	9b01      	ldr	r3, [sp, #4]
 8006374:	6120      	str	r0, [r4, #16]
 8006376:	b15b      	cbz	r3, 8006390 <__smakebuf_r+0x74>
 8006378:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800637c:	4630      	mov	r0, r6
 800637e:	f000 fffd 	bl	800737c <_isatty_r>
 8006382:	b128      	cbz	r0, 8006390 <__smakebuf_r+0x74>
 8006384:	89a3      	ldrh	r3, [r4, #12]
 8006386:	f023 0303 	bic.w	r3, r3, #3
 800638a:	f043 0301 	orr.w	r3, r3, #1
 800638e:	81a3      	strh	r3, [r4, #12]
 8006390:	89a0      	ldrh	r0, [r4, #12]
 8006392:	4305      	orrs	r5, r0
 8006394:	81a5      	strh	r5, [r4, #12]
 8006396:	e7cd      	b.n	8006334 <__smakebuf_r+0x18>
 8006398:	08006121 	.word	0x08006121

0800639c <malloc>:
 800639c:	4b02      	ldr	r3, [pc, #8]	; (80063a8 <malloc+0xc>)
 800639e:	4601      	mov	r1, r0
 80063a0:	6818      	ldr	r0, [r3, #0]
 80063a2:	f000 bc09 	b.w	8006bb8 <_malloc_r>
 80063a6:	bf00      	nop
 80063a8:	20000010 	.word	0x20000010

080063ac <_Balloc>:
 80063ac:	b570      	push	{r4, r5, r6, lr}
 80063ae:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80063b0:	4604      	mov	r4, r0
 80063b2:	460d      	mov	r5, r1
 80063b4:	b976      	cbnz	r6, 80063d4 <_Balloc+0x28>
 80063b6:	2010      	movs	r0, #16
 80063b8:	f7ff fff0 	bl	800639c <malloc>
 80063bc:	4602      	mov	r2, r0
 80063be:	6260      	str	r0, [r4, #36]	; 0x24
 80063c0:	b920      	cbnz	r0, 80063cc <_Balloc+0x20>
 80063c2:	4b18      	ldr	r3, [pc, #96]	; (8006424 <_Balloc+0x78>)
 80063c4:	4818      	ldr	r0, [pc, #96]	; (8006428 <_Balloc+0x7c>)
 80063c6:	2166      	movs	r1, #102	; 0x66
 80063c8:	f000 ff86 	bl	80072d8 <__assert_func>
 80063cc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80063d0:	6006      	str	r6, [r0, #0]
 80063d2:	60c6      	str	r6, [r0, #12]
 80063d4:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80063d6:	68f3      	ldr	r3, [r6, #12]
 80063d8:	b183      	cbz	r3, 80063fc <_Balloc+0x50>
 80063da:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80063dc:	68db      	ldr	r3, [r3, #12]
 80063de:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80063e2:	b9b8      	cbnz	r0, 8006414 <_Balloc+0x68>
 80063e4:	2101      	movs	r1, #1
 80063e6:	fa01 f605 	lsl.w	r6, r1, r5
 80063ea:	1d72      	adds	r2, r6, #5
 80063ec:	0092      	lsls	r2, r2, #2
 80063ee:	4620      	mov	r0, r4
 80063f0:	f000 fb60 	bl	8006ab4 <_calloc_r>
 80063f4:	b160      	cbz	r0, 8006410 <_Balloc+0x64>
 80063f6:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80063fa:	e00e      	b.n	800641a <_Balloc+0x6e>
 80063fc:	2221      	movs	r2, #33	; 0x21
 80063fe:	2104      	movs	r1, #4
 8006400:	4620      	mov	r0, r4
 8006402:	f000 fb57 	bl	8006ab4 <_calloc_r>
 8006406:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006408:	60f0      	str	r0, [r6, #12]
 800640a:	68db      	ldr	r3, [r3, #12]
 800640c:	2b00      	cmp	r3, #0
 800640e:	d1e4      	bne.n	80063da <_Balloc+0x2e>
 8006410:	2000      	movs	r0, #0
 8006412:	bd70      	pop	{r4, r5, r6, pc}
 8006414:	6802      	ldr	r2, [r0, #0]
 8006416:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800641a:	2300      	movs	r3, #0
 800641c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8006420:	e7f7      	b.n	8006412 <_Balloc+0x66>
 8006422:	bf00      	nop
 8006424:	080076a5 	.word	0x080076a5
 8006428:	08007788 	.word	0x08007788

0800642c <_Bfree>:
 800642c:	b570      	push	{r4, r5, r6, lr}
 800642e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8006430:	4605      	mov	r5, r0
 8006432:	460c      	mov	r4, r1
 8006434:	b976      	cbnz	r6, 8006454 <_Bfree+0x28>
 8006436:	2010      	movs	r0, #16
 8006438:	f7ff ffb0 	bl	800639c <malloc>
 800643c:	4602      	mov	r2, r0
 800643e:	6268      	str	r0, [r5, #36]	; 0x24
 8006440:	b920      	cbnz	r0, 800644c <_Bfree+0x20>
 8006442:	4b09      	ldr	r3, [pc, #36]	; (8006468 <_Bfree+0x3c>)
 8006444:	4809      	ldr	r0, [pc, #36]	; (800646c <_Bfree+0x40>)
 8006446:	218a      	movs	r1, #138	; 0x8a
 8006448:	f000 ff46 	bl	80072d8 <__assert_func>
 800644c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006450:	6006      	str	r6, [r0, #0]
 8006452:	60c6      	str	r6, [r0, #12]
 8006454:	b13c      	cbz	r4, 8006466 <_Bfree+0x3a>
 8006456:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8006458:	6862      	ldr	r2, [r4, #4]
 800645a:	68db      	ldr	r3, [r3, #12]
 800645c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006460:	6021      	str	r1, [r4, #0]
 8006462:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8006466:	bd70      	pop	{r4, r5, r6, pc}
 8006468:	080076a5 	.word	0x080076a5
 800646c:	08007788 	.word	0x08007788

08006470 <__multadd>:
 8006470:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006474:	690d      	ldr	r5, [r1, #16]
 8006476:	4607      	mov	r7, r0
 8006478:	460c      	mov	r4, r1
 800647a:	461e      	mov	r6, r3
 800647c:	f101 0c14 	add.w	ip, r1, #20
 8006480:	2000      	movs	r0, #0
 8006482:	f8dc 3000 	ldr.w	r3, [ip]
 8006486:	b299      	uxth	r1, r3
 8006488:	fb02 6101 	mla	r1, r2, r1, r6
 800648c:	0c1e      	lsrs	r6, r3, #16
 800648e:	0c0b      	lsrs	r3, r1, #16
 8006490:	fb02 3306 	mla	r3, r2, r6, r3
 8006494:	b289      	uxth	r1, r1
 8006496:	3001      	adds	r0, #1
 8006498:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800649c:	4285      	cmp	r5, r0
 800649e:	f84c 1b04 	str.w	r1, [ip], #4
 80064a2:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80064a6:	dcec      	bgt.n	8006482 <__multadd+0x12>
 80064a8:	b30e      	cbz	r6, 80064ee <__multadd+0x7e>
 80064aa:	68a3      	ldr	r3, [r4, #8]
 80064ac:	42ab      	cmp	r3, r5
 80064ae:	dc19      	bgt.n	80064e4 <__multadd+0x74>
 80064b0:	6861      	ldr	r1, [r4, #4]
 80064b2:	4638      	mov	r0, r7
 80064b4:	3101      	adds	r1, #1
 80064b6:	f7ff ff79 	bl	80063ac <_Balloc>
 80064ba:	4680      	mov	r8, r0
 80064bc:	b928      	cbnz	r0, 80064ca <__multadd+0x5a>
 80064be:	4602      	mov	r2, r0
 80064c0:	4b0c      	ldr	r3, [pc, #48]	; (80064f4 <__multadd+0x84>)
 80064c2:	480d      	ldr	r0, [pc, #52]	; (80064f8 <__multadd+0x88>)
 80064c4:	21b5      	movs	r1, #181	; 0xb5
 80064c6:	f000 ff07 	bl	80072d8 <__assert_func>
 80064ca:	6922      	ldr	r2, [r4, #16]
 80064cc:	3202      	adds	r2, #2
 80064ce:	f104 010c 	add.w	r1, r4, #12
 80064d2:	0092      	lsls	r2, r2, #2
 80064d4:	300c      	adds	r0, #12
 80064d6:	f7fe f8d5 	bl	8004684 <memcpy>
 80064da:	4621      	mov	r1, r4
 80064dc:	4638      	mov	r0, r7
 80064de:	f7ff ffa5 	bl	800642c <_Bfree>
 80064e2:	4644      	mov	r4, r8
 80064e4:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80064e8:	3501      	adds	r5, #1
 80064ea:	615e      	str	r6, [r3, #20]
 80064ec:	6125      	str	r5, [r4, #16]
 80064ee:	4620      	mov	r0, r4
 80064f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80064f4:	08007717 	.word	0x08007717
 80064f8:	08007788 	.word	0x08007788

080064fc <__hi0bits>:
 80064fc:	0c03      	lsrs	r3, r0, #16
 80064fe:	041b      	lsls	r3, r3, #16
 8006500:	b9d3      	cbnz	r3, 8006538 <__hi0bits+0x3c>
 8006502:	0400      	lsls	r0, r0, #16
 8006504:	2310      	movs	r3, #16
 8006506:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800650a:	bf04      	itt	eq
 800650c:	0200      	lsleq	r0, r0, #8
 800650e:	3308      	addeq	r3, #8
 8006510:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8006514:	bf04      	itt	eq
 8006516:	0100      	lsleq	r0, r0, #4
 8006518:	3304      	addeq	r3, #4
 800651a:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800651e:	bf04      	itt	eq
 8006520:	0080      	lsleq	r0, r0, #2
 8006522:	3302      	addeq	r3, #2
 8006524:	2800      	cmp	r0, #0
 8006526:	db05      	blt.n	8006534 <__hi0bits+0x38>
 8006528:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800652c:	f103 0301 	add.w	r3, r3, #1
 8006530:	bf08      	it	eq
 8006532:	2320      	moveq	r3, #32
 8006534:	4618      	mov	r0, r3
 8006536:	4770      	bx	lr
 8006538:	2300      	movs	r3, #0
 800653a:	e7e4      	b.n	8006506 <__hi0bits+0xa>

0800653c <__lo0bits>:
 800653c:	6803      	ldr	r3, [r0, #0]
 800653e:	f013 0207 	ands.w	r2, r3, #7
 8006542:	4601      	mov	r1, r0
 8006544:	d00b      	beq.n	800655e <__lo0bits+0x22>
 8006546:	07da      	lsls	r2, r3, #31
 8006548:	d423      	bmi.n	8006592 <__lo0bits+0x56>
 800654a:	0798      	lsls	r0, r3, #30
 800654c:	bf49      	itett	mi
 800654e:	085b      	lsrmi	r3, r3, #1
 8006550:	089b      	lsrpl	r3, r3, #2
 8006552:	2001      	movmi	r0, #1
 8006554:	600b      	strmi	r3, [r1, #0]
 8006556:	bf5c      	itt	pl
 8006558:	600b      	strpl	r3, [r1, #0]
 800655a:	2002      	movpl	r0, #2
 800655c:	4770      	bx	lr
 800655e:	b298      	uxth	r0, r3
 8006560:	b9a8      	cbnz	r0, 800658e <__lo0bits+0x52>
 8006562:	0c1b      	lsrs	r3, r3, #16
 8006564:	2010      	movs	r0, #16
 8006566:	b2da      	uxtb	r2, r3
 8006568:	b90a      	cbnz	r2, 800656e <__lo0bits+0x32>
 800656a:	3008      	adds	r0, #8
 800656c:	0a1b      	lsrs	r3, r3, #8
 800656e:	071a      	lsls	r2, r3, #28
 8006570:	bf04      	itt	eq
 8006572:	091b      	lsreq	r3, r3, #4
 8006574:	3004      	addeq	r0, #4
 8006576:	079a      	lsls	r2, r3, #30
 8006578:	bf04      	itt	eq
 800657a:	089b      	lsreq	r3, r3, #2
 800657c:	3002      	addeq	r0, #2
 800657e:	07da      	lsls	r2, r3, #31
 8006580:	d403      	bmi.n	800658a <__lo0bits+0x4e>
 8006582:	085b      	lsrs	r3, r3, #1
 8006584:	f100 0001 	add.w	r0, r0, #1
 8006588:	d005      	beq.n	8006596 <__lo0bits+0x5a>
 800658a:	600b      	str	r3, [r1, #0]
 800658c:	4770      	bx	lr
 800658e:	4610      	mov	r0, r2
 8006590:	e7e9      	b.n	8006566 <__lo0bits+0x2a>
 8006592:	2000      	movs	r0, #0
 8006594:	4770      	bx	lr
 8006596:	2020      	movs	r0, #32
 8006598:	4770      	bx	lr
	...

0800659c <__i2b>:
 800659c:	b510      	push	{r4, lr}
 800659e:	460c      	mov	r4, r1
 80065a0:	2101      	movs	r1, #1
 80065a2:	f7ff ff03 	bl	80063ac <_Balloc>
 80065a6:	4602      	mov	r2, r0
 80065a8:	b928      	cbnz	r0, 80065b6 <__i2b+0x1a>
 80065aa:	4b05      	ldr	r3, [pc, #20]	; (80065c0 <__i2b+0x24>)
 80065ac:	4805      	ldr	r0, [pc, #20]	; (80065c4 <__i2b+0x28>)
 80065ae:	f44f 71a0 	mov.w	r1, #320	; 0x140
 80065b2:	f000 fe91 	bl	80072d8 <__assert_func>
 80065b6:	2301      	movs	r3, #1
 80065b8:	6144      	str	r4, [r0, #20]
 80065ba:	6103      	str	r3, [r0, #16]
 80065bc:	bd10      	pop	{r4, pc}
 80065be:	bf00      	nop
 80065c0:	08007717 	.word	0x08007717
 80065c4:	08007788 	.word	0x08007788

080065c8 <__multiply>:
 80065c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80065cc:	4691      	mov	r9, r2
 80065ce:	690a      	ldr	r2, [r1, #16]
 80065d0:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80065d4:	429a      	cmp	r2, r3
 80065d6:	bfb8      	it	lt
 80065d8:	460b      	movlt	r3, r1
 80065da:	460c      	mov	r4, r1
 80065dc:	bfbc      	itt	lt
 80065de:	464c      	movlt	r4, r9
 80065e0:	4699      	movlt	r9, r3
 80065e2:	6927      	ldr	r7, [r4, #16]
 80065e4:	f8d9 a010 	ldr.w	sl, [r9, #16]
 80065e8:	68a3      	ldr	r3, [r4, #8]
 80065ea:	6861      	ldr	r1, [r4, #4]
 80065ec:	eb07 060a 	add.w	r6, r7, sl
 80065f0:	42b3      	cmp	r3, r6
 80065f2:	b085      	sub	sp, #20
 80065f4:	bfb8      	it	lt
 80065f6:	3101      	addlt	r1, #1
 80065f8:	f7ff fed8 	bl	80063ac <_Balloc>
 80065fc:	b930      	cbnz	r0, 800660c <__multiply+0x44>
 80065fe:	4602      	mov	r2, r0
 8006600:	4b44      	ldr	r3, [pc, #272]	; (8006714 <__multiply+0x14c>)
 8006602:	4845      	ldr	r0, [pc, #276]	; (8006718 <__multiply+0x150>)
 8006604:	f240 115d 	movw	r1, #349	; 0x15d
 8006608:	f000 fe66 	bl	80072d8 <__assert_func>
 800660c:	f100 0514 	add.w	r5, r0, #20
 8006610:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8006614:	462b      	mov	r3, r5
 8006616:	2200      	movs	r2, #0
 8006618:	4543      	cmp	r3, r8
 800661a:	d321      	bcc.n	8006660 <__multiply+0x98>
 800661c:	f104 0314 	add.w	r3, r4, #20
 8006620:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8006624:	f109 0314 	add.w	r3, r9, #20
 8006628:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800662c:	9202      	str	r2, [sp, #8]
 800662e:	1b3a      	subs	r2, r7, r4
 8006630:	3a15      	subs	r2, #21
 8006632:	f022 0203 	bic.w	r2, r2, #3
 8006636:	3204      	adds	r2, #4
 8006638:	f104 0115 	add.w	r1, r4, #21
 800663c:	428f      	cmp	r7, r1
 800663e:	bf38      	it	cc
 8006640:	2204      	movcc	r2, #4
 8006642:	9201      	str	r2, [sp, #4]
 8006644:	9a02      	ldr	r2, [sp, #8]
 8006646:	9303      	str	r3, [sp, #12]
 8006648:	429a      	cmp	r2, r3
 800664a:	d80c      	bhi.n	8006666 <__multiply+0x9e>
 800664c:	2e00      	cmp	r6, #0
 800664e:	dd03      	ble.n	8006658 <__multiply+0x90>
 8006650:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8006654:	2b00      	cmp	r3, #0
 8006656:	d05a      	beq.n	800670e <__multiply+0x146>
 8006658:	6106      	str	r6, [r0, #16]
 800665a:	b005      	add	sp, #20
 800665c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006660:	f843 2b04 	str.w	r2, [r3], #4
 8006664:	e7d8      	b.n	8006618 <__multiply+0x50>
 8006666:	f8b3 a000 	ldrh.w	sl, [r3]
 800666a:	f1ba 0f00 	cmp.w	sl, #0
 800666e:	d024      	beq.n	80066ba <__multiply+0xf2>
 8006670:	f104 0e14 	add.w	lr, r4, #20
 8006674:	46a9      	mov	r9, r5
 8006676:	f04f 0c00 	mov.w	ip, #0
 800667a:	f85e 2b04 	ldr.w	r2, [lr], #4
 800667e:	f8d9 1000 	ldr.w	r1, [r9]
 8006682:	fa1f fb82 	uxth.w	fp, r2
 8006686:	b289      	uxth	r1, r1
 8006688:	fb0a 110b 	mla	r1, sl, fp, r1
 800668c:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8006690:	f8d9 2000 	ldr.w	r2, [r9]
 8006694:	4461      	add	r1, ip
 8006696:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800669a:	fb0a c20b 	mla	r2, sl, fp, ip
 800669e:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 80066a2:	b289      	uxth	r1, r1
 80066a4:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80066a8:	4577      	cmp	r7, lr
 80066aa:	f849 1b04 	str.w	r1, [r9], #4
 80066ae:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80066b2:	d8e2      	bhi.n	800667a <__multiply+0xb2>
 80066b4:	9a01      	ldr	r2, [sp, #4]
 80066b6:	f845 c002 	str.w	ip, [r5, r2]
 80066ba:	9a03      	ldr	r2, [sp, #12]
 80066bc:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 80066c0:	3304      	adds	r3, #4
 80066c2:	f1b9 0f00 	cmp.w	r9, #0
 80066c6:	d020      	beq.n	800670a <__multiply+0x142>
 80066c8:	6829      	ldr	r1, [r5, #0]
 80066ca:	f104 0c14 	add.w	ip, r4, #20
 80066ce:	46ae      	mov	lr, r5
 80066d0:	f04f 0a00 	mov.w	sl, #0
 80066d4:	f8bc b000 	ldrh.w	fp, [ip]
 80066d8:	f8be 2002 	ldrh.w	r2, [lr, #2]
 80066dc:	fb09 220b 	mla	r2, r9, fp, r2
 80066e0:	4492      	add	sl, r2
 80066e2:	b289      	uxth	r1, r1
 80066e4:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 80066e8:	f84e 1b04 	str.w	r1, [lr], #4
 80066ec:	f85c 2b04 	ldr.w	r2, [ip], #4
 80066f0:	f8be 1000 	ldrh.w	r1, [lr]
 80066f4:	0c12      	lsrs	r2, r2, #16
 80066f6:	fb09 1102 	mla	r1, r9, r2, r1
 80066fa:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 80066fe:	4567      	cmp	r7, ip
 8006700:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8006704:	d8e6      	bhi.n	80066d4 <__multiply+0x10c>
 8006706:	9a01      	ldr	r2, [sp, #4]
 8006708:	50a9      	str	r1, [r5, r2]
 800670a:	3504      	adds	r5, #4
 800670c:	e79a      	b.n	8006644 <__multiply+0x7c>
 800670e:	3e01      	subs	r6, #1
 8006710:	e79c      	b.n	800664c <__multiply+0x84>
 8006712:	bf00      	nop
 8006714:	08007717 	.word	0x08007717
 8006718:	08007788 	.word	0x08007788

0800671c <__pow5mult>:
 800671c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006720:	4615      	mov	r5, r2
 8006722:	f012 0203 	ands.w	r2, r2, #3
 8006726:	4606      	mov	r6, r0
 8006728:	460f      	mov	r7, r1
 800672a:	d007      	beq.n	800673c <__pow5mult+0x20>
 800672c:	4c25      	ldr	r4, [pc, #148]	; (80067c4 <__pow5mult+0xa8>)
 800672e:	3a01      	subs	r2, #1
 8006730:	2300      	movs	r3, #0
 8006732:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8006736:	f7ff fe9b 	bl	8006470 <__multadd>
 800673a:	4607      	mov	r7, r0
 800673c:	10ad      	asrs	r5, r5, #2
 800673e:	d03d      	beq.n	80067bc <__pow5mult+0xa0>
 8006740:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8006742:	b97c      	cbnz	r4, 8006764 <__pow5mult+0x48>
 8006744:	2010      	movs	r0, #16
 8006746:	f7ff fe29 	bl	800639c <malloc>
 800674a:	4602      	mov	r2, r0
 800674c:	6270      	str	r0, [r6, #36]	; 0x24
 800674e:	b928      	cbnz	r0, 800675c <__pow5mult+0x40>
 8006750:	4b1d      	ldr	r3, [pc, #116]	; (80067c8 <__pow5mult+0xac>)
 8006752:	481e      	ldr	r0, [pc, #120]	; (80067cc <__pow5mult+0xb0>)
 8006754:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8006758:	f000 fdbe 	bl	80072d8 <__assert_func>
 800675c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8006760:	6004      	str	r4, [r0, #0]
 8006762:	60c4      	str	r4, [r0, #12]
 8006764:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8006768:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800676c:	b94c      	cbnz	r4, 8006782 <__pow5mult+0x66>
 800676e:	f240 2171 	movw	r1, #625	; 0x271
 8006772:	4630      	mov	r0, r6
 8006774:	f7ff ff12 	bl	800659c <__i2b>
 8006778:	2300      	movs	r3, #0
 800677a:	f8c8 0008 	str.w	r0, [r8, #8]
 800677e:	4604      	mov	r4, r0
 8006780:	6003      	str	r3, [r0, #0]
 8006782:	f04f 0900 	mov.w	r9, #0
 8006786:	07eb      	lsls	r3, r5, #31
 8006788:	d50a      	bpl.n	80067a0 <__pow5mult+0x84>
 800678a:	4639      	mov	r1, r7
 800678c:	4622      	mov	r2, r4
 800678e:	4630      	mov	r0, r6
 8006790:	f7ff ff1a 	bl	80065c8 <__multiply>
 8006794:	4639      	mov	r1, r7
 8006796:	4680      	mov	r8, r0
 8006798:	4630      	mov	r0, r6
 800679a:	f7ff fe47 	bl	800642c <_Bfree>
 800679e:	4647      	mov	r7, r8
 80067a0:	106d      	asrs	r5, r5, #1
 80067a2:	d00b      	beq.n	80067bc <__pow5mult+0xa0>
 80067a4:	6820      	ldr	r0, [r4, #0]
 80067a6:	b938      	cbnz	r0, 80067b8 <__pow5mult+0x9c>
 80067a8:	4622      	mov	r2, r4
 80067aa:	4621      	mov	r1, r4
 80067ac:	4630      	mov	r0, r6
 80067ae:	f7ff ff0b 	bl	80065c8 <__multiply>
 80067b2:	6020      	str	r0, [r4, #0]
 80067b4:	f8c0 9000 	str.w	r9, [r0]
 80067b8:	4604      	mov	r4, r0
 80067ba:	e7e4      	b.n	8006786 <__pow5mult+0x6a>
 80067bc:	4638      	mov	r0, r7
 80067be:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80067c2:	bf00      	nop
 80067c4:	080078d8 	.word	0x080078d8
 80067c8:	080076a5 	.word	0x080076a5
 80067cc:	08007788 	.word	0x08007788

080067d0 <__lshift>:
 80067d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80067d4:	460c      	mov	r4, r1
 80067d6:	6849      	ldr	r1, [r1, #4]
 80067d8:	6923      	ldr	r3, [r4, #16]
 80067da:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80067de:	68a3      	ldr	r3, [r4, #8]
 80067e0:	4607      	mov	r7, r0
 80067e2:	4691      	mov	r9, r2
 80067e4:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80067e8:	f108 0601 	add.w	r6, r8, #1
 80067ec:	42b3      	cmp	r3, r6
 80067ee:	db0b      	blt.n	8006808 <__lshift+0x38>
 80067f0:	4638      	mov	r0, r7
 80067f2:	f7ff fddb 	bl	80063ac <_Balloc>
 80067f6:	4605      	mov	r5, r0
 80067f8:	b948      	cbnz	r0, 800680e <__lshift+0x3e>
 80067fa:	4602      	mov	r2, r0
 80067fc:	4b2a      	ldr	r3, [pc, #168]	; (80068a8 <__lshift+0xd8>)
 80067fe:	482b      	ldr	r0, [pc, #172]	; (80068ac <__lshift+0xdc>)
 8006800:	f240 11d9 	movw	r1, #473	; 0x1d9
 8006804:	f000 fd68 	bl	80072d8 <__assert_func>
 8006808:	3101      	adds	r1, #1
 800680a:	005b      	lsls	r3, r3, #1
 800680c:	e7ee      	b.n	80067ec <__lshift+0x1c>
 800680e:	2300      	movs	r3, #0
 8006810:	f100 0114 	add.w	r1, r0, #20
 8006814:	f100 0210 	add.w	r2, r0, #16
 8006818:	4618      	mov	r0, r3
 800681a:	4553      	cmp	r3, sl
 800681c:	db37      	blt.n	800688e <__lshift+0xbe>
 800681e:	6920      	ldr	r0, [r4, #16]
 8006820:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8006824:	f104 0314 	add.w	r3, r4, #20
 8006828:	f019 091f 	ands.w	r9, r9, #31
 800682c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8006830:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8006834:	d02f      	beq.n	8006896 <__lshift+0xc6>
 8006836:	f1c9 0e20 	rsb	lr, r9, #32
 800683a:	468a      	mov	sl, r1
 800683c:	f04f 0c00 	mov.w	ip, #0
 8006840:	681a      	ldr	r2, [r3, #0]
 8006842:	fa02 f209 	lsl.w	r2, r2, r9
 8006846:	ea42 020c 	orr.w	r2, r2, ip
 800684a:	f84a 2b04 	str.w	r2, [sl], #4
 800684e:	f853 2b04 	ldr.w	r2, [r3], #4
 8006852:	4298      	cmp	r0, r3
 8006854:	fa22 fc0e 	lsr.w	ip, r2, lr
 8006858:	d8f2      	bhi.n	8006840 <__lshift+0x70>
 800685a:	1b03      	subs	r3, r0, r4
 800685c:	3b15      	subs	r3, #21
 800685e:	f023 0303 	bic.w	r3, r3, #3
 8006862:	3304      	adds	r3, #4
 8006864:	f104 0215 	add.w	r2, r4, #21
 8006868:	4290      	cmp	r0, r2
 800686a:	bf38      	it	cc
 800686c:	2304      	movcc	r3, #4
 800686e:	f841 c003 	str.w	ip, [r1, r3]
 8006872:	f1bc 0f00 	cmp.w	ip, #0
 8006876:	d001      	beq.n	800687c <__lshift+0xac>
 8006878:	f108 0602 	add.w	r6, r8, #2
 800687c:	3e01      	subs	r6, #1
 800687e:	4638      	mov	r0, r7
 8006880:	612e      	str	r6, [r5, #16]
 8006882:	4621      	mov	r1, r4
 8006884:	f7ff fdd2 	bl	800642c <_Bfree>
 8006888:	4628      	mov	r0, r5
 800688a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800688e:	f842 0f04 	str.w	r0, [r2, #4]!
 8006892:	3301      	adds	r3, #1
 8006894:	e7c1      	b.n	800681a <__lshift+0x4a>
 8006896:	3904      	subs	r1, #4
 8006898:	f853 2b04 	ldr.w	r2, [r3], #4
 800689c:	f841 2f04 	str.w	r2, [r1, #4]!
 80068a0:	4298      	cmp	r0, r3
 80068a2:	d8f9      	bhi.n	8006898 <__lshift+0xc8>
 80068a4:	e7ea      	b.n	800687c <__lshift+0xac>
 80068a6:	bf00      	nop
 80068a8:	08007717 	.word	0x08007717
 80068ac:	08007788 	.word	0x08007788

080068b0 <__mcmp>:
 80068b0:	b530      	push	{r4, r5, lr}
 80068b2:	6902      	ldr	r2, [r0, #16]
 80068b4:	690c      	ldr	r4, [r1, #16]
 80068b6:	1b12      	subs	r2, r2, r4
 80068b8:	d10e      	bne.n	80068d8 <__mcmp+0x28>
 80068ba:	f100 0314 	add.w	r3, r0, #20
 80068be:	3114      	adds	r1, #20
 80068c0:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 80068c4:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 80068c8:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 80068cc:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 80068d0:	42a5      	cmp	r5, r4
 80068d2:	d003      	beq.n	80068dc <__mcmp+0x2c>
 80068d4:	d305      	bcc.n	80068e2 <__mcmp+0x32>
 80068d6:	2201      	movs	r2, #1
 80068d8:	4610      	mov	r0, r2
 80068da:	bd30      	pop	{r4, r5, pc}
 80068dc:	4283      	cmp	r3, r0
 80068de:	d3f3      	bcc.n	80068c8 <__mcmp+0x18>
 80068e0:	e7fa      	b.n	80068d8 <__mcmp+0x28>
 80068e2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80068e6:	e7f7      	b.n	80068d8 <__mcmp+0x28>

080068e8 <__mdiff>:
 80068e8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80068ec:	460c      	mov	r4, r1
 80068ee:	4606      	mov	r6, r0
 80068f0:	4611      	mov	r1, r2
 80068f2:	4620      	mov	r0, r4
 80068f4:	4690      	mov	r8, r2
 80068f6:	f7ff ffdb 	bl	80068b0 <__mcmp>
 80068fa:	1e05      	subs	r5, r0, #0
 80068fc:	d110      	bne.n	8006920 <__mdiff+0x38>
 80068fe:	4629      	mov	r1, r5
 8006900:	4630      	mov	r0, r6
 8006902:	f7ff fd53 	bl	80063ac <_Balloc>
 8006906:	b930      	cbnz	r0, 8006916 <__mdiff+0x2e>
 8006908:	4b3a      	ldr	r3, [pc, #232]	; (80069f4 <__mdiff+0x10c>)
 800690a:	4602      	mov	r2, r0
 800690c:	f240 2132 	movw	r1, #562	; 0x232
 8006910:	4839      	ldr	r0, [pc, #228]	; (80069f8 <__mdiff+0x110>)
 8006912:	f000 fce1 	bl	80072d8 <__assert_func>
 8006916:	2301      	movs	r3, #1
 8006918:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800691c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006920:	bfa4      	itt	ge
 8006922:	4643      	movge	r3, r8
 8006924:	46a0      	movge	r8, r4
 8006926:	4630      	mov	r0, r6
 8006928:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800692c:	bfa6      	itte	ge
 800692e:	461c      	movge	r4, r3
 8006930:	2500      	movge	r5, #0
 8006932:	2501      	movlt	r5, #1
 8006934:	f7ff fd3a 	bl	80063ac <_Balloc>
 8006938:	b920      	cbnz	r0, 8006944 <__mdiff+0x5c>
 800693a:	4b2e      	ldr	r3, [pc, #184]	; (80069f4 <__mdiff+0x10c>)
 800693c:	4602      	mov	r2, r0
 800693e:	f44f 7110 	mov.w	r1, #576	; 0x240
 8006942:	e7e5      	b.n	8006910 <__mdiff+0x28>
 8006944:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8006948:	6926      	ldr	r6, [r4, #16]
 800694a:	60c5      	str	r5, [r0, #12]
 800694c:	f104 0914 	add.w	r9, r4, #20
 8006950:	f108 0514 	add.w	r5, r8, #20
 8006954:	f100 0e14 	add.w	lr, r0, #20
 8006958:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800695c:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8006960:	f108 0210 	add.w	r2, r8, #16
 8006964:	46f2      	mov	sl, lr
 8006966:	2100      	movs	r1, #0
 8006968:	f859 3b04 	ldr.w	r3, [r9], #4
 800696c:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8006970:	fa1f f883 	uxth.w	r8, r3
 8006974:	fa11 f18b 	uxtah	r1, r1, fp
 8006978:	0c1b      	lsrs	r3, r3, #16
 800697a:	eba1 0808 	sub.w	r8, r1, r8
 800697e:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8006982:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8006986:	fa1f f888 	uxth.w	r8, r8
 800698a:	1419      	asrs	r1, r3, #16
 800698c:	454e      	cmp	r6, r9
 800698e:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8006992:	f84a 3b04 	str.w	r3, [sl], #4
 8006996:	d8e7      	bhi.n	8006968 <__mdiff+0x80>
 8006998:	1b33      	subs	r3, r6, r4
 800699a:	3b15      	subs	r3, #21
 800699c:	f023 0303 	bic.w	r3, r3, #3
 80069a0:	3304      	adds	r3, #4
 80069a2:	3415      	adds	r4, #21
 80069a4:	42a6      	cmp	r6, r4
 80069a6:	bf38      	it	cc
 80069a8:	2304      	movcc	r3, #4
 80069aa:	441d      	add	r5, r3
 80069ac:	4473      	add	r3, lr
 80069ae:	469e      	mov	lr, r3
 80069b0:	462e      	mov	r6, r5
 80069b2:	4566      	cmp	r6, ip
 80069b4:	d30e      	bcc.n	80069d4 <__mdiff+0xec>
 80069b6:	f10c 0203 	add.w	r2, ip, #3
 80069ba:	1b52      	subs	r2, r2, r5
 80069bc:	f022 0203 	bic.w	r2, r2, #3
 80069c0:	3d03      	subs	r5, #3
 80069c2:	45ac      	cmp	ip, r5
 80069c4:	bf38      	it	cc
 80069c6:	2200      	movcc	r2, #0
 80069c8:	441a      	add	r2, r3
 80069ca:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 80069ce:	b17b      	cbz	r3, 80069f0 <__mdiff+0x108>
 80069d0:	6107      	str	r7, [r0, #16]
 80069d2:	e7a3      	b.n	800691c <__mdiff+0x34>
 80069d4:	f856 8b04 	ldr.w	r8, [r6], #4
 80069d8:	fa11 f288 	uxtah	r2, r1, r8
 80069dc:	1414      	asrs	r4, r2, #16
 80069de:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 80069e2:	b292      	uxth	r2, r2
 80069e4:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 80069e8:	f84e 2b04 	str.w	r2, [lr], #4
 80069ec:	1421      	asrs	r1, r4, #16
 80069ee:	e7e0      	b.n	80069b2 <__mdiff+0xca>
 80069f0:	3f01      	subs	r7, #1
 80069f2:	e7ea      	b.n	80069ca <__mdiff+0xe2>
 80069f4:	08007717 	.word	0x08007717
 80069f8:	08007788 	.word	0x08007788

080069fc <__d2b>:
 80069fc:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8006a00:	4689      	mov	r9, r1
 8006a02:	2101      	movs	r1, #1
 8006a04:	ec57 6b10 	vmov	r6, r7, d0
 8006a08:	4690      	mov	r8, r2
 8006a0a:	f7ff fccf 	bl	80063ac <_Balloc>
 8006a0e:	4604      	mov	r4, r0
 8006a10:	b930      	cbnz	r0, 8006a20 <__d2b+0x24>
 8006a12:	4602      	mov	r2, r0
 8006a14:	4b25      	ldr	r3, [pc, #148]	; (8006aac <__d2b+0xb0>)
 8006a16:	4826      	ldr	r0, [pc, #152]	; (8006ab0 <__d2b+0xb4>)
 8006a18:	f240 310a 	movw	r1, #778	; 0x30a
 8006a1c:	f000 fc5c 	bl	80072d8 <__assert_func>
 8006a20:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8006a24:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8006a28:	bb35      	cbnz	r5, 8006a78 <__d2b+0x7c>
 8006a2a:	2e00      	cmp	r6, #0
 8006a2c:	9301      	str	r3, [sp, #4]
 8006a2e:	d028      	beq.n	8006a82 <__d2b+0x86>
 8006a30:	4668      	mov	r0, sp
 8006a32:	9600      	str	r6, [sp, #0]
 8006a34:	f7ff fd82 	bl	800653c <__lo0bits>
 8006a38:	9900      	ldr	r1, [sp, #0]
 8006a3a:	b300      	cbz	r0, 8006a7e <__d2b+0x82>
 8006a3c:	9a01      	ldr	r2, [sp, #4]
 8006a3e:	f1c0 0320 	rsb	r3, r0, #32
 8006a42:	fa02 f303 	lsl.w	r3, r2, r3
 8006a46:	430b      	orrs	r3, r1
 8006a48:	40c2      	lsrs	r2, r0
 8006a4a:	6163      	str	r3, [r4, #20]
 8006a4c:	9201      	str	r2, [sp, #4]
 8006a4e:	9b01      	ldr	r3, [sp, #4]
 8006a50:	61a3      	str	r3, [r4, #24]
 8006a52:	2b00      	cmp	r3, #0
 8006a54:	bf14      	ite	ne
 8006a56:	2202      	movne	r2, #2
 8006a58:	2201      	moveq	r2, #1
 8006a5a:	6122      	str	r2, [r4, #16]
 8006a5c:	b1d5      	cbz	r5, 8006a94 <__d2b+0x98>
 8006a5e:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8006a62:	4405      	add	r5, r0
 8006a64:	f8c9 5000 	str.w	r5, [r9]
 8006a68:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8006a6c:	f8c8 0000 	str.w	r0, [r8]
 8006a70:	4620      	mov	r0, r4
 8006a72:	b003      	add	sp, #12
 8006a74:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006a78:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006a7c:	e7d5      	b.n	8006a2a <__d2b+0x2e>
 8006a7e:	6161      	str	r1, [r4, #20]
 8006a80:	e7e5      	b.n	8006a4e <__d2b+0x52>
 8006a82:	a801      	add	r0, sp, #4
 8006a84:	f7ff fd5a 	bl	800653c <__lo0bits>
 8006a88:	9b01      	ldr	r3, [sp, #4]
 8006a8a:	6163      	str	r3, [r4, #20]
 8006a8c:	2201      	movs	r2, #1
 8006a8e:	6122      	str	r2, [r4, #16]
 8006a90:	3020      	adds	r0, #32
 8006a92:	e7e3      	b.n	8006a5c <__d2b+0x60>
 8006a94:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8006a98:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8006a9c:	f8c9 0000 	str.w	r0, [r9]
 8006aa0:	6918      	ldr	r0, [r3, #16]
 8006aa2:	f7ff fd2b 	bl	80064fc <__hi0bits>
 8006aa6:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8006aaa:	e7df      	b.n	8006a6c <__d2b+0x70>
 8006aac:	08007717 	.word	0x08007717
 8006ab0:	08007788 	.word	0x08007788

08006ab4 <_calloc_r>:
 8006ab4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006ab6:	fba1 2402 	umull	r2, r4, r1, r2
 8006aba:	b94c      	cbnz	r4, 8006ad0 <_calloc_r+0x1c>
 8006abc:	4611      	mov	r1, r2
 8006abe:	9201      	str	r2, [sp, #4]
 8006ac0:	f000 f87a 	bl	8006bb8 <_malloc_r>
 8006ac4:	9a01      	ldr	r2, [sp, #4]
 8006ac6:	4605      	mov	r5, r0
 8006ac8:	b930      	cbnz	r0, 8006ad8 <_calloc_r+0x24>
 8006aca:	4628      	mov	r0, r5
 8006acc:	b003      	add	sp, #12
 8006ace:	bd30      	pop	{r4, r5, pc}
 8006ad0:	220c      	movs	r2, #12
 8006ad2:	6002      	str	r2, [r0, #0]
 8006ad4:	2500      	movs	r5, #0
 8006ad6:	e7f8      	b.n	8006aca <_calloc_r+0x16>
 8006ad8:	4621      	mov	r1, r4
 8006ada:	f7fd fde1 	bl	80046a0 <memset>
 8006ade:	e7f4      	b.n	8006aca <_calloc_r+0x16>

08006ae0 <_free_r>:
 8006ae0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006ae2:	2900      	cmp	r1, #0
 8006ae4:	d044      	beq.n	8006b70 <_free_r+0x90>
 8006ae6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006aea:	9001      	str	r0, [sp, #4]
 8006aec:	2b00      	cmp	r3, #0
 8006aee:	f1a1 0404 	sub.w	r4, r1, #4
 8006af2:	bfb8      	it	lt
 8006af4:	18e4      	addlt	r4, r4, r3
 8006af6:	f000 fc8f 	bl	8007418 <__malloc_lock>
 8006afa:	4a1e      	ldr	r2, [pc, #120]	; (8006b74 <_free_r+0x94>)
 8006afc:	9801      	ldr	r0, [sp, #4]
 8006afe:	6813      	ldr	r3, [r2, #0]
 8006b00:	b933      	cbnz	r3, 8006b10 <_free_r+0x30>
 8006b02:	6063      	str	r3, [r4, #4]
 8006b04:	6014      	str	r4, [r2, #0]
 8006b06:	b003      	add	sp, #12
 8006b08:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006b0c:	f000 bc8a 	b.w	8007424 <__malloc_unlock>
 8006b10:	42a3      	cmp	r3, r4
 8006b12:	d908      	bls.n	8006b26 <_free_r+0x46>
 8006b14:	6825      	ldr	r5, [r4, #0]
 8006b16:	1961      	adds	r1, r4, r5
 8006b18:	428b      	cmp	r3, r1
 8006b1a:	bf01      	itttt	eq
 8006b1c:	6819      	ldreq	r1, [r3, #0]
 8006b1e:	685b      	ldreq	r3, [r3, #4]
 8006b20:	1949      	addeq	r1, r1, r5
 8006b22:	6021      	streq	r1, [r4, #0]
 8006b24:	e7ed      	b.n	8006b02 <_free_r+0x22>
 8006b26:	461a      	mov	r2, r3
 8006b28:	685b      	ldr	r3, [r3, #4]
 8006b2a:	b10b      	cbz	r3, 8006b30 <_free_r+0x50>
 8006b2c:	42a3      	cmp	r3, r4
 8006b2e:	d9fa      	bls.n	8006b26 <_free_r+0x46>
 8006b30:	6811      	ldr	r1, [r2, #0]
 8006b32:	1855      	adds	r5, r2, r1
 8006b34:	42a5      	cmp	r5, r4
 8006b36:	d10b      	bne.n	8006b50 <_free_r+0x70>
 8006b38:	6824      	ldr	r4, [r4, #0]
 8006b3a:	4421      	add	r1, r4
 8006b3c:	1854      	adds	r4, r2, r1
 8006b3e:	42a3      	cmp	r3, r4
 8006b40:	6011      	str	r1, [r2, #0]
 8006b42:	d1e0      	bne.n	8006b06 <_free_r+0x26>
 8006b44:	681c      	ldr	r4, [r3, #0]
 8006b46:	685b      	ldr	r3, [r3, #4]
 8006b48:	6053      	str	r3, [r2, #4]
 8006b4a:	4421      	add	r1, r4
 8006b4c:	6011      	str	r1, [r2, #0]
 8006b4e:	e7da      	b.n	8006b06 <_free_r+0x26>
 8006b50:	d902      	bls.n	8006b58 <_free_r+0x78>
 8006b52:	230c      	movs	r3, #12
 8006b54:	6003      	str	r3, [r0, #0]
 8006b56:	e7d6      	b.n	8006b06 <_free_r+0x26>
 8006b58:	6825      	ldr	r5, [r4, #0]
 8006b5a:	1961      	adds	r1, r4, r5
 8006b5c:	428b      	cmp	r3, r1
 8006b5e:	bf04      	itt	eq
 8006b60:	6819      	ldreq	r1, [r3, #0]
 8006b62:	685b      	ldreq	r3, [r3, #4]
 8006b64:	6063      	str	r3, [r4, #4]
 8006b66:	bf04      	itt	eq
 8006b68:	1949      	addeq	r1, r1, r5
 8006b6a:	6021      	streq	r1, [r4, #0]
 8006b6c:	6054      	str	r4, [r2, #4]
 8006b6e:	e7ca      	b.n	8006b06 <_free_r+0x26>
 8006b70:	b003      	add	sp, #12
 8006b72:	bd30      	pop	{r4, r5, pc}
 8006b74:	20000400 	.word	0x20000400

08006b78 <sbrk_aligned>:
 8006b78:	b570      	push	{r4, r5, r6, lr}
 8006b7a:	4e0e      	ldr	r6, [pc, #56]	; (8006bb4 <sbrk_aligned+0x3c>)
 8006b7c:	460c      	mov	r4, r1
 8006b7e:	6831      	ldr	r1, [r6, #0]
 8006b80:	4605      	mov	r5, r0
 8006b82:	b911      	cbnz	r1, 8006b8a <sbrk_aligned+0x12>
 8006b84:	f000 fb42 	bl	800720c <_sbrk_r>
 8006b88:	6030      	str	r0, [r6, #0]
 8006b8a:	4621      	mov	r1, r4
 8006b8c:	4628      	mov	r0, r5
 8006b8e:	f000 fb3d 	bl	800720c <_sbrk_r>
 8006b92:	1c43      	adds	r3, r0, #1
 8006b94:	d00a      	beq.n	8006bac <sbrk_aligned+0x34>
 8006b96:	1cc4      	adds	r4, r0, #3
 8006b98:	f024 0403 	bic.w	r4, r4, #3
 8006b9c:	42a0      	cmp	r0, r4
 8006b9e:	d007      	beq.n	8006bb0 <sbrk_aligned+0x38>
 8006ba0:	1a21      	subs	r1, r4, r0
 8006ba2:	4628      	mov	r0, r5
 8006ba4:	f000 fb32 	bl	800720c <_sbrk_r>
 8006ba8:	3001      	adds	r0, #1
 8006baa:	d101      	bne.n	8006bb0 <sbrk_aligned+0x38>
 8006bac:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8006bb0:	4620      	mov	r0, r4
 8006bb2:	bd70      	pop	{r4, r5, r6, pc}
 8006bb4:	20000404 	.word	0x20000404

08006bb8 <_malloc_r>:
 8006bb8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006bbc:	1ccd      	adds	r5, r1, #3
 8006bbe:	f025 0503 	bic.w	r5, r5, #3
 8006bc2:	3508      	adds	r5, #8
 8006bc4:	2d0c      	cmp	r5, #12
 8006bc6:	bf38      	it	cc
 8006bc8:	250c      	movcc	r5, #12
 8006bca:	2d00      	cmp	r5, #0
 8006bcc:	4607      	mov	r7, r0
 8006bce:	db01      	blt.n	8006bd4 <_malloc_r+0x1c>
 8006bd0:	42a9      	cmp	r1, r5
 8006bd2:	d905      	bls.n	8006be0 <_malloc_r+0x28>
 8006bd4:	230c      	movs	r3, #12
 8006bd6:	603b      	str	r3, [r7, #0]
 8006bd8:	2600      	movs	r6, #0
 8006bda:	4630      	mov	r0, r6
 8006bdc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006be0:	4e2e      	ldr	r6, [pc, #184]	; (8006c9c <_malloc_r+0xe4>)
 8006be2:	f000 fc19 	bl	8007418 <__malloc_lock>
 8006be6:	6833      	ldr	r3, [r6, #0]
 8006be8:	461c      	mov	r4, r3
 8006bea:	bb34      	cbnz	r4, 8006c3a <_malloc_r+0x82>
 8006bec:	4629      	mov	r1, r5
 8006bee:	4638      	mov	r0, r7
 8006bf0:	f7ff ffc2 	bl	8006b78 <sbrk_aligned>
 8006bf4:	1c43      	adds	r3, r0, #1
 8006bf6:	4604      	mov	r4, r0
 8006bf8:	d14d      	bne.n	8006c96 <_malloc_r+0xde>
 8006bfa:	6834      	ldr	r4, [r6, #0]
 8006bfc:	4626      	mov	r6, r4
 8006bfe:	2e00      	cmp	r6, #0
 8006c00:	d140      	bne.n	8006c84 <_malloc_r+0xcc>
 8006c02:	6823      	ldr	r3, [r4, #0]
 8006c04:	4631      	mov	r1, r6
 8006c06:	4638      	mov	r0, r7
 8006c08:	eb04 0803 	add.w	r8, r4, r3
 8006c0c:	f000 fafe 	bl	800720c <_sbrk_r>
 8006c10:	4580      	cmp	r8, r0
 8006c12:	d13a      	bne.n	8006c8a <_malloc_r+0xd2>
 8006c14:	6821      	ldr	r1, [r4, #0]
 8006c16:	3503      	adds	r5, #3
 8006c18:	1a6d      	subs	r5, r5, r1
 8006c1a:	f025 0503 	bic.w	r5, r5, #3
 8006c1e:	3508      	adds	r5, #8
 8006c20:	2d0c      	cmp	r5, #12
 8006c22:	bf38      	it	cc
 8006c24:	250c      	movcc	r5, #12
 8006c26:	4629      	mov	r1, r5
 8006c28:	4638      	mov	r0, r7
 8006c2a:	f7ff ffa5 	bl	8006b78 <sbrk_aligned>
 8006c2e:	3001      	adds	r0, #1
 8006c30:	d02b      	beq.n	8006c8a <_malloc_r+0xd2>
 8006c32:	6823      	ldr	r3, [r4, #0]
 8006c34:	442b      	add	r3, r5
 8006c36:	6023      	str	r3, [r4, #0]
 8006c38:	e00e      	b.n	8006c58 <_malloc_r+0xa0>
 8006c3a:	6822      	ldr	r2, [r4, #0]
 8006c3c:	1b52      	subs	r2, r2, r5
 8006c3e:	d41e      	bmi.n	8006c7e <_malloc_r+0xc6>
 8006c40:	2a0b      	cmp	r2, #11
 8006c42:	d916      	bls.n	8006c72 <_malloc_r+0xba>
 8006c44:	1961      	adds	r1, r4, r5
 8006c46:	42a3      	cmp	r3, r4
 8006c48:	6025      	str	r5, [r4, #0]
 8006c4a:	bf18      	it	ne
 8006c4c:	6059      	strne	r1, [r3, #4]
 8006c4e:	6863      	ldr	r3, [r4, #4]
 8006c50:	bf08      	it	eq
 8006c52:	6031      	streq	r1, [r6, #0]
 8006c54:	5162      	str	r2, [r4, r5]
 8006c56:	604b      	str	r3, [r1, #4]
 8006c58:	4638      	mov	r0, r7
 8006c5a:	f104 060b 	add.w	r6, r4, #11
 8006c5e:	f000 fbe1 	bl	8007424 <__malloc_unlock>
 8006c62:	f026 0607 	bic.w	r6, r6, #7
 8006c66:	1d23      	adds	r3, r4, #4
 8006c68:	1af2      	subs	r2, r6, r3
 8006c6a:	d0b6      	beq.n	8006bda <_malloc_r+0x22>
 8006c6c:	1b9b      	subs	r3, r3, r6
 8006c6e:	50a3      	str	r3, [r4, r2]
 8006c70:	e7b3      	b.n	8006bda <_malloc_r+0x22>
 8006c72:	6862      	ldr	r2, [r4, #4]
 8006c74:	42a3      	cmp	r3, r4
 8006c76:	bf0c      	ite	eq
 8006c78:	6032      	streq	r2, [r6, #0]
 8006c7a:	605a      	strne	r2, [r3, #4]
 8006c7c:	e7ec      	b.n	8006c58 <_malloc_r+0xa0>
 8006c7e:	4623      	mov	r3, r4
 8006c80:	6864      	ldr	r4, [r4, #4]
 8006c82:	e7b2      	b.n	8006bea <_malloc_r+0x32>
 8006c84:	4634      	mov	r4, r6
 8006c86:	6876      	ldr	r6, [r6, #4]
 8006c88:	e7b9      	b.n	8006bfe <_malloc_r+0x46>
 8006c8a:	230c      	movs	r3, #12
 8006c8c:	603b      	str	r3, [r7, #0]
 8006c8e:	4638      	mov	r0, r7
 8006c90:	f000 fbc8 	bl	8007424 <__malloc_unlock>
 8006c94:	e7a1      	b.n	8006bda <_malloc_r+0x22>
 8006c96:	6025      	str	r5, [r4, #0]
 8006c98:	e7de      	b.n	8006c58 <_malloc_r+0xa0>
 8006c9a:	bf00      	nop
 8006c9c:	20000400 	.word	0x20000400

08006ca0 <__ssputs_r>:
 8006ca0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006ca4:	688e      	ldr	r6, [r1, #8]
 8006ca6:	429e      	cmp	r6, r3
 8006ca8:	4682      	mov	sl, r0
 8006caa:	460c      	mov	r4, r1
 8006cac:	4690      	mov	r8, r2
 8006cae:	461f      	mov	r7, r3
 8006cb0:	d838      	bhi.n	8006d24 <__ssputs_r+0x84>
 8006cb2:	898a      	ldrh	r2, [r1, #12]
 8006cb4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8006cb8:	d032      	beq.n	8006d20 <__ssputs_r+0x80>
 8006cba:	6825      	ldr	r5, [r4, #0]
 8006cbc:	6909      	ldr	r1, [r1, #16]
 8006cbe:	eba5 0901 	sub.w	r9, r5, r1
 8006cc2:	6965      	ldr	r5, [r4, #20]
 8006cc4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006cc8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8006ccc:	3301      	adds	r3, #1
 8006cce:	444b      	add	r3, r9
 8006cd0:	106d      	asrs	r5, r5, #1
 8006cd2:	429d      	cmp	r5, r3
 8006cd4:	bf38      	it	cc
 8006cd6:	461d      	movcc	r5, r3
 8006cd8:	0553      	lsls	r3, r2, #21
 8006cda:	d531      	bpl.n	8006d40 <__ssputs_r+0xa0>
 8006cdc:	4629      	mov	r1, r5
 8006cde:	f7ff ff6b 	bl	8006bb8 <_malloc_r>
 8006ce2:	4606      	mov	r6, r0
 8006ce4:	b950      	cbnz	r0, 8006cfc <__ssputs_r+0x5c>
 8006ce6:	230c      	movs	r3, #12
 8006ce8:	f8ca 3000 	str.w	r3, [sl]
 8006cec:	89a3      	ldrh	r3, [r4, #12]
 8006cee:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006cf2:	81a3      	strh	r3, [r4, #12]
 8006cf4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006cf8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006cfc:	6921      	ldr	r1, [r4, #16]
 8006cfe:	464a      	mov	r2, r9
 8006d00:	f7fd fcc0 	bl	8004684 <memcpy>
 8006d04:	89a3      	ldrh	r3, [r4, #12]
 8006d06:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8006d0a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006d0e:	81a3      	strh	r3, [r4, #12]
 8006d10:	6126      	str	r6, [r4, #16]
 8006d12:	6165      	str	r5, [r4, #20]
 8006d14:	444e      	add	r6, r9
 8006d16:	eba5 0509 	sub.w	r5, r5, r9
 8006d1a:	6026      	str	r6, [r4, #0]
 8006d1c:	60a5      	str	r5, [r4, #8]
 8006d1e:	463e      	mov	r6, r7
 8006d20:	42be      	cmp	r6, r7
 8006d22:	d900      	bls.n	8006d26 <__ssputs_r+0x86>
 8006d24:	463e      	mov	r6, r7
 8006d26:	6820      	ldr	r0, [r4, #0]
 8006d28:	4632      	mov	r2, r6
 8006d2a:	4641      	mov	r1, r8
 8006d2c:	f000 fb5a 	bl	80073e4 <memmove>
 8006d30:	68a3      	ldr	r3, [r4, #8]
 8006d32:	1b9b      	subs	r3, r3, r6
 8006d34:	60a3      	str	r3, [r4, #8]
 8006d36:	6823      	ldr	r3, [r4, #0]
 8006d38:	4433      	add	r3, r6
 8006d3a:	6023      	str	r3, [r4, #0]
 8006d3c:	2000      	movs	r0, #0
 8006d3e:	e7db      	b.n	8006cf8 <__ssputs_r+0x58>
 8006d40:	462a      	mov	r2, r5
 8006d42:	f000 fb75 	bl	8007430 <_realloc_r>
 8006d46:	4606      	mov	r6, r0
 8006d48:	2800      	cmp	r0, #0
 8006d4a:	d1e1      	bne.n	8006d10 <__ssputs_r+0x70>
 8006d4c:	6921      	ldr	r1, [r4, #16]
 8006d4e:	4650      	mov	r0, sl
 8006d50:	f7ff fec6 	bl	8006ae0 <_free_r>
 8006d54:	e7c7      	b.n	8006ce6 <__ssputs_r+0x46>
	...

08006d58 <_svfiprintf_r>:
 8006d58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006d5c:	4698      	mov	r8, r3
 8006d5e:	898b      	ldrh	r3, [r1, #12]
 8006d60:	061b      	lsls	r3, r3, #24
 8006d62:	b09d      	sub	sp, #116	; 0x74
 8006d64:	4607      	mov	r7, r0
 8006d66:	460d      	mov	r5, r1
 8006d68:	4614      	mov	r4, r2
 8006d6a:	d50e      	bpl.n	8006d8a <_svfiprintf_r+0x32>
 8006d6c:	690b      	ldr	r3, [r1, #16]
 8006d6e:	b963      	cbnz	r3, 8006d8a <_svfiprintf_r+0x32>
 8006d70:	2140      	movs	r1, #64	; 0x40
 8006d72:	f7ff ff21 	bl	8006bb8 <_malloc_r>
 8006d76:	6028      	str	r0, [r5, #0]
 8006d78:	6128      	str	r0, [r5, #16]
 8006d7a:	b920      	cbnz	r0, 8006d86 <_svfiprintf_r+0x2e>
 8006d7c:	230c      	movs	r3, #12
 8006d7e:	603b      	str	r3, [r7, #0]
 8006d80:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006d84:	e0d1      	b.n	8006f2a <_svfiprintf_r+0x1d2>
 8006d86:	2340      	movs	r3, #64	; 0x40
 8006d88:	616b      	str	r3, [r5, #20]
 8006d8a:	2300      	movs	r3, #0
 8006d8c:	9309      	str	r3, [sp, #36]	; 0x24
 8006d8e:	2320      	movs	r3, #32
 8006d90:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006d94:	f8cd 800c 	str.w	r8, [sp, #12]
 8006d98:	2330      	movs	r3, #48	; 0x30
 8006d9a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8006f44 <_svfiprintf_r+0x1ec>
 8006d9e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006da2:	f04f 0901 	mov.w	r9, #1
 8006da6:	4623      	mov	r3, r4
 8006da8:	469a      	mov	sl, r3
 8006daa:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006dae:	b10a      	cbz	r2, 8006db4 <_svfiprintf_r+0x5c>
 8006db0:	2a25      	cmp	r2, #37	; 0x25
 8006db2:	d1f9      	bne.n	8006da8 <_svfiprintf_r+0x50>
 8006db4:	ebba 0b04 	subs.w	fp, sl, r4
 8006db8:	d00b      	beq.n	8006dd2 <_svfiprintf_r+0x7a>
 8006dba:	465b      	mov	r3, fp
 8006dbc:	4622      	mov	r2, r4
 8006dbe:	4629      	mov	r1, r5
 8006dc0:	4638      	mov	r0, r7
 8006dc2:	f7ff ff6d 	bl	8006ca0 <__ssputs_r>
 8006dc6:	3001      	adds	r0, #1
 8006dc8:	f000 80aa 	beq.w	8006f20 <_svfiprintf_r+0x1c8>
 8006dcc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006dce:	445a      	add	r2, fp
 8006dd0:	9209      	str	r2, [sp, #36]	; 0x24
 8006dd2:	f89a 3000 	ldrb.w	r3, [sl]
 8006dd6:	2b00      	cmp	r3, #0
 8006dd8:	f000 80a2 	beq.w	8006f20 <_svfiprintf_r+0x1c8>
 8006ddc:	2300      	movs	r3, #0
 8006dde:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006de2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006de6:	f10a 0a01 	add.w	sl, sl, #1
 8006dea:	9304      	str	r3, [sp, #16]
 8006dec:	9307      	str	r3, [sp, #28]
 8006dee:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006df2:	931a      	str	r3, [sp, #104]	; 0x68
 8006df4:	4654      	mov	r4, sl
 8006df6:	2205      	movs	r2, #5
 8006df8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006dfc:	4851      	ldr	r0, [pc, #324]	; (8006f44 <_svfiprintf_r+0x1ec>)
 8006dfe:	f7f9 f9ff 	bl	8000200 <memchr>
 8006e02:	9a04      	ldr	r2, [sp, #16]
 8006e04:	b9d8      	cbnz	r0, 8006e3e <_svfiprintf_r+0xe6>
 8006e06:	06d0      	lsls	r0, r2, #27
 8006e08:	bf44      	itt	mi
 8006e0a:	2320      	movmi	r3, #32
 8006e0c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006e10:	0711      	lsls	r1, r2, #28
 8006e12:	bf44      	itt	mi
 8006e14:	232b      	movmi	r3, #43	; 0x2b
 8006e16:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006e1a:	f89a 3000 	ldrb.w	r3, [sl]
 8006e1e:	2b2a      	cmp	r3, #42	; 0x2a
 8006e20:	d015      	beq.n	8006e4e <_svfiprintf_r+0xf6>
 8006e22:	9a07      	ldr	r2, [sp, #28]
 8006e24:	4654      	mov	r4, sl
 8006e26:	2000      	movs	r0, #0
 8006e28:	f04f 0c0a 	mov.w	ip, #10
 8006e2c:	4621      	mov	r1, r4
 8006e2e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006e32:	3b30      	subs	r3, #48	; 0x30
 8006e34:	2b09      	cmp	r3, #9
 8006e36:	d94e      	bls.n	8006ed6 <_svfiprintf_r+0x17e>
 8006e38:	b1b0      	cbz	r0, 8006e68 <_svfiprintf_r+0x110>
 8006e3a:	9207      	str	r2, [sp, #28]
 8006e3c:	e014      	b.n	8006e68 <_svfiprintf_r+0x110>
 8006e3e:	eba0 0308 	sub.w	r3, r0, r8
 8006e42:	fa09 f303 	lsl.w	r3, r9, r3
 8006e46:	4313      	orrs	r3, r2
 8006e48:	9304      	str	r3, [sp, #16]
 8006e4a:	46a2      	mov	sl, r4
 8006e4c:	e7d2      	b.n	8006df4 <_svfiprintf_r+0x9c>
 8006e4e:	9b03      	ldr	r3, [sp, #12]
 8006e50:	1d19      	adds	r1, r3, #4
 8006e52:	681b      	ldr	r3, [r3, #0]
 8006e54:	9103      	str	r1, [sp, #12]
 8006e56:	2b00      	cmp	r3, #0
 8006e58:	bfbb      	ittet	lt
 8006e5a:	425b      	neglt	r3, r3
 8006e5c:	f042 0202 	orrlt.w	r2, r2, #2
 8006e60:	9307      	strge	r3, [sp, #28]
 8006e62:	9307      	strlt	r3, [sp, #28]
 8006e64:	bfb8      	it	lt
 8006e66:	9204      	strlt	r2, [sp, #16]
 8006e68:	7823      	ldrb	r3, [r4, #0]
 8006e6a:	2b2e      	cmp	r3, #46	; 0x2e
 8006e6c:	d10c      	bne.n	8006e88 <_svfiprintf_r+0x130>
 8006e6e:	7863      	ldrb	r3, [r4, #1]
 8006e70:	2b2a      	cmp	r3, #42	; 0x2a
 8006e72:	d135      	bne.n	8006ee0 <_svfiprintf_r+0x188>
 8006e74:	9b03      	ldr	r3, [sp, #12]
 8006e76:	1d1a      	adds	r2, r3, #4
 8006e78:	681b      	ldr	r3, [r3, #0]
 8006e7a:	9203      	str	r2, [sp, #12]
 8006e7c:	2b00      	cmp	r3, #0
 8006e7e:	bfb8      	it	lt
 8006e80:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8006e84:	3402      	adds	r4, #2
 8006e86:	9305      	str	r3, [sp, #20]
 8006e88:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8006f54 <_svfiprintf_r+0x1fc>
 8006e8c:	7821      	ldrb	r1, [r4, #0]
 8006e8e:	2203      	movs	r2, #3
 8006e90:	4650      	mov	r0, sl
 8006e92:	f7f9 f9b5 	bl	8000200 <memchr>
 8006e96:	b140      	cbz	r0, 8006eaa <_svfiprintf_r+0x152>
 8006e98:	2340      	movs	r3, #64	; 0x40
 8006e9a:	eba0 000a 	sub.w	r0, r0, sl
 8006e9e:	fa03 f000 	lsl.w	r0, r3, r0
 8006ea2:	9b04      	ldr	r3, [sp, #16]
 8006ea4:	4303      	orrs	r3, r0
 8006ea6:	3401      	adds	r4, #1
 8006ea8:	9304      	str	r3, [sp, #16]
 8006eaa:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006eae:	4826      	ldr	r0, [pc, #152]	; (8006f48 <_svfiprintf_r+0x1f0>)
 8006eb0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006eb4:	2206      	movs	r2, #6
 8006eb6:	f7f9 f9a3 	bl	8000200 <memchr>
 8006eba:	2800      	cmp	r0, #0
 8006ebc:	d038      	beq.n	8006f30 <_svfiprintf_r+0x1d8>
 8006ebe:	4b23      	ldr	r3, [pc, #140]	; (8006f4c <_svfiprintf_r+0x1f4>)
 8006ec0:	bb1b      	cbnz	r3, 8006f0a <_svfiprintf_r+0x1b2>
 8006ec2:	9b03      	ldr	r3, [sp, #12]
 8006ec4:	3307      	adds	r3, #7
 8006ec6:	f023 0307 	bic.w	r3, r3, #7
 8006eca:	3308      	adds	r3, #8
 8006ecc:	9303      	str	r3, [sp, #12]
 8006ece:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006ed0:	4433      	add	r3, r6
 8006ed2:	9309      	str	r3, [sp, #36]	; 0x24
 8006ed4:	e767      	b.n	8006da6 <_svfiprintf_r+0x4e>
 8006ed6:	fb0c 3202 	mla	r2, ip, r2, r3
 8006eda:	460c      	mov	r4, r1
 8006edc:	2001      	movs	r0, #1
 8006ede:	e7a5      	b.n	8006e2c <_svfiprintf_r+0xd4>
 8006ee0:	2300      	movs	r3, #0
 8006ee2:	3401      	adds	r4, #1
 8006ee4:	9305      	str	r3, [sp, #20]
 8006ee6:	4619      	mov	r1, r3
 8006ee8:	f04f 0c0a 	mov.w	ip, #10
 8006eec:	4620      	mov	r0, r4
 8006eee:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006ef2:	3a30      	subs	r2, #48	; 0x30
 8006ef4:	2a09      	cmp	r2, #9
 8006ef6:	d903      	bls.n	8006f00 <_svfiprintf_r+0x1a8>
 8006ef8:	2b00      	cmp	r3, #0
 8006efa:	d0c5      	beq.n	8006e88 <_svfiprintf_r+0x130>
 8006efc:	9105      	str	r1, [sp, #20]
 8006efe:	e7c3      	b.n	8006e88 <_svfiprintf_r+0x130>
 8006f00:	fb0c 2101 	mla	r1, ip, r1, r2
 8006f04:	4604      	mov	r4, r0
 8006f06:	2301      	movs	r3, #1
 8006f08:	e7f0      	b.n	8006eec <_svfiprintf_r+0x194>
 8006f0a:	ab03      	add	r3, sp, #12
 8006f0c:	9300      	str	r3, [sp, #0]
 8006f0e:	462a      	mov	r2, r5
 8006f10:	4b0f      	ldr	r3, [pc, #60]	; (8006f50 <_svfiprintf_r+0x1f8>)
 8006f12:	a904      	add	r1, sp, #16
 8006f14:	4638      	mov	r0, r7
 8006f16:	f7fd fc6b 	bl	80047f0 <_printf_float>
 8006f1a:	1c42      	adds	r2, r0, #1
 8006f1c:	4606      	mov	r6, r0
 8006f1e:	d1d6      	bne.n	8006ece <_svfiprintf_r+0x176>
 8006f20:	89ab      	ldrh	r3, [r5, #12]
 8006f22:	065b      	lsls	r3, r3, #25
 8006f24:	f53f af2c 	bmi.w	8006d80 <_svfiprintf_r+0x28>
 8006f28:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006f2a:	b01d      	add	sp, #116	; 0x74
 8006f2c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006f30:	ab03      	add	r3, sp, #12
 8006f32:	9300      	str	r3, [sp, #0]
 8006f34:	462a      	mov	r2, r5
 8006f36:	4b06      	ldr	r3, [pc, #24]	; (8006f50 <_svfiprintf_r+0x1f8>)
 8006f38:	a904      	add	r1, sp, #16
 8006f3a:	4638      	mov	r0, r7
 8006f3c:	f7fd fefc 	bl	8004d38 <_printf_i>
 8006f40:	e7eb      	b.n	8006f1a <_svfiprintf_r+0x1c2>
 8006f42:	bf00      	nop
 8006f44:	080078e4 	.word	0x080078e4
 8006f48:	080078ee 	.word	0x080078ee
 8006f4c:	080047f1 	.word	0x080047f1
 8006f50:	08006ca1 	.word	0x08006ca1
 8006f54:	080078ea 	.word	0x080078ea

08006f58 <__sfputc_r>:
 8006f58:	6893      	ldr	r3, [r2, #8]
 8006f5a:	3b01      	subs	r3, #1
 8006f5c:	2b00      	cmp	r3, #0
 8006f5e:	b410      	push	{r4}
 8006f60:	6093      	str	r3, [r2, #8]
 8006f62:	da08      	bge.n	8006f76 <__sfputc_r+0x1e>
 8006f64:	6994      	ldr	r4, [r2, #24]
 8006f66:	42a3      	cmp	r3, r4
 8006f68:	db01      	blt.n	8006f6e <__sfputc_r+0x16>
 8006f6a:	290a      	cmp	r1, #10
 8006f6c:	d103      	bne.n	8006f76 <__sfputc_r+0x1e>
 8006f6e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006f72:	f7fe b8b5 	b.w	80050e0 <__swbuf_r>
 8006f76:	6813      	ldr	r3, [r2, #0]
 8006f78:	1c58      	adds	r0, r3, #1
 8006f7a:	6010      	str	r0, [r2, #0]
 8006f7c:	7019      	strb	r1, [r3, #0]
 8006f7e:	4608      	mov	r0, r1
 8006f80:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006f84:	4770      	bx	lr

08006f86 <__sfputs_r>:
 8006f86:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006f88:	4606      	mov	r6, r0
 8006f8a:	460f      	mov	r7, r1
 8006f8c:	4614      	mov	r4, r2
 8006f8e:	18d5      	adds	r5, r2, r3
 8006f90:	42ac      	cmp	r4, r5
 8006f92:	d101      	bne.n	8006f98 <__sfputs_r+0x12>
 8006f94:	2000      	movs	r0, #0
 8006f96:	e007      	b.n	8006fa8 <__sfputs_r+0x22>
 8006f98:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006f9c:	463a      	mov	r2, r7
 8006f9e:	4630      	mov	r0, r6
 8006fa0:	f7ff ffda 	bl	8006f58 <__sfputc_r>
 8006fa4:	1c43      	adds	r3, r0, #1
 8006fa6:	d1f3      	bne.n	8006f90 <__sfputs_r+0xa>
 8006fa8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08006fac <_vfiprintf_r>:
 8006fac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006fb0:	460d      	mov	r5, r1
 8006fb2:	b09d      	sub	sp, #116	; 0x74
 8006fb4:	4614      	mov	r4, r2
 8006fb6:	4698      	mov	r8, r3
 8006fb8:	4606      	mov	r6, r0
 8006fba:	b118      	cbz	r0, 8006fc4 <_vfiprintf_r+0x18>
 8006fbc:	6983      	ldr	r3, [r0, #24]
 8006fbe:	b90b      	cbnz	r3, 8006fc4 <_vfiprintf_r+0x18>
 8006fc0:	f7ff f8e2 	bl	8006188 <__sinit>
 8006fc4:	4b89      	ldr	r3, [pc, #548]	; (80071ec <_vfiprintf_r+0x240>)
 8006fc6:	429d      	cmp	r5, r3
 8006fc8:	d11b      	bne.n	8007002 <_vfiprintf_r+0x56>
 8006fca:	6875      	ldr	r5, [r6, #4]
 8006fcc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006fce:	07d9      	lsls	r1, r3, #31
 8006fd0:	d405      	bmi.n	8006fde <_vfiprintf_r+0x32>
 8006fd2:	89ab      	ldrh	r3, [r5, #12]
 8006fd4:	059a      	lsls	r2, r3, #22
 8006fd6:	d402      	bmi.n	8006fde <_vfiprintf_r+0x32>
 8006fd8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006fda:	f7ff f978 	bl	80062ce <__retarget_lock_acquire_recursive>
 8006fde:	89ab      	ldrh	r3, [r5, #12]
 8006fe0:	071b      	lsls	r3, r3, #28
 8006fe2:	d501      	bpl.n	8006fe8 <_vfiprintf_r+0x3c>
 8006fe4:	692b      	ldr	r3, [r5, #16]
 8006fe6:	b9eb      	cbnz	r3, 8007024 <_vfiprintf_r+0x78>
 8006fe8:	4629      	mov	r1, r5
 8006fea:	4630      	mov	r0, r6
 8006fec:	f7fe f8ca 	bl	8005184 <__swsetup_r>
 8006ff0:	b1c0      	cbz	r0, 8007024 <_vfiprintf_r+0x78>
 8006ff2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006ff4:	07dc      	lsls	r4, r3, #31
 8006ff6:	d50e      	bpl.n	8007016 <_vfiprintf_r+0x6a>
 8006ff8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006ffc:	b01d      	add	sp, #116	; 0x74
 8006ffe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007002:	4b7b      	ldr	r3, [pc, #492]	; (80071f0 <_vfiprintf_r+0x244>)
 8007004:	429d      	cmp	r5, r3
 8007006:	d101      	bne.n	800700c <_vfiprintf_r+0x60>
 8007008:	68b5      	ldr	r5, [r6, #8]
 800700a:	e7df      	b.n	8006fcc <_vfiprintf_r+0x20>
 800700c:	4b79      	ldr	r3, [pc, #484]	; (80071f4 <_vfiprintf_r+0x248>)
 800700e:	429d      	cmp	r5, r3
 8007010:	bf08      	it	eq
 8007012:	68f5      	ldreq	r5, [r6, #12]
 8007014:	e7da      	b.n	8006fcc <_vfiprintf_r+0x20>
 8007016:	89ab      	ldrh	r3, [r5, #12]
 8007018:	0598      	lsls	r0, r3, #22
 800701a:	d4ed      	bmi.n	8006ff8 <_vfiprintf_r+0x4c>
 800701c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800701e:	f7ff f957 	bl	80062d0 <__retarget_lock_release_recursive>
 8007022:	e7e9      	b.n	8006ff8 <_vfiprintf_r+0x4c>
 8007024:	2300      	movs	r3, #0
 8007026:	9309      	str	r3, [sp, #36]	; 0x24
 8007028:	2320      	movs	r3, #32
 800702a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800702e:	f8cd 800c 	str.w	r8, [sp, #12]
 8007032:	2330      	movs	r3, #48	; 0x30
 8007034:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80071f8 <_vfiprintf_r+0x24c>
 8007038:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800703c:	f04f 0901 	mov.w	r9, #1
 8007040:	4623      	mov	r3, r4
 8007042:	469a      	mov	sl, r3
 8007044:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007048:	b10a      	cbz	r2, 800704e <_vfiprintf_r+0xa2>
 800704a:	2a25      	cmp	r2, #37	; 0x25
 800704c:	d1f9      	bne.n	8007042 <_vfiprintf_r+0x96>
 800704e:	ebba 0b04 	subs.w	fp, sl, r4
 8007052:	d00b      	beq.n	800706c <_vfiprintf_r+0xc0>
 8007054:	465b      	mov	r3, fp
 8007056:	4622      	mov	r2, r4
 8007058:	4629      	mov	r1, r5
 800705a:	4630      	mov	r0, r6
 800705c:	f7ff ff93 	bl	8006f86 <__sfputs_r>
 8007060:	3001      	adds	r0, #1
 8007062:	f000 80aa 	beq.w	80071ba <_vfiprintf_r+0x20e>
 8007066:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007068:	445a      	add	r2, fp
 800706a:	9209      	str	r2, [sp, #36]	; 0x24
 800706c:	f89a 3000 	ldrb.w	r3, [sl]
 8007070:	2b00      	cmp	r3, #0
 8007072:	f000 80a2 	beq.w	80071ba <_vfiprintf_r+0x20e>
 8007076:	2300      	movs	r3, #0
 8007078:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800707c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007080:	f10a 0a01 	add.w	sl, sl, #1
 8007084:	9304      	str	r3, [sp, #16]
 8007086:	9307      	str	r3, [sp, #28]
 8007088:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800708c:	931a      	str	r3, [sp, #104]	; 0x68
 800708e:	4654      	mov	r4, sl
 8007090:	2205      	movs	r2, #5
 8007092:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007096:	4858      	ldr	r0, [pc, #352]	; (80071f8 <_vfiprintf_r+0x24c>)
 8007098:	f7f9 f8b2 	bl	8000200 <memchr>
 800709c:	9a04      	ldr	r2, [sp, #16]
 800709e:	b9d8      	cbnz	r0, 80070d8 <_vfiprintf_r+0x12c>
 80070a0:	06d1      	lsls	r1, r2, #27
 80070a2:	bf44      	itt	mi
 80070a4:	2320      	movmi	r3, #32
 80070a6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80070aa:	0713      	lsls	r3, r2, #28
 80070ac:	bf44      	itt	mi
 80070ae:	232b      	movmi	r3, #43	; 0x2b
 80070b0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80070b4:	f89a 3000 	ldrb.w	r3, [sl]
 80070b8:	2b2a      	cmp	r3, #42	; 0x2a
 80070ba:	d015      	beq.n	80070e8 <_vfiprintf_r+0x13c>
 80070bc:	9a07      	ldr	r2, [sp, #28]
 80070be:	4654      	mov	r4, sl
 80070c0:	2000      	movs	r0, #0
 80070c2:	f04f 0c0a 	mov.w	ip, #10
 80070c6:	4621      	mov	r1, r4
 80070c8:	f811 3b01 	ldrb.w	r3, [r1], #1
 80070cc:	3b30      	subs	r3, #48	; 0x30
 80070ce:	2b09      	cmp	r3, #9
 80070d0:	d94e      	bls.n	8007170 <_vfiprintf_r+0x1c4>
 80070d2:	b1b0      	cbz	r0, 8007102 <_vfiprintf_r+0x156>
 80070d4:	9207      	str	r2, [sp, #28]
 80070d6:	e014      	b.n	8007102 <_vfiprintf_r+0x156>
 80070d8:	eba0 0308 	sub.w	r3, r0, r8
 80070dc:	fa09 f303 	lsl.w	r3, r9, r3
 80070e0:	4313      	orrs	r3, r2
 80070e2:	9304      	str	r3, [sp, #16]
 80070e4:	46a2      	mov	sl, r4
 80070e6:	e7d2      	b.n	800708e <_vfiprintf_r+0xe2>
 80070e8:	9b03      	ldr	r3, [sp, #12]
 80070ea:	1d19      	adds	r1, r3, #4
 80070ec:	681b      	ldr	r3, [r3, #0]
 80070ee:	9103      	str	r1, [sp, #12]
 80070f0:	2b00      	cmp	r3, #0
 80070f2:	bfbb      	ittet	lt
 80070f4:	425b      	neglt	r3, r3
 80070f6:	f042 0202 	orrlt.w	r2, r2, #2
 80070fa:	9307      	strge	r3, [sp, #28]
 80070fc:	9307      	strlt	r3, [sp, #28]
 80070fe:	bfb8      	it	lt
 8007100:	9204      	strlt	r2, [sp, #16]
 8007102:	7823      	ldrb	r3, [r4, #0]
 8007104:	2b2e      	cmp	r3, #46	; 0x2e
 8007106:	d10c      	bne.n	8007122 <_vfiprintf_r+0x176>
 8007108:	7863      	ldrb	r3, [r4, #1]
 800710a:	2b2a      	cmp	r3, #42	; 0x2a
 800710c:	d135      	bne.n	800717a <_vfiprintf_r+0x1ce>
 800710e:	9b03      	ldr	r3, [sp, #12]
 8007110:	1d1a      	adds	r2, r3, #4
 8007112:	681b      	ldr	r3, [r3, #0]
 8007114:	9203      	str	r2, [sp, #12]
 8007116:	2b00      	cmp	r3, #0
 8007118:	bfb8      	it	lt
 800711a:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800711e:	3402      	adds	r4, #2
 8007120:	9305      	str	r3, [sp, #20]
 8007122:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8007208 <_vfiprintf_r+0x25c>
 8007126:	7821      	ldrb	r1, [r4, #0]
 8007128:	2203      	movs	r2, #3
 800712a:	4650      	mov	r0, sl
 800712c:	f7f9 f868 	bl	8000200 <memchr>
 8007130:	b140      	cbz	r0, 8007144 <_vfiprintf_r+0x198>
 8007132:	2340      	movs	r3, #64	; 0x40
 8007134:	eba0 000a 	sub.w	r0, r0, sl
 8007138:	fa03 f000 	lsl.w	r0, r3, r0
 800713c:	9b04      	ldr	r3, [sp, #16]
 800713e:	4303      	orrs	r3, r0
 8007140:	3401      	adds	r4, #1
 8007142:	9304      	str	r3, [sp, #16]
 8007144:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007148:	482c      	ldr	r0, [pc, #176]	; (80071fc <_vfiprintf_r+0x250>)
 800714a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800714e:	2206      	movs	r2, #6
 8007150:	f7f9 f856 	bl	8000200 <memchr>
 8007154:	2800      	cmp	r0, #0
 8007156:	d03f      	beq.n	80071d8 <_vfiprintf_r+0x22c>
 8007158:	4b29      	ldr	r3, [pc, #164]	; (8007200 <_vfiprintf_r+0x254>)
 800715a:	bb1b      	cbnz	r3, 80071a4 <_vfiprintf_r+0x1f8>
 800715c:	9b03      	ldr	r3, [sp, #12]
 800715e:	3307      	adds	r3, #7
 8007160:	f023 0307 	bic.w	r3, r3, #7
 8007164:	3308      	adds	r3, #8
 8007166:	9303      	str	r3, [sp, #12]
 8007168:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800716a:	443b      	add	r3, r7
 800716c:	9309      	str	r3, [sp, #36]	; 0x24
 800716e:	e767      	b.n	8007040 <_vfiprintf_r+0x94>
 8007170:	fb0c 3202 	mla	r2, ip, r2, r3
 8007174:	460c      	mov	r4, r1
 8007176:	2001      	movs	r0, #1
 8007178:	e7a5      	b.n	80070c6 <_vfiprintf_r+0x11a>
 800717a:	2300      	movs	r3, #0
 800717c:	3401      	adds	r4, #1
 800717e:	9305      	str	r3, [sp, #20]
 8007180:	4619      	mov	r1, r3
 8007182:	f04f 0c0a 	mov.w	ip, #10
 8007186:	4620      	mov	r0, r4
 8007188:	f810 2b01 	ldrb.w	r2, [r0], #1
 800718c:	3a30      	subs	r2, #48	; 0x30
 800718e:	2a09      	cmp	r2, #9
 8007190:	d903      	bls.n	800719a <_vfiprintf_r+0x1ee>
 8007192:	2b00      	cmp	r3, #0
 8007194:	d0c5      	beq.n	8007122 <_vfiprintf_r+0x176>
 8007196:	9105      	str	r1, [sp, #20]
 8007198:	e7c3      	b.n	8007122 <_vfiprintf_r+0x176>
 800719a:	fb0c 2101 	mla	r1, ip, r1, r2
 800719e:	4604      	mov	r4, r0
 80071a0:	2301      	movs	r3, #1
 80071a2:	e7f0      	b.n	8007186 <_vfiprintf_r+0x1da>
 80071a4:	ab03      	add	r3, sp, #12
 80071a6:	9300      	str	r3, [sp, #0]
 80071a8:	462a      	mov	r2, r5
 80071aa:	4b16      	ldr	r3, [pc, #88]	; (8007204 <_vfiprintf_r+0x258>)
 80071ac:	a904      	add	r1, sp, #16
 80071ae:	4630      	mov	r0, r6
 80071b0:	f7fd fb1e 	bl	80047f0 <_printf_float>
 80071b4:	4607      	mov	r7, r0
 80071b6:	1c78      	adds	r0, r7, #1
 80071b8:	d1d6      	bne.n	8007168 <_vfiprintf_r+0x1bc>
 80071ba:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80071bc:	07d9      	lsls	r1, r3, #31
 80071be:	d405      	bmi.n	80071cc <_vfiprintf_r+0x220>
 80071c0:	89ab      	ldrh	r3, [r5, #12]
 80071c2:	059a      	lsls	r2, r3, #22
 80071c4:	d402      	bmi.n	80071cc <_vfiprintf_r+0x220>
 80071c6:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80071c8:	f7ff f882 	bl	80062d0 <__retarget_lock_release_recursive>
 80071cc:	89ab      	ldrh	r3, [r5, #12]
 80071ce:	065b      	lsls	r3, r3, #25
 80071d0:	f53f af12 	bmi.w	8006ff8 <_vfiprintf_r+0x4c>
 80071d4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80071d6:	e711      	b.n	8006ffc <_vfiprintf_r+0x50>
 80071d8:	ab03      	add	r3, sp, #12
 80071da:	9300      	str	r3, [sp, #0]
 80071dc:	462a      	mov	r2, r5
 80071de:	4b09      	ldr	r3, [pc, #36]	; (8007204 <_vfiprintf_r+0x258>)
 80071e0:	a904      	add	r1, sp, #16
 80071e2:	4630      	mov	r0, r6
 80071e4:	f7fd fda8 	bl	8004d38 <_printf_i>
 80071e8:	e7e4      	b.n	80071b4 <_vfiprintf_r+0x208>
 80071ea:	bf00      	nop
 80071ec:	08007748 	.word	0x08007748
 80071f0:	08007768 	.word	0x08007768
 80071f4:	08007728 	.word	0x08007728
 80071f8:	080078e4 	.word	0x080078e4
 80071fc:	080078ee 	.word	0x080078ee
 8007200:	080047f1 	.word	0x080047f1
 8007204:	08006f87 	.word	0x08006f87
 8007208:	080078ea 	.word	0x080078ea

0800720c <_sbrk_r>:
 800720c:	b538      	push	{r3, r4, r5, lr}
 800720e:	4d06      	ldr	r5, [pc, #24]	; (8007228 <_sbrk_r+0x1c>)
 8007210:	2300      	movs	r3, #0
 8007212:	4604      	mov	r4, r0
 8007214:	4608      	mov	r0, r1
 8007216:	602b      	str	r3, [r5, #0]
 8007218:	f7fa fe80 	bl	8001f1c <_sbrk>
 800721c:	1c43      	adds	r3, r0, #1
 800721e:	d102      	bne.n	8007226 <_sbrk_r+0x1a>
 8007220:	682b      	ldr	r3, [r5, #0]
 8007222:	b103      	cbz	r3, 8007226 <_sbrk_r+0x1a>
 8007224:	6023      	str	r3, [r4, #0]
 8007226:	bd38      	pop	{r3, r4, r5, pc}
 8007228:	20000408 	.word	0x20000408

0800722c <__sread>:
 800722c:	b510      	push	{r4, lr}
 800722e:	460c      	mov	r4, r1
 8007230:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007234:	f000 f92c 	bl	8007490 <_read_r>
 8007238:	2800      	cmp	r0, #0
 800723a:	bfab      	itete	ge
 800723c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800723e:	89a3      	ldrhlt	r3, [r4, #12]
 8007240:	181b      	addge	r3, r3, r0
 8007242:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8007246:	bfac      	ite	ge
 8007248:	6563      	strge	r3, [r4, #84]	; 0x54
 800724a:	81a3      	strhlt	r3, [r4, #12]
 800724c:	bd10      	pop	{r4, pc}

0800724e <__swrite>:
 800724e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007252:	461f      	mov	r7, r3
 8007254:	898b      	ldrh	r3, [r1, #12]
 8007256:	05db      	lsls	r3, r3, #23
 8007258:	4605      	mov	r5, r0
 800725a:	460c      	mov	r4, r1
 800725c:	4616      	mov	r6, r2
 800725e:	d505      	bpl.n	800726c <__swrite+0x1e>
 8007260:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007264:	2302      	movs	r3, #2
 8007266:	2200      	movs	r2, #0
 8007268:	f000 f898 	bl	800739c <_lseek_r>
 800726c:	89a3      	ldrh	r3, [r4, #12]
 800726e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007272:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007276:	81a3      	strh	r3, [r4, #12]
 8007278:	4632      	mov	r2, r6
 800727a:	463b      	mov	r3, r7
 800727c:	4628      	mov	r0, r5
 800727e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007282:	f000 b817 	b.w	80072b4 <_write_r>

08007286 <__sseek>:
 8007286:	b510      	push	{r4, lr}
 8007288:	460c      	mov	r4, r1
 800728a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800728e:	f000 f885 	bl	800739c <_lseek_r>
 8007292:	1c43      	adds	r3, r0, #1
 8007294:	89a3      	ldrh	r3, [r4, #12]
 8007296:	bf15      	itete	ne
 8007298:	6560      	strne	r0, [r4, #84]	; 0x54
 800729a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800729e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80072a2:	81a3      	strheq	r3, [r4, #12]
 80072a4:	bf18      	it	ne
 80072a6:	81a3      	strhne	r3, [r4, #12]
 80072a8:	bd10      	pop	{r4, pc}

080072aa <__sclose>:
 80072aa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80072ae:	f000 b831 	b.w	8007314 <_close_r>
	...

080072b4 <_write_r>:
 80072b4:	b538      	push	{r3, r4, r5, lr}
 80072b6:	4d07      	ldr	r5, [pc, #28]	; (80072d4 <_write_r+0x20>)
 80072b8:	4604      	mov	r4, r0
 80072ba:	4608      	mov	r0, r1
 80072bc:	4611      	mov	r1, r2
 80072be:	2200      	movs	r2, #0
 80072c0:	602a      	str	r2, [r5, #0]
 80072c2:	461a      	mov	r2, r3
 80072c4:	f7fa fdd9 	bl	8001e7a <_write>
 80072c8:	1c43      	adds	r3, r0, #1
 80072ca:	d102      	bne.n	80072d2 <_write_r+0x1e>
 80072cc:	682b      	ldr	r3, [r5, #0]
 80072ce:	b103      	cbz	r3, 80072d2 <_write_r+0x1e>
 80072d0:	6023      	str	r3, [r4, #0]
 80072d2:	bd38      	pop	{r3, r4, r5, pc}
 80072d4:	20000408 	.word	0x20000408

080072d8 <__assert_func>:
 80072d8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80072da:	4614      	mov	r4, r2
 80072dc:	461a      	mov	r2, r3
 80072de:	4b09      	ldr	r3, [pc, #36]	; (8007304 <__assert_func+0x2c>)
 80072e0:	681b      	ldr	r3, [r3, #0]
 80072e2:	4605      	mov	r5, r0
 80072e4:	68d8      	ldr	r0, [r3, #12]
 80072e6:	b14c      	cbz	r4, 80072fc <__assert_func+0x24>
 80072e8:	4b07      	ldr	r3, [pc, #28]	; (8007308 <__assert_func+0x30>)
 80072ea:	9100      	str	r1, [sp, #0]
 80072ec:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80072f0:	4906      	ldr	r1, [pc, #24]	; (800730c <__assert_func+0x34>)
 80072f2:	462b      	mov	r3, r5
 80072f4:	f000 f81e 	bl	8007334 <fiprintf>
 80072f8:	f000 f8e9 	bl	80074ce <abort>
 80072fc:	4b04      	ldr	r3, [pc, #16]	; (8007310 <__assert_func+0x38>)
 80072fe:	461c      	mov	r4, r3
 8007300:	e7f3      	b.n	80072ea <__assert_func+0x12>
 8007302:	bf00      	nop
 8007304:	20000010 	.word	0x20000010
 8007308:	080078f5 	.word	0x080078f5
 800730c:	08007902 	.word	0x08007902
 8007310:	08007930 	.word	0x08007930

08007314 <_close_r>:
 8007314:	b538      	push	{r3, r4, r5, lr}
 8007316:	4d06      	ldr	r5, [pc, #24]	; (8007330 <_close_r+0x1c>)
 8007318:	2300      	movs	r3, #0
 800731a:	4604      	mov	r4, r0
 800731c:	4608      	mov	r0, r1
 800731e:	602b      	str	r3, [r5, #0]
 8007320:	f7fa fdc7 	bl	8001eb2 <_close>
 8007324:	1c43      	adds	r3, r0, #1
 8007326:	d102      	bne.n	800732e <_close_r+0x1a>
 8007328:	682b      	ldr	r3, [r5, #0]
 800732a:	b103      	cbz	r3, 800732e <_close_r+0x1a>
 800732c:	6023      	str	r3, [r4, #0]
 800732e:	bd38      	pop	{r3, r4, r5, pc}
 8007330:	20000408 	.word	0x20000408

08007334 <fiprintf>:
 8007334:	b40e      	push	{r1, r2, r3}
 8007336:	b503      	push	{r0, r1, lr}
 8007338:	4601      	mov	r1, r0
 800733a:	ab03      	add	r3, sp, #12
 800733c:	4805      	ldr	r0, [pc, #20]	; (8007354 <fiprintf+0x20>)
 800733e:	f853 2b04 	ldr.w	r2, [r3], #4
 8007342:	6800      	ldr	r0, [r0, #0]
 8007344:	9301      	str	r3, [sp, #4]
 8007346:	f7ff fe31 	bl	8006fac <_vfiprintf_r>
 800734a:	b002      	add	sp, #8
 800734c:	f85d eb04 	ldr.w	lr, [sp], #4
 8007350:	b003      	add	sp, #12
 8007352:	4770      	bx	lr
 8007354:	20000010 	.word	0x20000010

08007358 <_fstat_r>:
 8007358:	b538      	push	{r3, r4, r5, lr}
 800735a:	4d07      	ldr	r5, [pc, #28]	; (8007378 <_fstat_r+0x20>)
 800735c:	2300      	movs	r3, #0
 800735e:	4604      	mov	r4, r0
 8007360:	4608      	mov	r0, r1
 8007362:	4611      	mov	r1, r2
 8007364:	602b      	str	r3, [r5, #0]
 8007366:	f7fa fdb0 	bl	8001eca <_fstat>
 800736a:	1c43      	adds	r3, r0, #1
 800736c:	d102      	bne.n	8007374 <_fstat_r+0x1c>
 800736e:	682b      	ldr	r3, [r5, #0]
 8007370:	b103      	cbz	r3, 8007374 <_fstat_r+0x1c>
 8007372:	6023      	str	r3, [r4, #0]
 8007374:	bd38      	pop	{r3, r4, r5, pc}
 8007376:	bf00      	nop
 8007378:	20000408 	.word	0x20000408

0800737c <_isatty_r>:
 800737c:	b538      	push	{r3, r4, r5, lr}
 800737e:	4d06      	ldr	r5, [pc, #24]	; (8007398 <_isatty_r+0x1c>)
 8007380:	2300      	movs	r3, #0
 8007382:	4604      	mov	r4, r0
 8007384:	4608      	mov	r0, r1
 8007386:	602b      	str	r3, [r5, #0]
 8007388:	f7fa fdaf 	bl	8001eea <_isatty>
 800738c:	1c43      	adds	r3, r0, #1
 800738e:	d102      	bne.n	8007396 <_isatty_r+0x1a>
 8007390:	682b      	ldr	r3, [r5, #0]
 8007392:	b103      	cbz	r3, 8007396 <_isatty_r+0x1a>
 8007394:	6023      	str	r3, [r4, #0]
 8007396:	bd38      	pop	{r3, r4, r5, pc}
 8007398:	20000408 	.word	0x20000408

0800739c <_lseek_r>:
 800739c:	b538      	push	{r3, r4, r5, lr}
 800739e:	4d07      	ldr	r5, [pc, #28]	; (80073bc <_lseek_r+0x20>)
 80073a0:	4604      	mov	r4, r0
 80073a2:	4608      	mov	r0, r1
 80073a4:	4611      	mov	r1, r2
 80073a6:	2200      	movs	r2, #0
 80073a8:	602a      	str	r2, [r5, #0]
 80073aa:	461a      	mov	r2, r3
 80073ac:	f7fa fda8 	bl	8001f00 <_lseek>
 80073b0:	1c43      	adds	r3, r0, #1
 80073b2:	d102      	bne.n	80073ba <_lseek_r+0x1e>
 80073b4:	682b      	ldr	r3, [r5, #0]
 80073b6:	b103      	cbz	r3, 80073ba <_lseek_r+0x1e>
 80073b8:	6023      	str	r3, [r4, #0]
 80073ba:	bd38      	pop	{r3, r4, r5, pc}
 80073bc:	20000408 	.word	0x20000408

080073c0 <__ascii_mbtowc>:
 80073c0:	b082      	sub	sp, #8
 80073c2:	b901      	cbnz	r1, 80073c6 <__ascii_mbtowc+0x6>
 80073c4:	a901      	add	r1, sp, #4
 80073c6:	b142      	cbz	r2, 80073da <__ascii_mbtowc+0x1a>
 80073c8:	b14b      	cbz	r3, 80073de <__ascii_mbtowc+0x1e>
 80073ca:	7813      	ldrb	r3, [r2, #0]
 80073cc:	600b      	str	r3, [r1, #0]
 80073ce:	7812      	ldrb	r2, [r2, #0]
 80073d0:	1e10      	subs	r0, r2, #0
 80073d2:	bf18      	it	ne
 80073d4:	2001      	movne	r0, #1
 80073d6:	b002      	add	sp, #8
 80073d8:	4770      	bx	lr
 80073da:	4610      	mov	r0, r2
 80073dc:	e7fb      	b.n	80073d6 <__ascii_mbtowc+0x16>
 80073de:	f06f 0001 	mvn.w	r0, #1
 80073e2:	e7f8      	b.n	80073d6 <__ascii_mbtowc+0x16>

080073e4 <memmove>:
 80073e4:	4288      	cmp	r0, r1
 80073e6:	b510      	push	{r4, lr}
 80073e8:	eb01 0402 	add.w	r4, r1, r2
 80073ec:	d902      	bls.n	80073f4 <memmove+0x10>
 80073ee:	4284      	cmp	r4, r0
 80073f0:	4623      	mov	r3, r4
 80073f2:	d807      	bhi.n	8007404 <memmove+0x20>
 80073f4:	1e43      	subs	r3, r0, #1
 80073f6:	42a1      	cmp	r1, r4
 80073f8:	d008      	beq.n	800740c <memmove+0x28>
 80073fa:	f811 2b01 	ldrb.w	r2, [r1], #1
 80073fe:	f803 2f01 	strb.w	r2, [r3, #1]!
 8007402:	e7f8      	b.n	80073f6 <memmove+0x12>
 8007404:	4402      	add	r2, r0
 8007406:	4601      	mov	r1, r0
 8007408:	428a      	cmp	r2, r1
 800740a:	d100      	bne.n	800740e <memmove+0x2a>
 800740c:	bd10      	pop	{r4, pc}
 800740e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007412:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8007416:	e7f7      	b.n	8007408 <memmove+0x24>

08007418 <__malloc_lock>:
 8007418:	4801      	ldr	r0, [pc, #4]	; (8007420 <__malloc_lock+0x8>)
 800741a:	f7fe bf58 	b.w	80062ce <__retarget_lock_acquire_recursive>
 800741e:	bf00      	nop
 8007420:	200003fc 	.word	0x200003fc

08007424 <__malloc_unlock>:
 8007424:	4801      	ldr	r0, [pc, #4]	; (800742c <__malloc_unlock+0x8>)
 8007426:	f7fe bf53 	b.w	80062d0 <__retarget_lock_release_recursive>
 800742a:	bf00      	nop
 800742c:	200003fc 	.word	0x200003fc

08007430 <_realloc_r>:
 8007430:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007434:	4680      	mov	r8, r0
 8007436:	4614      	mov	r4, r2
 8007438:	460e      	mov	r6, r1
 800743a:	b921      	cbnz	r1, 8007446 <_realloc_r+0x16>
 800743c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007440:	4611      	mov	r1, r2
 8007442:	f7ff bbb9 	b.w	8006bb8 <_malloc_r>
 8007446:	b92a      	cbnz	r2, 8007454 <_realloc_r+0x24>
 8007448:	f7ff fb4a 	bl	8006ae0 <_free_r>
 800744c:	4625      	mov	r5, r4
 800744e:	4628      	mov	r0, r5
 8007450:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007454:	f000 f842 	bl	80074dc <_malloc_usable_size_r>
 8007458:	4284      	cmp	r4, r0
 800745a:	4607      	mov	r7, r0
 800745c:	d802      	bhi.n	8007464 <_realloc_r+0x34>
 800745e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8007462:	d812      	bhi.n	800748a <_realloc_r+0x5a>
 8007464:	4621      	mov	r1, r4
 8007466:	4640      	mov	r0, r8
 8007468:	f7ff fba6 	bl	8006bb8 <_malloc_r>
 800746c:	4605      	mov	r5, r0
 800746e:	2800      	cmp	r0, #0
 8007470:	d0ed      	beq.n	800744e <_realloc_r+0x1e>
 8007472:	42bc      	cmp	r4, r7
 8007474:	4622      	mov	r2, r4
 8007476:	4631      	mov	r1, r6
 8007478:	bf28      	it	cs
 800747a:	463a      	movcs	r2, r7
 800747c:	f7fd f902 	bl	8004684 <memcpy>
 8007480:	4631      	mov	r1, r6
 8007482:	4640      	mov	r0, r8
 8007484:	f7ff fb2c 	bl	8006ae0 <_free_r>
 8007488:	e7e1      	b.n	800744e <_realloc_r+0x1e>
 800748a:	4635      	mov	r5, r6
 800748c:	e7df      	b.n	800744e <_realloc_r+0x1e>
	...

08007490 <_read_r>:
 8007490:	b538      	push	{r3, r4, r5, lr}
 8007492:	4d07      	ldr	r5, [pc, #28]	; (80074b0 <_read_r+0x20>)
 8007494:	4604      	mov	r4, r0
 8007496:	4608      	mov	r0, r1
 8007498:	4611      	mov	r1, r2
 800749a:	2200      	movs	r2, #0
 800749c:	602a      	str	r2, [r5, #0]
 800749e:	461a      	mov	r2, r3
 80074a0:	f7fa fcce 	bl	8001e40 <_read>
 80074a4:	1c43      	adds	r3, r0, #1
 80074a6:	d102      	bne.n	80074ae <_read_r+0x1e>
 80074a8:	682b      	ldr	r3, [r5, #0]
 80074aa:	b103      	cbz	r3, 80074ae <_read_r+0x1e>
 80074ac:	6023      	str	r3, [r4, #0]
 80074ae:	bd38      	pop	{r3, r4, r5, pc}
 80074b0:	20000408 	.word	0x20000408

080074b4 <__ascii_wctomb>:
 80074b4:	b149      	cbz	r1, 80074ca <__ascii_wctomb+0x16>
 80074b6:	2aff      	cmp	r2, #255	; 0xff
 80074b8:	bf85      	ittet	hi
 80074ba:	238a      	movhi	r3, #138	; 0x8a
 80074bc:	6003      	strhi	r3, [r0, #0]
 80074be:	700a      	strbls	r2, [r1, #0]
 80074c0:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 80074c4:	bf98      	it	ls
 80074c6:	2001      	movls	r0, #1
 80074c8:	4770      	bx	lr
 80074ca:	4608      	mov	r0, r1
 80074cc:	4770      	bx	lr

080074ce <abort>:
 80074ce:	b508      	push	{r3, lr}
 80074d0:	2006      	movs	r0, #6
 80074d2:	f000 f833 	bl	800753c <raise>
 80074d6:	2001      	movs	r0, #1
 80074d8:	f7fa fca8 	bl	8001e2c <_exit>

080074dc <_malloc_usable_size_r>:
 80074dc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80074e0:	1f18      	subs	r0, r3, #4
 80074e2:	2b00      	cmp	r3, #0
 80074e4:	bfbc      	itt	lt
 80074e6:	580b      	ldrlt	r3, [r1, r0]
 80074e8:	18c0      	addlt	r0, r0, r3
 80074ea:	4770      	bx	lr

080074ec <_raise_r>:
 80074ec:	291f      	cmp	r1, #31
 80074ee:	b538      	push	{r3, r4, r5, lr}
 80074f0:	4604      	mov	r4, r0
 80074f2:	460d      	mov	r5, r1
 80074f4:	d904      	bls.n	8007500 <_raise_r+0x14>
 80074f6:	2316      	movs	r3, #22
 80074f8:	6003      	str	r3, [r0, #0]
 80074fa:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80074fe:	bd38      	pop	{r3, r4, r5, pc}
 8007500:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8007502:	b112      	cbz	r2, 800750a <_raise_r+0x1e>
 8007504:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8007508:	b94b      	cbnz	r3, 800751e <_raise_r+0x32>
 800750a:	4620      	mov	r0, r4
 800750c:	f000 f830 	bl	8007570 <_getpid_r>
 8007510:	462a      	mov	r2, r5
 8007512:	4601      	mov	r1, r0
 8007514:	4620      	mov	r0, r4
 8007516:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800751a:	f000 b817 	b.w	800754c <_kill_r>
 800751e:	2b01      	cmp	r3, #1
 8007520:	d00a      	beq.n	8007538 <_raise_r+0x4c>
 8007522:	1c59      	adds	r1, r3, #1
 8007524:	d103      	bne.n	800752e <_raise_r+0x42>
 8007526:	2316      	movs	r3, #22
 8007528:	6003      	str	r3, [r0, #0]
 800752a:	2001      	movs	r0, #1
 800752c:	e7e7      	b.n	80074fe <_raise_r+0x12>
 800752e:	2400      	movs	r4, #0
 8007530:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8007534:	4628      	mov	r0, r5
 8007536:	4798      	blx	r3
 8007538:	2000      	movs	r0, #0
 800753a:	e7e0      	b.n	80074fe <_raise_r+0x12>

0800753c <raise>:
 800753c:	4b02      	ldr	r3, [pc, #8]	; (8007548 <raise+0xc>)
 800753e:	4601      	mov	r1, r0
 8007540:	6818      	ldr	r0, [r3, #0]
 8007542:	f7ff bfd3 	b.w	80074ec <_raise_r>
 8007546:	bf00      	nop
 8007548:	20000010 	.word	0x20000010

0800754c <_kill_r>:
 800754c:	b538      	push	{r3, r4, r5, lr}
 800754e:	4d07      	ldr	r5, [pc, #28]	; (800756c <_kill_r+0x20>)
 8007550:	2300      	movs	r3, #0
 8007552:	4604      	mov	r4, r0
 8007554:	4608      	mov	r0, r1
 8007556:	4611      	mov	r1, r2
 8007558:	602b      	str	r3, [r5, #0]
 800755a:	f7fa fc57 	bl	8001e0c <_kill>
 800755e:	1c43      	adds	r3, r0, #1
 8007560:	d102      	bne.n	8007568 <_kill_r+0x1c>
 8007562:	682b      	ldr	r3, [r5, #0]
 8007564:	b103      	cbz	r3, 8007568 <_kill_r+0x1c>
 8007566:	6023      	str	r3, [r4, #0]
 8007568:	bd38      	pop	{r3, r4, r5, pc}
 800756a:	bf00      	nop
 800756c:	20000408 	.word	0x20000408

08007570 <_getpid_r>:
 8007570:	f7fa bc44 	b.w	8001dfc <_getpid>

08007574 <_init>:
 8007574:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007576:	bf00      	nop
 8007578:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800757a:	bc08      	pop	{r3}
 800757c:	469e      	mov	lr, r3
 800757e:	4770      	bx	lr

08007580 <_fini>:
 8007580:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007582:	bf00      	nop
 8007584:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007586:	bc08      	pop	{r3}
 8007588:	469e      	mov	lr, r3
 800758a:	4770      	bx	lr
