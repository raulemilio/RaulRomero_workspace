
GTP1_Blinky_IO.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000011a8  080001c4  080001c4  000101c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  0800136c  0800136c  0001136c  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08001384  08001384  00011384  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800138c  0800138c  0001138c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08001390  08001390  00011390  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         0000000c  20000000  08001394  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000060  2000000c  080013a0  0002000c  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  2000006c  080013a0  0002006c  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 10 .debug_info   0000738f  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00001751  00000000  00000000  000273cb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_loc    00003457  00000000  00000000  00028b1c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_aranges 00000550  00000000  00000000  0002bf78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_ranges 000006b8  00000000  00000000  0002c4c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  0001fe5e  00000000  00000000  0002cb80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   00008526  00000000  00000000  0004c9de  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    000c2e23  00000000  00000000  00054f04  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .comment      00000050  00000000  00000000  00117d27  2**0
                  CONTENTS, READONLY
 19 .debug_frame  00000d74  00000000  00000000  00117d78  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	; (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	2000000c 	.word	0x2000000c
 80001e0:	00000000 	.word	0x00000000
 80001e4:	08001354 	.word	0x08001354

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	; (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	; (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	; (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000010 	.word	0x20000010
 8000200:	08001354 	.word	0x08001354

08000204 <__aeabi_uldivmod>:
 8000204:	b953      	cbnz	r3, 800021c <__aeabi_uldivmod+0x18>
 8000206:	b94a      	cbnz	r2, 800021c <__aeabi_uldivmod+0x18>
 8000208:	2900      	cmp	r1, #0
 800020a:	bf08      	it	eq
 800020c:	2800      	cmpeq	r0, #0
 800020e:	bf1c      	itt	ne
 8000210:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000214:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000218:	f000 b974 	b.w	8000504 <__aeabi_idiv0>
 800021c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000220:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000224:	f000 f806 	bl	8000234 <__udivmoddi4>
 8000228:	f8dd e004 	ldr.w	lr, [sp, #4]
 800022c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000230:	b004      	add	sp, #16
 8000232:	4770      	bx	lr

08000234 <__udivmoddi4>:
 8000234:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000238:	9d08      	ldr	r5, [sp, #32]
 800023a:	4604      	mov	r4, r0
 800023c:	468e      	mov	lr, r1
 800023e:	2b00      	cmp	r3, #0
 8000240:	d14d      	bne.n	80002de <__udivmoddi4+0xaa>
 8000242:	428a      	cmp	r2, r1
 8000244:	4694      	mov	ip, r2
 8000246:	d969      	bls.n	800031c <__udivmoddi4+0xe8>
 8000248:	fab2 f282 	clz	r2, r2
 800024c:	b152      	cbz	r2, 8000264 <__udivmoddi4+0x30>
 800024e:	fa01 f302 	lsl.w	r3, r1, r2
 8000252:	f1c2 0120 	rsb	r1, r2, #32
 8000256:	fa20 f101 	lsr.w	r1, r0, r1
 800025a:	fa0c fc02 	lsl.w	ip, ip, r2
 800025e:	ea41 0e03 	orr.w	lr, r1, r3
 8000262:	4094      	lsls	r4, r2
 8000264:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000268:	0c21      	lsrs	r1, r4, #16
 800026a:	fbbe f6f8 	udiv	r6, lr, r8
 800026e:	fa1f f78c 	uxth.w	r7, ip
 8000272:	fb08 e316 	mls	r3, r8, r6, lr
 8000276:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800027a:	fb06 f107 	mul.w	r1, r6, r7
 800027e:	4299      	cmp	r1, r3
 8000280:	d90a      	bls.n	8000298 <__udivmoddi4+0x64>
 8000282:	eb1c 0303 	adds.w	r3, ip, r3
 8000286:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 800028a:	f080 811f 	bcs.w	80004cc <__udivmoddi4+0x298>
 800028e:	4299      	cmp	r1, r3
 8000290:	f240 811c 	bls.w	80004cc <__udivmoddi4+0x298>
 8000294:	3e02      	subs	r6, #2
 8000296:	4463      	add	r3, ip
 8000298:	1a5b      	subs	r3, r3, r1
 800029a:	b2a4      	uxth	r4, r4
 800029c:	fbb3 f0f8 	udiv	r0, r3, r8
 80002a0:	fb08 3310 	mls	r3, r8, r0, r3
 80002a4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002a8:	fb00 f707 	mul.w	r7, r0, r7
 80002ac:	42a7      	cmp	r7, r4
 80002ae:	d90a      	bls.n	80002c6 <__udivmoddi4+0x92>
 80002b0:	eb1c 0404 	adds.w	r4, ip, r4
 80002b4:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80002b8:	f080 810a 	bcs.w	80004d0 <__udivmoddi4+0x29c>
 80002bc:	42a7      	cmp	r7, r4
 80002be:	f240 8107 	bls.w	80004d0 <__udivmoddi4+0x29c>
 80002c2:	4464      	add	r4, ip
 80002c4:	3802      	subs	r0, #2
 80002c6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002ca:	1be4      	subs	r4, r4, r7
 80002cc:	2600      	movs	r6, #0
 80002ce:	b11d      	cbz	r5, 80002d8 <__udivmoddi4+0xa4>
 80002d0:	40d4      	lsrs	r4, r2
 80002d2:	2300      	movs	r3, #0
 80002d4:	e9c5 4300 	strd	r4, r3, [r5]
 80002d8:	4631      	mov	r1, r6
 80002da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002de:	428b      	cmp	r3, r1
 80002e0:	d909      	bls.n	80002f6 <__udivmoddi4+0xc2>
 80002e2:	2d00      	cmp	r5, #0
 80002e4:	f000 80ef 	beq.w	80004c6 <__udivmoddi4+0x292>
 80002e8:	2600      	movs	r6, #0
 80002ea:	e9c5 0100 	strd	r0, r1, [r5]
 80002ee:	4630      	mov	r0, r6
 80002f0:	4631      	mov	r1, r6
 80002f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002f6:	fab3 f683 	clz	r6, r3
 80002fa:	2e00      	cmp	r6, #0
 80002fc:	d14a      	bne.n	8000394 <__udivmoddi4+0x160>
 80002fe:	428b      	cmp	r3, r1
 8000300:	d302      	bcc.n	8000308 <__udivmoddi4+0xd4>
 8000302:	4282      	cmp	r2, r0
 8000304:	f200 80f9 	bhi.w	80004fa <__udivmoddi4+0x2c6>
 8000308:	1a84      	subs	r4, r0, r2
 800030a:	eb61 0303 	sbc.w	r3, r1, r3
 800030e:	2001      	movs	r0, #1
 8000310:	469e      	mov	lr, r3
 8000312:	2d00      	cmp	r5, #0
 8000314:	d0e0      	beq.n	80002d8 <__udivmoddi4+0xa4>
 8000316:	e9c5 4e00 	strd	r4, lr, [r5]
 800031a:	e7dd      	b.n	80002d8 <__udivmoddi4+0xa4>
 800031c:	b902      	cbnz	r2, 8000320 <__udivmoddi4+0xec>
 800031e:	deff      	udf	#255	; 0xff
 8000320:	fab2 f282 	clz	r2, r2
 8000324:	2a00      	cmp	r2, #0
 8000326:	f040 8092 	bne.w	800044e <__udivmoddi4+0x21a>
 800032a:	eba1 010c 	sub.w	r1, r1, ip
 800032e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000332:	fa1f fe8c 	uxth.w	lr, ip
 8000336:	2601      	movs	r6, #1
 8000338:	0c20      	lsrs	r0, r4, #16
 800033a:	fbb1 f3f7 	udiv	r3, r1, r7
 800033e:	fb07 1113 	mls	r1, r7, r3, r1
 8000342:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000346:	fb0e f003 	mul.w	r0, lr, r3
 800034a:	4288      	cmp	r0, r1
 800034c:	d908      	bls.n	8000360 <__udivmoddi4+0x12c>
 800034e:	eb1c 0101 	adds.w	r1, ip, r1
 8000352:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000356:	d202      	bcs.n	800035e <__udivmoddi4+0x12a>
 8000358:	4288      	cmp	r0, r1
 800035a:	f200 80cb 	bhi.w	80004f4 <__udivmoddi4+0x2c0>
 800035e:	4643      	mov	r3, r8
 8000360:	1a09      	subs	r1, r1, r0
 8000362:	b2a4      	uxth	r4, r4
 8000364:	fbb1 f0f7 	udiv	r0, r1, r7
 8000368:	fb07 1110 	mls	r1, r7, r0, r1
 800036c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000370:	fb0e fe00 	mul.w	lr, lr, r0
 8000374:	45a6      	cmp	lr, r4
 8000376:	d908      	bls.n	800038a <__udivmoddi4+0x156>
 8000378:	eb1c 0404 	adds.w	r4, ip, r4
 800037c:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000380:	d202      	bcs.n	8000388 <__udivmoddi4+0x154>
 8000382:	45a6      	cmp	lr, r4
 8000384:	f200 80bb 	bhi.w	80004fe <__udivmoddi4+0x2ca>
 8000388:	4608      	mov	r0, r1
 800038a:	eba4 040e 	sub.w	r4, r4, lr
 800038e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000392:	e79c      	b.n	80002ce <__udivmoddi4+0x9a>
 8000394:	f1c6 0720 	rsb	r7, r6, #32
 8000398:	40b3      	lsls	r3, r6
 800039a:	fa22 fc07 	lsr.w	ip, r2, r7
 800039e:	ea4c 0c03 	orr.w	ip, ip, r3
 80003a2:	fa20 f407 	lsr.w	r4, r0, r7
 80003a6:	fa01 f306 	lsl.w	r3, r1, r6
 80003aa:	431c      	orrs	r4, r3
 80003ac:	40f9      	lsrs	r1, r7
 80003ae:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003b2:	fa00 f306 	lsl.w	r3, r0, r6
 80003b6:	fbb1 f8f9 	udiv	r8, r1, r9
 80003ba:	0c20      	lsrs	r0, r4, #16
 80003bc:	fa1f fe8c 	uxth.w	lr, ip
 80003c0:	fb09 1118 	mls	r1, r9, r8, r1
 80003c4:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003c8:	fb08 f00e 	mul.w	r0, r8, lr
 80003cc:	4288      	cmp	r0, r1
 80003ce:	fa02 f206 	lsl.w	r2, r2, r6
 80003d2:	d90b      	bls.n	80003ec <__udivmoddi4+0x1b8>
 80003d4:	eb1c 0101 	adds.w	r1, ip, r1
 80003d8:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80003dc:	f080 8088 	bcs.w	80004f0 <__udivmoddi4+0x2bc>
 80003e0:	4288      	cmp	r0, r1
 80003e2:	f240 8085 	bls.w	80004f0 <__udivmoddi4+0x2bc>
 80003e6:	f1a8 0802 	sub.w	r8, r8, #2
 80003ea:	4461      	add	r1, ip
 80003ec:	1a09      	subs	r1, r1, r0
 80003ee:	b2a4      	uxth	r4, r4
 80003f0:	fbb1 f0f9 	udiv	r0, r1, r9
 80003f4:	fb09 1110 	mls	r1, r9, r0, r1
 80003f8:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003fc:	fb00 fe0e 	mul.w	lr, r0, lr
 8000400:	458e      	cmp	lr, r1
 8000402:	d908      	bls.n	8000416 <__udivmoddi4+0x1e2>
 8000404:	eb1c 0101 	adds.w	r1, ip, r1
 8000408:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 800040c:	d26c      	bcs.n	80004e8 <__udivmoddi4+0x2b4>
 800040e:	458e      	cmp	lr, r1
 8000410:	d96a      	bls.n	80004e8 <__udivmoddi4+0x2b4>
 8000412:	3802      	subs	r0, #2
 8000414:	4461      	add	r1, ip
 8000416:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800041a:	fba0 9402 	umull	r9, r4, r0, r2
 800041e:	eba1 010e 	sub.w	r1, r1, lr
 8000422:	42a1      	cmp	r1, r4
 8000424:	46c8      	mov	r8, r9
 8000426:	46a6      	mov	lr, r4
 8000428:	d356      	bcc.n	80004d8 <__udivmoddi4+0x2a4>
 800042a:	d053      	beq.n	80004d4 <__udivmoddi4+0x2a0>
 800042c:	b15d      	cbz	r5, 8000446 <__udivmoddi4+0x212>
 800042e:	ebb3 0208 	subs.w	r2, r3, r8
 8000432:	eb61 010e 	sbc.w	r1, r1, lr
 8000436:	fa01 f707 	lsl.w	r7, r1, r7
 800043a:	fa22 f306 	lsr.w	r3, r2, r6
 800043e:	40f1      	lsrs	r1, r6
 8000440:	431f      	orrs	r7, r3
 8000442:	e9c5 7100 	strd	r7, r1, [r5]
 8000446:	2600      	movs	r6, #0
 8000448:	4631      	mov	r1, r6
 800044a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800044e:	f1c2 0320 	rsb	r3, r2, #32
 8000452:	40d8      	lsrs	r0, r3
 8000454:	fa0c fc02 	lsl.w	ip, ip, r2
 8000458:	fa21 f303 	lsr.w	r3, r1, r3
 800045c:	4091      	lsls	r1, r2
 800045e:	4301      	orrs	r1, r0
 8000460:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000464:	fa1f fe8c 	uxth.w	lr, ip
 8000468:	fbb3 f0f7 	udiv	r0, r3, r7
 800046c:	fb07 3610 	mls	r6, r7, r0, r3
 8000470:	0c0b      	lsrs	r3, r1, #16
 8000472:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000476:	fb00 f60e 	mul.w	r6, r0, lr
 800047a:	429e      	cmp	r6, r3
 800047c:	fa04 f402 	lsl.w	r4, r4, r2
 8000480:	d908      	bls.n	8000494 <__udivmoddi4+0x260>
 8000482:	eb1c 0303 	adds.w	r3, ip, r3
 8000486:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 800048a:	d22f      	bcs.n	80004ec <__udivmoddi4+0x2b8>
 800048c:	429e      	cmp	r6, r3
 800048e:	d92d      	bls.n	80004ec <__udivmoddi4+0x2b8>
 8000490:	3802      	subs	r0, #2
 8000492:	4463      	add	r3, ip
 8000494:	1b9b      	subs	r3, r3, r6
 8000496:	b289      	uxth	r1, r1
 8000498:	fbb3 f6f7 	udiv	r6, r3, r7
 800049c:	fb07 3316 	mls	r3, r7, r6, r3
 80004a0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004a4:	fb06 f30e 	mul.w	r3, r6, lr
 80004a8:	428b      	cmp	r3, r1
 80004aa:	d908      	bls.n	80004be <__udivmoddi4+0x28a>
 80004ac:	eb1c 0101 	adds.w	r1, ip, r1
 80004b0:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 80004b4:	d216      	bcs.n	80004e4 <__udivmoddi4+0x2b0>
 80004b6:	428b      	cmp	r3, r1
 80004b8:	d914      	bls.n	80004e4 <__udivmoddi4+0x2b0>
 80004ba:	3e02      	subs	r6, #2
 80004bc:	4461      	add	r1, ip
 80004be:	1ac9      	subs	r1, r1, r3
 80004c0:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004c4:	e738      	b.n	8000338 <__udivmoddi4+0x104>
 80004c6:	462e      	mov	r6, r5
 80004c8:	4628      	mov	r0, r5
 80004ca:	e705      	b.n	80002d8 <__udivmoddi4+0xa4>
 80004cc:	4606      	mov	r6, r0
 80004ce:	e6e3      	b.n	8000298 <__udivmoddi4+0x64>
 80004d0:	4618      	mov	r0, r3
 80004d2:	e6f8      	b.n	80002c6 <__udivmoddi4+0x92>
 80004d4:	454b      	cmp	r3, r9
 80004d6:	d2a9      	bcs.n	800042c <__udivmoddi4+0x1f8>
 80004d8:	ebb9 0802 	subs.w	r8, r9, r2
 80004dc:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004e0:	3801      	subs	r0, #1
 80004e2:	e7a3      	b.n	800042c <__udivmoddi4+0x1f8>
 80004e4:	4646      	mov	r6, r8
 80004e6:	e7ea      	b.n	80004be <__udivmoddi4+0x28a>
 80004e8:	4620      	mov	r0, r4
 80004ea:	e794      	b.n	8000416 <__udivmoddi4+0x1e2>
 80004ec:	4640      	mov	r0, r8
 80004ee:	e7d1      	b.n	8000494 <__udivmoddi4+0x260>
 80004f0:	46d0      	mov	r8, sl
 80004f2:	e77b      	b.n	80003ec <__udivmoddi4+0x1b8>
 80004f4:	3b02      	subs	r3, #2
 80004f6:	4461      	add	r1, ip
 80004f8:	e732      	b.n	8000360 <__udivmoddi4+0x12c>
 80004fa:	4630      	mov	r0, r6
 80004fc:	e709      	b.n	8000312 <__udivmoddi4+0xde>
 80004fe:	4464      	add	r4, ip
 8000500:	3802      	subs	r0, #2
 8000502:	e742      	b.n	800038a <__udivmoddi4+0x156>

08000504 <__aeabi_idiv0>:
 8000504:	4770      	bx	lr
 8000506:	bf00      	nop

08000508 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000508:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800050a:	4a0e      	ldr	r2, [pc, #56]	; (8000544 <HAL_InitTick+0x3c>)
 800050c:	4b0e      	ldr	r3, [pc, #56]	; (8000548 <HAL_InitTick+0x40>)
{
 800050e:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000510:	7818      	ldrb	r0, [r3, #0]
 8000512:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000516:	fbb3 f3f0 	udiv	r3, r3, r0
 800051a:	6810      	ldr	r0, [r2, #0]
 800051c:	fbb0 f0f3 	udiv	r0, r0, r3
 8000520:	f000 f886 	bl	8000630 <HAL_SYSTICK_Config>
 8000524:	4604      	mov	r4, r0
 8000526:	b958      	cbnz	r0, 8000540 <HAL_InitTick+0x38>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000528:	2d0f      	cmp	r5, #15
 800052a:	d809      	bhi.n	8000540 <HAL_InitTick+0x38>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800052c:	4602      	mov	r2, r0
 800052e:	4629      	mov	r1, r5
 8000530:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000534:	f000 f84a 	bl	80005cc <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000538:	4b04      	ldr	r3, [pc, #16]	; (800054c <HAL_InitTick+0x44>)
 800053a:	4620      	mov	r0, r4
 800053c:	601d      	str	r5, [r3, #0]
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 800053e:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8000540:	2001      	movs	r0, #1
 8000542:	e7fc      	b.n	800053e <HAL_InitTick+0x36>
 8000544:	20000008 	.word	0x20000008
 8000548:	20000000 	.word	0x20000000
 800054c:	20000004 	.word	0x20000004

08000550 <HAL_Init>:
{
 8000550:	b508      	push	{r3, lr}
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000552:	4b0b      	ldr	r3, [pc, #44]	; (8000580 <HAL_Init+0x30>)
 8000554:	681a      	ldr	r2, [r3, #0]
 8000556:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800055a:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800055c:	681a      	ldr	r2, [r3, #0]
 800055e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8000562:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000564:	681a      	ldr	r2, [r3, #0]
 8000566:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800056a:	601a      	str	r2, [r3, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800056c:	2003      	movs	r0, #3
 800056e:	f000 f81b 	bl	80005a8 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8000572:	2000      	movs	r0, #0
 8000574:	f7ff ffc8 	bl	8000508 <HAL_InitTick>
  HAL_MspInit();
 8000578:	f000 fe10 	bl	800119c <HAL_MspInit>
}
 800057c:	2000      	movs	r0, #0
 800057e:	bd08      	pop	{r3, pc}
 8000580:	40023c00 	.word	0x40023c00

08000584 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8000584:	4a03      	ldr	r2, [pc, #12]	; (8000594 <HAL_IncTick+0x10>)
 8000586:	4b04      	ldr	r3, [pc, #16]	; (8000598 <HAL_IncTick+0x14>)
 8000588:	6811      	ldr	r1, [r2, #0]
 800058a:	781b      	ldrb	r3, [r3, #0]
 800058c:	440b      	add	r3, r1
 800058e:	6013      	str	r3, [r2, #0]
}
 8000590:	4770      	bx	lr
 8000592:	bf00      	nop
 8000594:	20000028 	.word	0x20000028
 8000598:	20000000 	.word	0x20000000

0800059c <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 800059c:	4b01      	ldr	r3, [pc, #4]	; (80005a4 <HAL_GetTick+0x8>)
 800059e:	6818      	ldr	r0, [r3, #0]
}
 80005a0:	4770      	bx	lr
 80005a2:	bf00      	nop
 80005a4:	20000028 	.word	0x20000028

080005a8 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80005a8:	4907      	ldr	r1, [pc, #28]	; (80005c8 <HAL_NVIC_SetPriorityGrouping+0x20>)
 80005aa:	68ca      	ldr	r2, [r1, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80005ac:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80005b0:	0203      	lsls	r3, r0, #8
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80005b2:	0412      	lsls	r2, r2, #16
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80005b4:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80005b8:	0c12      	lsrs	r2, r2, #16
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80005ba:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80005bc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80005c0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 80005c4:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 80005c6:	4770      	bx	lr
 80005c8:	e000ed00 	.word	0xe000ed00

080005cc <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80005cc:	4b16      	ldr	r3, [pc, #88]	; (8000628 <HAL_NVIC_SetPriority+0x5c>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80005ce:	b530      	push	{r4, r5, lr}
 80005d0:	68dc      	ldr	r4, [r3, #12]
 80005d2:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80005d6:	f1c4 0507 	rsb	r5, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80005da:	1d23      	adds	r3, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80005dc:	2d04      	cmp	r5, #4
 80005de:	bf28      	it	cs
 80005e0:	2504      	movcs	r5, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80005e2:	2b06      	cmp	r3, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80005e4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80005e8:	bf8c      	ite	hi
 80005ea:	3c03      	subhi	r4, #3
 80005ec:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80005ee:	fa03 f505 	lsl.w	r5, r3, r5
 80005f2:	ea21 0105 	bic.w	r1, r1, r5
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80005f6:	40a3      	lsls	r3, r4
 80005f8:	ea22 0203 	bic.w	r2, r2, r3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80005fc:	40a1      	lsls	r1, r4
  if ((int32_t)(IRQn) >= 0)
 80005fe:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000600:	ea41 0302 	orr.w	r3, r1, r2
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000604:	bfac      	ite	ge
 8000606:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800060a:	4a08      	ldrlt	r2, [pc, #32]	; (800062c <HAL_NVIC_SetPriority+0x60>)
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800060c:	ea4f 1303 	mov.w	r3, r3, lsl #4
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000610:	bfb8      	it	lt
 8000612:	f000 000f 	andlt.w	r0, r0, #15
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000616:	b2db      	uxtb	r3, r3
 8000618:	bfaa      	itet	ge
 800061a:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800061e:	5413      	strblt	r3, [r2, r0]
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000620:	f880 3300 	strbge.w	r3, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8000624:	bd30      	pop	{r4, r5, pc}
 8000626:	bf00      	nop
 8000628:	e000ed00 	.word	0xe000ed00
 800062c:	e000ed14 	.word	0xe000ed14

08000630 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000630:	3801      	subs	r0, #1
 8000632:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000636:	d20b      	bcs.n	8000650 <HAL_SYSTICK_Config+0x20>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000638:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800063c:	4a05      	ldr	r2, [pc, #20]	; (8000654 <HAL_SYSTICK_Config+0x24>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800063e:	6158      	str	r0, [r3, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000640:	21f0      	movs	r1, #240	; 0xf0
 8000642:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000646:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000648:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800064a:	6198      	str	r0, [r3, #24]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800064c:	611a      	str	r2, [r3, #16]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800064e:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8000650:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8000652:	4770      	bx	lr
 8000654:	e000ed00 	.word	0xe000ed00

08000658 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000658:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2U] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800065c:	4a6b      	ldr	r2, [pc, #428]	; (800080c <HAL_GPIO_Init+0x1b4>)
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800065e:	f8df 81b4 	ldr.w	r8, [pc, #436]	; 8000814 <HAL_GPIO_Init+0x1bc>
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000662:	f8df 91b4 	ldr.w	r9, [pc, #436]	; 8000818 <HAL_GPIO_Init+0x1c0>
{
 8000666:	b085      	sub	sp, #20
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000668:	2300      	movs	r3, #0
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800066a:	680c      	ldr	r4, [r1, #0]
    ioposition = 0x01U << position;
 800066c:	2701      	movs	r7, #1
 800066e:	409f      	lsls	r7, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000670:	ea07 0504 	and.w	r5, r7, r4
    if(iocurrent == ioposition)
 8000674:	ea37 0404 	bics.w	r4, r7, r4
 8000678:	f040 80b5 	bne.w	80007e6 <HAL_GPIO_Init+0x18e>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800067c:	684c      	ldr	r4, [r1, #4]
 800067e:	f024 0a10 	bic.w	sl, r4, #16
 8000682:	f1ba 0f02 	cmp.w	sl, #2
 8000686:	d116      	bne.n	80006b6 <HAL_GPIO_Init+0x5e>
        temp = GPIOx->AFR[position >> 3U];
 8000688:	ea4f 0ed3 	mov.w	lr, r3, lsr #3
 800068c:	eb00 0e8e 	add.w	lr, r0, lr, lsl #2
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000690:	f003 0b07 	and.w	fp, r3, #7
        temp = GPIOx->AFR[position >> 3U];
 8000694:	f8de 6020 	ldr.w	r6, [lr, #32]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000698:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
 800069c:	f04f 0c0f 	mov.w	ip, #15
 80006a0:	fa0c fc0b 	lsl.w	ip, ip, fp
 80006a4:	ea26 0c0c 	bic.w	ip, r6, ip
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80006a8:	690e      	ldr	r6, [r1, #16]
 80006aa:	fa06 f60b 	lsl.w	r6, r6, fp
 80006ae:	ea46 060c 	orr.w	r6, r6, ip
        GPIOx->AFR[position >> 3U] = temp;
 80006b2:	f8ce 6020 	str.w	r6, [lr, #32]
      temp = GPIOx->MODER;
 80006b6:	f8d0 b000 	ldr.w	fp, [r0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80006ba:	ea4f 0e43 	mov.w	lr, r3, lsl #1
 80006be:	f04f 0c03 	mov.w	ip, #3
 80006c2:	fa0c fc0e 	lsl.w	ip, ip, lr
 80006c6:	ea6f 060c 	mvn.w	r6, ip
 80006ca:	ea2b 0b0c 	bic.w	fp, fp, ip
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80006ce:	f004 0c03 	and.w	ip, r4, #3
 80006d2:	fa0c fc0e 	lsl.w	ip, ip, lr
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80006d6:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80006da:	ea4c 0c0b 	orr.w	ip, ip, fp
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80006de:	f1ba 0f01 	cmp.w	sl, #1
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80006e2:	9601      	str	r6, [sp, #4]
      GPIOx->MODER = temp;
 80006e4:	f8c0 c000 	str.w	ip, [r0]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80006e8:	d815      	bhi.n	8000716 <HAL_GPIO_Init+0xbe>
        temp = GPIOx->OSPEEDR; 
 80006ea:	f8d0 c008 	ldr.w	ip, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80006ee:	ea06 0c0c 	and.w	ip, r6, ip
        temp |= (GPIO_Init->Speed << (position * 2U));
 80006f2:	68ce      	ldr	r6, [r1, #12]
 80006f4:	fa06 fa0e 	lsl.w	sl, r6, lr
 80006f8:	ea4a 0c0c 	orr.w	ip, sl, ip
        GPIOx->OSPEEDR = temp;
 80006fc:	f8c0 c008 	str.w	ip, [r0, #8]
        temp = GPIOx->OTYPER;
 8000700:	f8d0 c004 	ldr.w	ip, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000704:	ea2c 0707 	bic.w	r7, ip, r7
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000708:	f3c4 1c00 	ubfx	ip, r4, #4, #1
 800070c:	fa0c fc03 	lsl.w	ip, ip, r3
 8000710:	ea4c 0707 	orr.w	r7, ip, r7
        GPIOx->OTYPER = temp;
 8000714:	6047      	str	r7, [r0, #4]
      temp = GPIOx->PUPDR;
 8000716:	68c7      	ldr	r7, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000718:	9e01      	ldr	r6, [sp, #4]
 800071a:	4037      	ands	r7, r6
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800071c:	688e      	ldr	r6, [r1, #8]
 800071e:	fa06 f60e 	lsl.w	r6, r6, lr
 8000722:	433e      	orrs	r6, r7
      GPIOx->PUPDR = temp;
 8000724:	60c6      	str	r6, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000726:	00e6      	lsls	r6, r4, #3
 8000728:	d55d      	bpl.n	80007e6 <HAL_GPIO_Init+0x18e>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800072a:	f04f 0b00 	mov.w	fp, #0
 800072e:	f8cd b00c 	str.w	fp, [sp, #12]
 8000732:	f8d8 7044 	ldr.w	r7, [r8, #68]	; 0x44
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000736:	4e36      	ldr	r6, [pc, #216]	; (8000810 <HAL_GPIO_Init+0x1b8>)
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000738:	f447 4780 	orr.w	r7, r7, #16384	; 0x4000
 800073c:	f8c8 7044 	str.w	r7, [r8, #68]	; 0x44
 8000740:	f8d8 7044 	ldr.w	r7, [r8, #68]	; 0x44
 8000744:	f407 4780 	and.w	r7, r7, #16384	; 0x4000
 8000748:	9703      	str	r7, [sp, #12]
 800074a:	9f03      	ldr	r7, [sp, #12]
        temp = SYSCFG->EXTICR[position >> 2U];
 800074c:	f023 0703 	bic.w	r7, r3, #3
 8000750:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
 8000754:	f507 379c 	add.w	r7, r7, #79872	; 0x13800
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000758:	f003 0e03 	and.w	lr, r3, #3
        temp = SYSCFG->EXTICR[position >> 2U];
 800075c:	f8d7 a008 	ldr.w	sl, [r7, #8]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000760:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 8000764:	f04f 0c0f 	mov.w	ip, #15
 8000768:	fa0c fc0e 	lsl.w	ip, ip, lr
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800076c:	42b0      	cmp	r0, r6
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800076e:	ea2a 0c0c 	bic.w	ip, sl, ip
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000772:	d03f      	beq.n	80007f4 <HAL_GPIO_Init+0x19c>
 8000774:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8000778:	42b0      	cmp	r0, r6
 800077a:	d03d      	beq.n	80007f8 <HAL_GPIO_Init+0x1a0>
 800077c:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8000780:	42b0      	cmp	r0, r6
 8000782:	d03b      	beq.n	80007fc <HAL_GPIO_Init+0x1a4>
 8000784:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8000788:	42b0      	cmp	r0, r6
 800078a:	d039      	beq.n	8000800 <HAL_GPIO_Init+0x1a8>
 800078c:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8000790:	42b0      	cmp	r0, r6
 8000792:	d037      	beq.n	8000804 <HAL_GPIO_Init+0x1ac>
 8000794:	4548      	cmp	r0, r9
 8000796:	d037      	beq.n	8000808 <HAL_GPIO_Init+0x1b0>
 8000798:	f506 6600 	add.w	r6, r6, #2048	; 0x800
 800079c:	42b0      	cmp	r0, r6
 800079e:	bf0c      	ite	eq
 80007a0:	2606      	moveq	r6, #6
 80007a2:	2607      	movne	r6, #7
 80007a4:	fa06 f60e 	lsl.w	r6, r6, lr
 80007a8:	ea46 060c 	orr.w	r6, r6, ip
        SYSCFG->EXTICR[position >> 2U] = temp;
 80007ac:	60be      	str	r6, [r7, #8]
        temp = EXTI->IMR;
 80007ae:	6816      	ldr	r6, [r2, #0]
        temp &= ~((uint32_t)iocurrent);
 80007b0:	43ef      	mvns	r7, r5
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80007b2:	f414 3f80 	tst.w	r4, #65536	; 0x10000
        temp &= ~((uint32_t)iocurrent);
 80007b6:	bf0c      	ite	eq
 80007b8:	403e      	andeq	r6, r7
        {
          temp |= iocurrent;
 80007ba:	432e      	orrne	r6, r5
        }
        EXTI->IMR = temp;
 80007bc:	6016      	str	r6, [r2, #0]

        temp = EXTI->EMR;
 80007be:	6856      	ldr	r6, [r2, #4]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80007c0:	f414 3f00 	tst.w	r4, #131072	; 0x20000
        temp &= ~((uint32_t)iocurrent);
 80007c4:	bf0c      	ite	eq
 80007c6:	403e      	andeq	r6, r7
        {
          temp |= iocurrent;
 80007c8:	432e      	orrne	r6, r5
        }
        EXTI->EMR = temp;
 80007ca:	6056      	str	r6, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80007cc:	6896      	ldr	r6, [r2, #8]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80007ce:	f414 1f80 	tst.w	r4, #1048576	; 0x100000
        temp &= ~((uint32_t)iocurrent);
 80007d2:	bf0c      	ite	eq
 80007d4:	403e      	andeq	r6, r7
        {
          temp |= iocurrent;
 80007d6:	432e      	orrne	r6, r5
        }
        EXTI->RTSR = temp;
 80007d8:	6096      	str	r6, [r2, #8]

        temp = EXTI->FTSR;
 80007da:	68d6      	ldr	r6, [r2, #12]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80007dc:	02a4      	lsls	r4, r4, #10
        temp &= ~((uint32_t)iocurrent);
 80007de:	bf54      	ite	pl
 80007e0:	403e      	andpl	r6, r7
        {
          temp |= iocurrent;
 80007e2:	432e      	orrmi	r6, r5
        }
        EXTI->FTSR = temp;
 80007e4:	60d6      	str	r6, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80007e6:	3301      	adds	r3, #1
 80007e8:	2b10      	cmp	r3, #16
 80007ea:	f47f af3e 	bne.w	800066a <HAL_GPIO_Init+0x12>
      }
    }
  }
}
 80007ee:	b005      	add	sp, #20
 80007f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80007f4:	465e      	mov	r6, fp
 80007f6:	e7d5      	b.n	80007a4 <HAL_GPIO_Init+0x14c>
 80007f8:	2601      	movs	r6, #1
 80007fa:	e7d3      	b.n	80007a4 <HAL_GPIO_Init+0x14c>
 80007fc:	2602      	movs	r6, #2
 80007fe:	e7d1      	b.n	80007a4 <HAL_GPIO_Init+0x14c>
 8000800:	2603      	movs	r6, #3
 8000802:	e7cf      	b.n	80007a4 <HAL_GPIO_Init+0x14c>
 8000804:	2604      	movs	r6, #4
 8000806:	e7cd      	b.n	80007a4 <HAL_GPIO_Init+0x14c>
 8000808:	2605      	movs	r6, #5
 800080a:	e7cb      	b.n	80007a4 <HAL_GPIO_Init+0x14c>
 800080c:	40013c00 	.word	0x40013c00
 8000810:	40020000 	.word	0x40020000
 8000814:	40023800 	.word	0x40023800
 8000818:	40021400 	.word	0x40021400

0800081c <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800081c:	6903      	ldr	r3, [r0, #16]
 800081e:	4219      	tst	r1, r3
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
}
 8000820:	bf14      	ite	ne
 8000822:	2001      	movne	r0, #1
 8000824:	2000      	moveq	r0, #0
 8000826:	4770      	bx	lr

08000828 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000828:	b10a      	cbz	r2, 800082e <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800082a:	6181      	str	r1, [r0, #24]
  }
}
 800082c:	4770      	bx	lr
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800082e:	0409      	lsls	r1, r1, #16
 8000830:	e7fb      	b.n	800082a <HAL_GPIO_WritePin+0x2>
	...

08000834 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8000834:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000838:	460d      	mov	r5, r1
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800083a:	4604      	mov	r4, r0
 800083c:	b910      	cbnz	r0, 8000844 <HAL_RCC_ClockConfig+0x10>
  {
    return HAL_ERROR;
 800083e:	2001      	movs	r0, #1

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (TICK_INT_PRIORITY);

  return HAL_OK;
}
 8000840:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8000844:	4b43      	ldr	r3, [pc, #268]	; (8000954 <HAL_RCC_ClockConfig+0x120>)
 8000846:	681a      	ldr	r2, [r3, #0]
 8000848:	f002 020f 	and.w	r2, r2, #15
 800084c:	428a      	cmp	r2, r1
 800084e:	d327      	bcc.n	80008a0 <HAL_RCC_ClockConfig+0x6c>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8000850:	6822      	ldr	r2, [r4, #0]
 8000852:	0797      	lsls	r7, r2, #30
 8000854:	d42c      	bmi.n	80008b0 <HAL_RCC_ClockConfig+0x7c>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8000856:	07d0      	lsls	r0, r2, #31
 8000858:	d440      	bmi.n	80008dc <HAL_RCC_ClockConfig+0xa8>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800085a:	4b3e      	ldr	r3, [pc, #248]	; (8000954 <HAL_RCC_ClockConfig+0x120>)
 800085c:	681a      	ldr	r2, [r3, #0]
 800085e:	f002 020f 	and.w	r2, r2, #15
 8000862:	42aa      	cmp	r2, r5
 8000864:	d865      	bhi.n	8000932 <HAL_RCC_ClockConfig+0xfe>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000866:	6822      	ldr	r2, [r4, #0]
 8000868:	0751      	lsls	r1, r2, #29
 800086a:	d46b      	bmi.n	8000944 <HAL_RCC_ClockConfig+0x110>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800086c:	0713      	lsls	r3, r2, #28
 800086e:	d507      	bpl.n	8000880 <HAL_RCC_ClockConfig+0x4c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8000870:	4a39      	ldr	r2, [pc, #228]	; (8000958 <HAL_RCC_ClockConfig+0x124>)
 8000872:	6921      	ldr	r1, [r4, #16]
 8000874:	6893      	ldr	r3, [r2, #8]
 8000876:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 800087a:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 800087e:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8000880:	f000 f890 	bl	80009a4 <HAL_RCC_GetSysClockFreq>
 8000884:	4b34      	ldr	r3, [pc, #208]	; (8000958 <HAL_RCC_ClockConfig+0x124>)
 8000886:	4a35      	ldr	r2, [pc, #212]	; (800095c <HAL_RCC_ClockConfig+0x128>)
 8000888:	689b      	ldr	r3, [r3, #8]
 800088a:	f3c3 1303 	ubfx	r3, r3, #4, #4
 800088e:	5cd3      	ldrb	r3, [r2, r3]
 8000890:	40d8      	lsrs	r0, r3
 8000892:	4b33      	ldr	r3, [pc, #204]	; (8000960 <HAL_RCC_ClockConfig+0x12c>)
 8000894:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 8000896:	2000      	movs	r0, #0
 8000898:	f7ff fe36 	bl	8000508 <HAL_InitTick>
  return HAL_OK;
 800089c:	2000      	movs	r0, #0
 800089e:	e7cf      	b.n	8000840 <HAL_RCC_ClockConfig+0xc>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80008a0:	b2ca      	uxtb	r2, r1
 80008a2:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80008a4:	681b      	ldr	r3, [r3, #0]
 80008a6:	f003 030f 	and.w	r3, r3, #15
 80008aa:	428b      	cmp	r3, r1
 80008ac:	d1c7      	bne.n	800083e <HAL_RCC_ClockConfig+0xa>
 80008ae:	e7cf      	b.n	8000850 <HAL_RCC_ClockConfig+0x1c>
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80008b0:	4b29      	ldr	r3, [pc, #164]	; (8000958 <HAL_RCC_ClockConfig+0x124>)
 80008b2:	f012 0f04 	tst.w	r2, #4
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80008b6:	bf1e      	ittt	ne
 80008b8:	6899      	ldrne	r1, [r3, #8]
 80008ba:	f441 51e0 	orrne.w	r1, r1, #7168	; 0x1c00
 80008be:	6099      	strne	r1, [r3, #8]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80008c0:	0716      	lsls	r6, r2, #28
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80008c2:	bf42      	ittt	mi
 80008c4:	6899      	ldrmi	r1, [r3, #8]
 80008c6:	f441 4160 	orrmi.w	r1, r1, #57344	; 0xe000
 80008ca:	6099      	strmi	r1, [r3, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80008cc:	4922      	ldr	r1, [pc, #136]	; (8000958 <HAL_RCC_ClockConfig+0x124>)
 80008ce:	68a0      	ldr	r0, [r4, #8]
 80008d0:	688b      	ldr	r3, [r1, #8]
 80008d2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80008d6:	4303      	orrs	r3, r0
 80008d8:	608b      	str	r3, [r1, #8]
 80008da:	e7bc      	b.n	8000856 <HAL_RCC_ClockConfig+0x22>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80008dc:	6862      	ldr	r2, [r4, #4]
 80008de:	4b1e      	ldr	r3, [pc, #120]	; (8000958 <HAL_RCC_ClockConfig+0x124>)
 80008e0:	2a01      	cmp	r2, #1
 80008e2:	d11c      	bne.n	800091e <HAL_RCC_ClockConfig+0xea>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80008e4:	681b      	ldr	r3, [r3, #0]
 80008e6:	f413 3f00 	tst.w	r3, #131072	; 0x20000
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80008ea:	d0a8      	beq.n	800083e <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80008ec:	4e1a      	ldr	r6, [pc, #104]	; (8000958 <HAL_RCC_ClockConfig+0x124>)
 80008ee:	68b3      	ldr	r3, [r6, #8]
 80008f0:	f023 0303 	bic.w	r3, r3, #3
 80008f4:	4313      	orrs	r3, r2
 80008f6:	60b3      	str	r3, [r6, #8]
    tickstart = HAL_GetTick();
 80008f8:	f7ff fe50 	bl	800059c <HAL_GetTick>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80008fc:	f241 3888 	movw	r8, #5000	; 0x1388
    tickstart = HAL_GetTick();
 8000900:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8000902:	68b3      	ldr	r3, [r6, #8]
 8000904:	6862      	ldr	r2, [r4, #4]
 8000906:	f003 030c 	and.w	r3, r3, #12
 800090a:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 800090e:	d0a4      	beq.n	800085a <HAL_RCC_ClockConfig+0x26>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000910:	f7ff fe44 	bl	800059c <HAL_GetTick>
 8000914:	1bc0      	subs	r0, r0, r7
 8000916:	4540      	cmp	r0, r8
 8000918:	d9f3      	bls.n	8000902 <HAL_RCC_ClockConfig+0xce>
        return HAL_TIMEOUT;
 800091a:	2003      	movs	r0, #3
 800091c:	e790      	b.n	8000840 <HAL_RCC_ClockConfig+0xc>
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800091e:	1e91      	subs	r1, r2, #2
 8000920:	2901      	cmp	r1, #1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000922:	681b      	ldr	r3, [r3, #0]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8000924:	d802      	bhi.n	800092c <HAL_RCC_ClockConfig+0xf8>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000926:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 800092a:	e7de      	b.n	80008ea <HAL_RCC_ClockConfig+0xb6>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800092c:	f013 0f02 	tst.w	r3, #2
 8000930:	e7db      	b.n	80008ea <HAL_RCC_ClockConfig+0xb6>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000932:	b2ea      	uxtb	r2, r5
 8000934:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8000936:	681b      	ldr	r3, [r3, #0]
 8000938:	f003 030f 	and.w	r3, r3, #15
 800093c:	42ab      	cmp	r3, r5
 800093e:	f47f af7e 	bne.w	800083e <HAL_RCC_ClockConfig+0xa>
 8000942:	e790      	b.n	8000866 <HAL_RCC_ClockConfig+0x32>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8000944:	4904      	ldr	r1, [pc, #16]	; (8000958 <HAL_RCC_ClockConfig+0x124>)
 8000946:	68e0      	ldr	r0, [r4, #12]
 8000948:	688b      	ldr	r3, [r1, #8]
 800094a:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 800094e:	4303      	orrs	r3, r0
 8000950:	608b      	str	r3, [r1, #8]
 8000952:	e78b      	b.n	800086c <HAL_RCC_ClockConfig+0x38>
 8000954:	40023c00 	.word	0x40023c00
 8000958:	40023800 	.word	0x40023800
 800095c:	0800136c 	.word	0x0800136c
 8000960:	20000008 	.word	0x20000008

08000964 <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8000964:	4b04      	ldr	r3, [pc, #16]	; (8000978 <HAL_RCC_GetPCLK1Freq+0x14>)
 8000966:	4a05      	ldr	r2, [pc, #20]	; (800097c <HAL_RCC_GetPCLK1Freq+0x18>)
 8000968:	689b      	ldr	r3, [r3, #8]
 800096a:	f3c3 2382 	ubfx	r3, r3, #10, #3
 800096e:	5cd3      	ldrb	r3, [r2, r3]
 8000970:	4a03      	ldr	r2, [pc, #12]	; (8000980 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8000972:	6810      	ldr	r0, [r2, #0]
}
 8000974:	40d8      	lsrs	r0, r3
 8000976:	4770      	bx	lr
 8000978:	40023800 	.word	0x40023800
 800097c:	0800137c 	.word	0x0800137c
 8000980:	20000008 	.word	0x20000008

08000984 <HAL_RCC_GetPCLK2Freq>:
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8000984:	4b04      	ldr	r3, [pc, #16]	; (8000998 <HAL_RCC_GetPCLK2Freq+0x14>)
 8000986:	4a05      	ldr	r2, [pc, #20]	; (800099c <HAL_RCC_GetPCLK2Freq+0x18>)
 8000988:	689b      	ldr	r3, [r3, #8]
 800098a:	f3c3 3342 	ubfx	r3, r3, #13, #3
 800098e:	5cd3      	ldrb	r3, [r2, r3]
 8000990:	4a03      	ldr	r2, [pc, #12]	; (80009a0 <HAL_RCC_GetPCLK2Freq+0x1c>)
 8000992:	6810      	ldr	r0, [r2, #0]
}
 8000994:	40d8      	lsrs	r0, r3
 8000996:	4770      	bx	lr
 8000998:	40023800 	.word	0x40023800
 800099c:	0800137c 	.word	0x0800137c
 80009a0:	20000008 	.word	0x20000008

080009a4 <HAL_RCC_GetSysClockFreq>:
  uint32_t pllp = 0U;
  uint32_t pllr = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80009a4:	4920      	ldr	r1, [pc, #128]	; (8000a28 <HAL_RCC_GetSysClockFreq+0x84>)
{
 80009a6:	b508      	push	{r3, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80009a8:	688b      	ldr	r3, [r1, #8]
 80009aa:	f003 030c 	and.w	r3, r3, #12
 80009ae:	2b08      	cmp	r3, #8
 80009b0:	d007      	beq.n	80009c2 <HAL_RCC_GetSysClockFreq+0x1e>
 80009b2:	2b0c      	cmp	r3, #12
 80009b4:	d020      	beq.n	80009f8 <HAL_RCC_GetSysClockFreq+0x54>
 80009b6:	481d      	ldr	r0, [pc, #116]	; (8000a2c <HAL_RCC_GetSysClockFreq+0x88>)
 80009b8:	4a1d      	ldr	r2, [pc, #116]	; (8000a30 <HAL_RCC_GetSysClockFreq+0x8c>)
 80009ba:	2b04      	cmp	r3, #4
 80009bc:	bf08      	it	eq
 80009be:	4610      	moveq	r0, r2
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 80009c0:	bd08      	pop	{r3, pc}
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80009c2:	684a      	ldr	r2, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80009c4:	684b      	ldr	r3, [r1, #4]
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80009c6:	6849      	ldr	r1, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80009c8:	f413 0380 	ands.w	r3, r3, #4194304	; 0x400000
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80009cc:	bf14      	ite	ne
 80009ce:	4818      	ldrne	r0, [pc, #96]	; (8000a30 <HAL_RCC_GetSysClockFreq+0x8c>)
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80009d0:	4816      	ldreq	r0, [pc, #88]	; (8000a2c <HAL_RCC_GetSysClockFreq+0x88>)
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80009d2:	f3c1 1188 	ubfx	r1, r1, #6, #9
 80009d6:	bf18      	it	ne
 80009d8:	2300      	movne	r3, #0
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80009da:	f002 023f 	and.w	r2, r2, #63	; 0x3f
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80009de:	fba1 0100 	umull	r0, r1, r1, r0
 80009e2:	f7ff fc0f 	bl	8000204 <__aeabi_uldivmod>
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80009e6:	4b10      	ldr	r3, [pc, #64]	; (8000a28 <HAL_RCC_GetSysClockFreq+0x84>)
 80009e8:	685b      	ldr	r3, [r3, #4]
 80009ea:	f3c3 4301 	ubfx	r3, r3, #16, #2
 80009ee:	3301      	adds	r3, #1
 80009f0:	005b      	lsls	r3, r3, #1
      sysclockfreq = pllvco/pllr;
 80009f2:	fbb0 f0f3 	udiv	r0, r0, r3
      break;
 80009f6:	e7e3      	b.n	80009c0 <HAL_RCC_GetSysClockFreq+0x1c>
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80009f8:	684a      	ldr	r2, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80009fa:	684b      	ldr	r3, [r1, #4]
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80009fc:	6849      	ldr	r1, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80009fe:	f413 0380 	ands.w	r3, r3, #4194304	; 0x400000
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8000a02:	bf14      	ite	ne
 8000a04:	480a      	ldrne	r0, [pc, #40]	; (8000a30 <HAL_RCC_GetSysClockFreq+0x8c>)
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8000a06:	4809      	ldreq	r0, [pc, #36]	; (8000a2c <HAL_RCC_GetSysClockFreq+0x88>)
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8000a08:	f3c1 1188 	ubfx	r1, r1, #6, #9
 8000a0c:	bf18      	it	ne
 8000a0e:	2300      	movne	r3, #0
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8000a10:	f002 023f 	and.w	r2, r2, #63	; 0x3f
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8000a14:	fba1 0100 	umull	r0, r1, r1, r0
 8000a18:	f7ff fbf4 	bl	8000204 <__aeabi_uldivmod>
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8000a1c:	4b02      	ldr	r3, [pc, #8]	; (8000a28 <HAL_RCC_GetSysClockFreq+0x84>)
 8000a1e:	685b      	ldr	r3, [r3, #4]
 8000a20:	f3c3 7302 	ubfx	r3, r3, #28, #3
 8000a24:	e7e5      	b.n	80009f2 <HAL_RCC_GetSysClockFreq+0x4e>
 8000a26:	bf00      	nop
 8000a28:	40023800 	.word	0x40023800
 8000a2c:	00f42400 	.word	0x00f42400
 8000a30:	007a1200 	.word	0x007a1200

08000a34 <HAL_RCC_OscConfig>:
  uint32_t tickstart = 0U;

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000a34:	6803      	ldr	r3, [r0, #0]
{
 8000a36:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000a3a:	07df      	lsls	r7, r3, #31
{
 8000a3c:	4604      	mov	r4, r0
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000a3e:	d410      	bmi.n	8000a62 <HAL_RCC_OscConfig+0x2e>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000a40:	6823      	ldr	r3, [r4, #0]
 8000a42:	079e      	lsls	r6, r3, #30
 8000a44:	d463      	bmi.n	8000b0e <HAL_RCC_OscConfig+0xda>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000a46:	6823      	ldr	r3, [r4, #0]
 8000a48:	071a      	lsls	r2, r3, #28
 8000a4a:	f100 80ad 	bmi.w	8000ba8 <HAL_RCC_OscConfig+0x174>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000a4e:	6823      	ldr	r3, [r4, #0]
 8000a50:	075b      	lsls	r3, r3, #29
 8000a52:	f100 80cd 	bmi.w	8000bf0 <HAL_RCC_OscConfig+0x1bc>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000a56:	69a2      	ldr	r2, [r4, #24]
 8000a58:	2a00      	cmp	r2, #0
 8000a5a:	f040 8135 	bne.w	8000cc8 <HAL_RCC_OscConfig+0x294>
    else
    {
      return HAL_ERROR;
    }
  }
  return HAL_OK;
 8000a5e:	2000      	movs	r0, #0
 8000a60:	e01d      	b.n	8000a9e <HAL_RCC_OscConfig+0x6a>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8000a62:	4b96      	ldr	r3, [pc, #600]	; (8000cbc <HAL_RCC_OscConfig+0x288>)
 8000a64:	689a      	ldr	r2, [r3, #8]
 8000a66:	f002 020c 	and.w	r2, r2, #12
 8000a6a:	2a04      	cmp	r2, #4
 8000a6c:	d00f      	beq.n	8000a8e <HAL_RCC_OscConfig+0x5a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8000a6e:	689a      	ldr	r2, [r3, #8]
 8000a70:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8000a74:	2a08      	cmp	r2, #8
 8000a76:	d102      	bne.n	8000a7e <HAL_RCC_OscConfig+0x4a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8000a78:	685a      	ldr	r2, [r3, #4]
 8000a7a:	0255      	lsls	r5, r2, #9
 8000a7c:	d407      	bmi.n	8000a8e <HAL_RCC_OscConfig+0x5a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000a7e:	689a      	ldr	r2, [r3, #8]
 8000a80:	f002 020c 	and.w	r2, r2, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8000a84:	2a0c      	cmp	r2, #12
 8000a86:	d10d      	bne.n	8000aa4 <HAL_RCC_OscConfig+0x70>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000a88:	685b      	ldr	r3, [r3, #4]
 8000a8a:	0258      	lsls	r0, r3, #9
 8000a8c:	d50a      	bpl.n	8000aa4 <HAL_RCC_OscConfig+0x70>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000a8e:	4b8b      	ldr	r3, [pc, #556]	; (8000cbc <HAL_RCC_OscConfig+0x288>)
 8000a90:	681b      	ldr	r3, [r3, #0]
 8000a92:	0399      	lsls	r1, r3, #14
 8000a94:	d5d4      	bpl.n	8000a40 <HAL_RCC_OscConfig+0xc>
 8000a96:	6863      	ldr	r3, [r4, #4]
 8000a98:	2b00      	cmp	r3, #0
 8000a9a:	d1d1      	bne.n	8000a40 <HAL_RCC_OscConfig+0xc>
        return HAL_ERROR;
 8000a9c:	2001      	movs	r0, #1
}
 8000a9e:	b002      	add	sp, #8
 8000aa0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000aa4:	6863      	ldr	r3, [r4, #4]
 8000aa6:	4d85      	ldr	r5, [pc, #532]	; (8000cbc <HAL_RCC_OscConfig+0x288>)
 8000aa8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000aac:	d111      	bne.n	8000ad2 <HAL_RCC_OscConfig+0x9e>
 8000aae:	682b      	ldr	r3, [r5, #0]
 8000ab0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000ab4:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8000ab6:	f7ff fd71 	bl	800059c <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000aba:	4e80      	ldr	r6, [pc, #512]	; (8000cbc <HAL_RCC_OscConfig+0x288>)
        tickstart = HAL_GetTick();
 8000abc:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000abe:	6833      	ldr	r3, [r6, #0]
 8000ac0:	039a      	lsls	r2, r3, #14
 8000ac2:	d4bd      	bmi.n	8000a40 <HAL_RCC_OscConfig+0xc>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000ac4:	f7ff fd6a 	bl	800059c <HAL_GetTick>
 8000ac8:	1b40      	subs	r0, r0, r5
 8000aca:	2864      	cmp	r0, #100	; 0x64
 8000acc:	d9f7      	bls.n	8000abe <HAL_RCC_OscConfig+0x8a>
            return HAL_TIMEOUT;
 8000ace:	2003      	movs	r0, #3
 8000ad0:	e7e5      	b.n	8000a9e <HAL_RCC_OscConfig+0x6a>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000ad2:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000ad6:	d104      	bne.n	8000ae2 <HAL_RCC_OscConfig+0xae>
 8000ad8:	682b      	ldr	r3, [r5, #0]
 8000ada:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000ade:	602b      	str	r3, [r5, #0]
 8000ae0:	e7e5      	b.n	8000aae <HAL_RCC_OscConfig+0x7a>
 8000ae2:	682a      	ldr	r2, [r5, #0]
 8000ae4:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8000ae8:	602a      	str	r2, [r5, #0]
 8000aea:	682a      	ldr	r2, [r5, #0]
 8000aec:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8000af0:	602a      	str	r2, [r5, #0]
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8000af2:	2b00      	cmp	r3, #0
 8000af4:	d1df      	bne.n	8000ab6 <HAL_RCC_OscConfig+0x82>
        tickstart = HAL_GetTick();
 8000af6:	f7ff fd51 	bl	800059c <HAL_GetTick>
 8000afa:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000afc:	682b      	ldr	r3, [r5, #0]
 8000afe:	039b      	lsls	r3, r3, #14
 8000b00:	d59e      	bpl.n	8000a40 <HAL_RCC_OscConfig+0xc>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000b02:	f7ff fd4b 	bl	800059c <HAL_GetTick>
 8000b06:	1b80      	subs	r0, r0, r6
 8000b08:	2864      	cmp	r0, #100	; 0x64
 8000b0a:	d9f7      	bls.n	8000afc <HAL_RCC_OscConfig+0xc8>
 8000b0c:	e7df      	b.n	8000ace <HAL_RCC_OscConfig+0x9a>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8000b0e:	4b6b      	ldr	r3, [pc, #428]	; (8000cbc <HAL_RCC_OscConfig+0x288>)
 8000b10:	689a      	ldr	r2, [r3, #8]
 8000b12:	f012 0f0c 	tst.w	r2, #12
 8000b16:	d00f      	beq.n	8000b38 <HAL_RCC_OscConfig+0x104>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8000b18:	689a      	ldr	r2, [r3, #8]
 8000b1a:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8000b1e:	2a08      	cmp	r2, #8
 8000b20:	d102      	bne.n	8000b28 <HAL_RCC_OscConfig+0xf4>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8000b22:	685a      	ldr	r2, [r3, #4]
 8000b24:	0257      	lsls	r7, r2, #9
 8000b26:	d507      	bpl.n	8000b38 <HAL_RCC_OscConfig+0x104>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8000b28:	689a      	ldr	r2, [r3, #8]
 8000b2a:	f002 020c 	and.w	r2, r2, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8000b2e:	2a0c      	cmp	r2, #12
 8000b30:	d111      	bne.n	8000b56 <HAL_RCC_OscConfig+0x122>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8000b32:	685b      	ldr	r3, [r3, #4]
 8000b34:	025e      	lsls	r6, r3, #9
 8000b36:	d40e      	bmi.n	8000b56 <HAL_RCC_OscConfig+0x122>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000b38:	4a60      	ldr	r2, [pc, #384]	; (8000cbc <HAL_RCC_OscConfig+0x288>)
 8000b3a:	6813      	ldr	r3, [r2, #0]
 8000b3c:	079d      	lsls	r5, r3, #30
 8000b3e:	d502      	bpl.n	8000b46 <HAL_RCC_OscConfig+0x112>
 8000b40:	68e3      	ldr	r3, [r4, #12]
 8000b42:	2b01      	cmp	r3, #1
 8000b44:	d1aa      	bne.n	8000a9c <HAL_RCC_OscConfig+0x68>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000b46:	6813      	ldr	r3, [r2, #0]
 8000b48:	6921      	ldr	r1, [r4, #16]
 8000b4a:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8000b4e:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8000b52:	6013      	str	r3, [r2, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000b54:	e777      	b.n	8000a46 <HAL_RCC_OscConfig+0x12>
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8000b56:	68e2      	ldr	r2, [r4, #12]
 8000b58:	4b59      	ldr	r3, [pc, #356]	; (8000cc0 <HAL_RCC_OscConfig+0x28c>)
 8000b5a:	b1b2      	cbz	r2, 8000b8a <HAL_RCC_OscConfig+0x156>
        __HAL_RCC_HSI_ENABLE();
 8000b5c:	2201      	movs	r2, #1
 8000b5e:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8000b60:	f7ff fd1c 	bl	800059c <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000b64:	4d55      	ldr	r5, [pc, #340]	; (8000cbc <HAL_RCC_OscConfig+0x288>)
        tickstart = HAL_GetTick();
 8000b66:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000b68:	682b      	ldr	r3, [r5, #0]
 8000b6a:	0798      	lsls	r0, r3, #30
 8000b6c:	d507      	bpl.n	8000b7e <HAL_RCC_OscConfig+0x14a>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000b6e:	682b      	ldr	r3, [r5, #0]
 8000b70:	6922      	ldr	r2, [r4, #16]
 8000b72:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8000b76:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8000b7a:	602b      	str	r3, [r5, #0]
 8000b7c:	e763      	b.n	8000a46 <HAL_RCC_OscConfig+0x12>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000b7e:	f7ff fd0d 	bl	800059c <HAL_GetTick>
 8000b82:	1b80      	subs	r0, r0, r6
 8000b84:	2802      	cmp	r0, #2
 8000b86:	d9ef      	bls.n	8000b68 <HAL_RCC_OscConfig+0x134>
 8000b88:	e7a1      	b.n	8000ace <HAL_RCC_OscConfig+0x9a>
        __HAL_RCC_HSI_DISABLE();
 8000b8a:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8000b8c:	f7ff fd06 	bl	800059c <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000b90:	4e4a      	ldr	r6, [pc, #296]	; (8000cbc <HAL_RCC_OscConfig+0x288>)
        tickstart = HAL_GetTick();
 8000b92:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000b94:	6833      	ldr	r3, [r6, #0]
 8000b96:	0799      	lsls	r1, r3, #30
 8000b98:	f57f af55 	bpl.w	8000a46 <HAL_RCC_OscConfig+0x12>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000b9c:	f7ff fcfe 	bl	800059c <HAL_GetTick>
 8000ba0:	1b40      	subs	r0, r0, r5
 8000ba2:	2802      	cmp	r0, #2
 8000ba4:	d9f6      	bls.n	8000b94 <HAL_RCC_OscConfig+0x160>
 8000ba6:	e792      	b.n	8000ace <HAL_RCC_OscConfig+0x9a>
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8000ba8:	6962      	ldr	r2, [r4, #20]
 8000baa:	4b45      	ldr	r3, [pc, #276]	; (8000cc0 <HAL_RCC_OscConfig+0x28c>)
 8000bac:	b182      	cbz	r2, 8000bd0 <HAL_RCC_OscConfig+0x19c>
      __HAL_RCC_LSI_ENABLE();
 8000bae:	2201      	movs	r2, #1
 8000bb0:	f8c3 2e80 	str.w	r2, [r3, #3712]	; 0xe80
      tickstart = HAL_GetTick();
 8000bb4:	f7ff fcf2 	bl	800059c <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000bb8:	4e40      	ldr	r6, [pc, #256]	; (8000cbc <HAL_RCC_OscConfig+0x288>)
      tickstart = HAL_GetTick();
 8000bba:	4605      	mov	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000bbc:	6f73      	ldr	r3, [r6, #116]	; 0x74
 8000bbe:	079f      	lsls	r7, r3, #30
 8000bc0:	f53f af45 	bmi.w	8000a4e <HAL_RCC_OscConfig+0x1a>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000bc4:	f7ff fcea 	bl	800059c <HAL_GetTick>
 8000bc8:	1b40      	subs	r0, r0, r5
 8000bca:	2802      	cmp	r0, #2
 8000bcc:	d9f6      	bls.n	8000bbc <HAL_RCC_OscConfig+0x188>
 8000bce:	e77e      	b.n	8000ace <HAL_RCC_OscConfig+0x9a>
      __HAL_RCC_LSI_DISABLE();
 8000bd0:	f8c3 2e80 	str.w	r2, [r3, #3712]	; 0xe80
      tickstart = HAL_GetTick();
 8000bd4:	f7ff fce2 	bl	800059c <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000bd8:	4e38      	ldr	r6, [pc, #224]	; (8000cbc <HAL_RCC_OscConfig+0x288>)
      tickstart = HAL_GetTick();
 8000bda:	4605      	mov	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000bdc:	6f73      	ldr	r3, [r6, #116]	; 0x74
 8000bde:	0798      	lsls	r0, r3, #30
 8000be0:	f57f af35 	bpl.w	8000a4e <HAL_RCC_OscConfig+0x1a>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000be4:	f7ff fcda 	bl	800059c <HAL_GetTick>
 8000be8:	1b40      	subs	r0, r0, r5
 8000bea:	2802      	cmp	r0, #2
 8000bec:	d9f6      	bls.n	8000bdc <HAL_RCC_OscConfig+0x1a8>
 8000bee:	e76e      	b.n	8000ace <HAL_RCC_OscConfig+0x9a>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000bf0:	4b32      	ldr	r3, [pc, #200]	; (8000cbc <HAL_RCC_OscConfig+0x288>)
 8000bf2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000bf4:	f012 5280 	ands.w	r2, r2, #268435456	; 0x10000000
 8000bf8:	d128      	bne.n	8000c4c <HAL_RCC_OscConfig+0x218>
      __HAL_RCC_PWR_CLK_ENABLE();
 8000bfa:	9201      	str	r2, [sp, #4]
 8000bfc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000bfe:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8000c02:	641a      	str	r2, [r3, #64]	; 0x40
 8000c04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c06:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c0a:	9301      	str	r3, [sp, #4]
 8000c0c:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8000c0e:	2701      	movs	r7, #1
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000c10:	4d2c      	ldr	r5, [pc, #176]	; (8000cc4 <HAL_RCC_OscConfig+0x290>)
 8000c12:	682b      	ldr	r3, [r5, #0]
 8000c14:	05d9      	lsls	r1, r3, #23
 8000c16:	d51b      	bpl.n	8000c50 <HAL_RCC_OscConfig+0x21c>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000c18:	68a3      	ldr	r3, [r4, #8]
 8000c1a:	4d28      	ldr	r5, [pc, #160]	; (8000cbc <HAL_RCC_OscConfig+0x288>)
 8000c1c:	2b01      	cmp	r3, #1
 8000c1e:	d127      	bne.n	8000c70 <HAL_RCC_OscConfig+0x23c>
 8000c20:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8000c22:	f043 0301 	orr.w	r3, r3, #1
 8000c26:	672b      	str	r3, [r5, #112]	; 0x70
      tickstart = HAL_GetTick();
 8000c28:	f7ff fcb8 	bl	800059c <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000c2c:	4e23      	ldr	r6, [pc, #140]	; (8000cbc <HAL_RCC_OscConfig+0x288>)
      tickstart = HAL_GetTick();
 8000c2e:	4605      	mov	r5, r0
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000c30:	f241 3888 	movw	r8, #5000	; 0x1388
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000c34:	6f33      	ldr	r3, [r6, #112]	; 0x70
 8000c36:	079b      	lsls	r3, r3, #30
 8000c38:	d539      	bpl.n	8000cae <HAL_RCC_OscConfig+0x27a>
    if(pwrclkchanged == SET)
 8000c3a:	2f00      	cmp	r7, #0
 8000c3c:	f43f af0b 	beq.w	8000a56 <HAL_RCC_OscConfig+0x22>
      __HAL_RCC_PWR_CLK_DISABLE();
 8000c40:	4a1e      	ldr	r2, [pc, #120]	; (8000cbc <HAL_RCC_OscConfig+0x288>)
 8000c42:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8000c44:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8000c48:	6413      	str	r3, [r2, #64]	; 0x40
 8000c4a:	e704      	b.n	8000a56 <HAL_RCC_OscConfig+0x22>
    FlagStatus       pwrclkchanged = RESET;
 8000c4c:	2700      	movs	r7, #0
 8000c4e:	e7df      	b.n	8000c10 <HAL_RCC_OscConfig+0x1dc>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000c50:	682b      	ldr	r3, [r5, #0]
 8000c52:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000c56:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 8000c58:	f7ff fca0 	bl	800059c <HAL_GetTick>
 8000c5c:	4606      	mov	r6, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000c5e:	682b      	ldr	r3, [r5, #0]
 8000c60:	05da      	lsls	r2, r3, #23
 8000c62:	d4d9      	bmi.n	8000c18 <HAL_RCC_OscConfig+0x1e4>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000c64:	f7ff fc9a 	bl	800059c <HAL_GetTick>
 8000c68:	1b80      	subs	r0, r0, r6
 8000c6a:	2802      	cmp	r0, #2
 8000c6c:	d9f7      	bls.n	8000c5e <HAL_RCC_OscConfig+0x22a>
 8000c6e:	e72e      	b.n	8000ace <HAL_RCC_OscConfig+0x9a>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000c70:	2b05      	cmp	r3, #5
 8000c72:	d104      	bne.n	8000c7e <HAL_RCC_OscConfig+0x24a>
 8000c74:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8000c76:	f043 0304 	orr.w	r3, r3, #4
 8000c7a:	672b      	str	r3, [r5, #112]	; 0x70
 8000c7c:	e7d0      	b.n	8000c20 <HAL_RCC_OscConfig+0x1ec>
 8000c7e:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 8000c80:	f022 0201 	bic.w	r2, r2, #1
 8000c84:	672a      	str	r2, [r5, #112]	; 0x70
 8000c86:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 8000c88:	f022 0204 	bic.w	r2, r2, #4
 8000c8c:	672a      	str	r2, [r5, #112]	; 0x70
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8000c8e:	2b00      	cmp	r3, #0
 8000c90:	d1ca      	bne.n	8000c28 <HAL_RCC_OscConfig+0x1f4>
      tickstart = HAL_GetTick();
 8000c92:	f7ff fc83 	bl	800059c <HAL_GetTick>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000c96:	f241 3888 	movw	r8, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8000c9a:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000c9c:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8000c9e:	0798      	lsls	r0, r3, #30
 8000ca0:	d5cb      	bpl.n	8000c3a <HAL_RCC_OscConfig+0x206>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000ca2:	f7ff fc7b 	bl	800059c <HAL_GetTick>
 8000ca6:	1b80      	subs	r0, r0, r6
 8000ca8:	4540      	cmp	r0, r8
 8000caa:	d9f7      	bls.n	8000c9c <HAL_RCC_OscConfig+0x268>
 8000cac:	e70f      	b.n	8000ace <HAL_RCC_OscConfig+0x9a>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000cae:	f7ff fc75 	bl	800059c <HAL_GetTick>
 8000cb2:	1b40      	subs	r0, r0, r5
 8000cb4:	4540      	cmp	r0, r8
 8000cb6:	d9bd      	bls.n	8000c34 <HAL_RCC_OscConfig+0x200>
 8000cb8:	e709      	b.n	8000ace <HAL_RCC_OscConfig+0x9a>
 8000cba:	bf00      	nop
 8000cbc:	40023800 	.word	0x40023800
 8000cc0:	42470000 	.word	0x42470000
 8000cc4:	40007000 	.word	0x40007000
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8000cc8:	4d24      	ldr	r5, [pc, #144]	; (8000d5c <HAL_RCC_OscConfig+0x328>)
 8000cca:	68ab      	ldr	r3, [r5, #8]
 8000ccc:	f003 030c 	and.w	r3, r3, #12
 8000cd0:	2b08      	cmp	r3, #8
 8000cd2:	f43f aee3 	beq.w	8000a9c <HAL_RCC_OscConfig+0x68>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000cd6:	4b22      	ldr	r3, [pc, #136]	; (8000d60 <HAL_RCC_OscConfig+0x32c>)
 8000cd8:	2a02      	cmp	r2, #2
 8000cda:	f04f 0200 	mov.w	r2, #0
        __HAL_RCC_PLL_DISABLE();
 8000cde:	661a      	str	r2, [r3, #96]	; 0x60
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000ce0:	d12e      	bne.n	8000d40 <HAL_RCC_OscConfig+0x30c>
        tickstart = HAL_GetTick();
 8000ce2:	f7ff fc5b 	bl	800059c <HAL_GetTick>
 8000ce6:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8000ce8:	682b      	ldr	r3, [r5, #0]
 8000cea:	0199      	lsls	r1, r3, #6
 8000cec:	d422      	bmi.n	8000d34 <HAL_RCC_OscConfig+0x300>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8000cee:	e9d4 3207 	ldrd	r3, r2, [r4, #28]
 8000cf2:	4313      	orrs	r3, r2
 8000cf4:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8000cf6:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8000cfa:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8000cfc:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8000d00:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8000d02:	ea43 7302 	orr.w	r3, r3, r2, lsl #28
 8000d06:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8000d08:	0852      	lsrs	r2, r2, #1
 8000d0a:	3a01      	subs	r2, #1
 8000d0c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000d10:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 8000d12:	4b13      	ldr	r3, [pc, #76]	; (8000d60 <HAL_RCC_OscConfig+0x32c>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000d14:	4d11      	ldr	r5, [pc, #68]	; (8000d5c <HAL_RCC_OscConfig+0x328>)
        __HAL_RCC_PLL_ENABLE();
 8000d16:	2201      	movs	r2, #1
 8000d18:	661a      	str	r2, [r3, #96]	; 0x60
        tickstart = HAL_GetTick();
 8000d1a:	f7ff fc3f 	bl	800059c <HAL_GetTick>
 8000d1e:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000d20:	682b      	ldr	r3, [r5, #0]
 8000d22:	019a      	lsls	r2, r3, #6
 8000d24:	f53f ae9b 	bmi.w	8000a5e <HAL_RCC_OscConfig+0x2a>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000d28:	f7ff fc38 	bl	800059c <HAL_GetTick>
 8000d2c:	1b00      	subs	r0, r0, r4
 8000d2e:	2802      	cmp	r0, #2
 8000d30:	d9f6      	bls.n	8000d20 <HAL_RCC_OscConfig+0x2ec>
 8000d32:	e6cc      	b.n	8000ace <HAL_RCC_OscConfig+0x9a>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000d34:	f7ff fc32 	bl	800059c <HAL_GetTick>
 8000d38:	1b80      	subs	r0, r0, r6
 8000d3a:	2802      	cmp	r0, #2
 8000d3c:	d9d4      	bls.n	8000ce8 <HAL_RCC_OscConfig+0x2b4>
 8000d3e:	e6c6      	b.n	8000ace <HAL_RCC_OscConfig+0x9a>
        tickstart = HAL_GetTick();
 8000d40:	f7ff fc2c 	bl	800059c <HAL_GetTick>
 8000d44:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8000d46:	682b      	ldr	r3, [r5, #0]
 8000d48:	019b      	lsls	r3, r3, #6
 8000d4a:	f57f ae88 	bpl.w	8000a5e <HAL_RCC_OscConfig+0x2a>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000d4e:	f7ff fc25 	bl	800059c <HAL_GetTick>
 8000d52:	1b00      	subs	r0, r0, r4
 8000d54:	2802      	cmp	r0, #2
 8000d56:	d9f6      	bls.n	8000d46 <HAL_RCC_OscConfig+0x312>
 8000d58:	e6b9      	b.n	8000ace <HAL_RCC_OscConfig+0x9a>
 8000d5a:	bf00      	nop
 8000d5c:	40023800 	.word	0x40023800
 8000d60:	42470000 	.word	0x42470000

08000d64 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8000d64:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8000d68:	6803      	ldr	r3, [r0, #0]
 8000d6a:	68c1      	ldr	r1, [r0, #12]
 8000d6c:	691a      	ldr	r2, [r3, #16]
{
 8000d6e:	4604      	mov	r4, r0
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8000d70:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 8000d74:	430a      	orrs	r2, r1
 8000d76:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8000d78:	6925      	ldr	r5, [r4, #16]
 8000d7a:	68a2      	ldr	r2, [r4, #8]
  MODIFY_REG(huart->Instance->CR1,
 8000d7c:	68d9      	ldr	r1, [r3, #12]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8000d7e:	69c0      	ldr	r0, [r0, #28]
 8000d80:	432a      	orrs	r2, r5
 8000d82:	6965      	ldr	r5, [r4, #20]
  MODIFY_REG(huart->Instance->CR1,
 8000d84:	f421 4116 	bic.w	r1, r1, #38400	; 0x9600
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8000d88:	432a      	orrs	r2, r5
  MODIFY_REG(huart->Instance->CR1,
 8000d8a:	f021 010c 	bic.w	r1, r1, #12
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8000d8e:	4302      	orrs	r2, r0
  MODIFY_REG(huart->Instance->CR1,
 8000d90:	430a      	orrs	r2, r1
 8000d92:	60da      	str	r2, [r3, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8000d94:	695a      	ldr	r2, [r3, #20]
 8000d96:	69a1      	ldr	r1, [r4, #24]
 8000d98:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8000d9c:	430a      	orrs	r2, r1

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8000d9e:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8000da2:	615a      	str	r2, [r3, #20]
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8000da4:	4a83      	ldr	r2, [pc, #524]	; (8000fb4 <UART_SetConfig+0x250>)
 8000da6:	f040 8085 	bne.w	8000eb4 <UART_SetConfig+0x150>
  {
    /*-------------------------- USART BRR Configuration ---------------------*/
#if defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8000daa:	4293      	cmp	r3, r2
 8000dac:	d003      	beq.n	8000db6 <UART_SetConfig+0x52>
 8000dae:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8000db2:	4293      	cmp	r3, r2
 8000db4:	d149      	bne.n	8000e4a <UART_SetConfig+0xe6>
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 8000db6:	f7ff fde5 	bl	8000984 <HAL_RCC_GetPCLK2Freq>
 8000dba:	6863      	ldr	r3, [r4, #4]
 8000dbc:	f04f 0919 	mov.w	r9, #25
 8000dc0:	f04f 0864 	mov.w	r8, #100	; 0x64
 8000dc4:	fb09 f000 	mul.w	r0, r9, r0
 8000dc8:	005b      	lsls	r3, r3, #1
 8000dca:	fbb0 f3f3 	udiv	r3, r0, r3
 8000dce:	fbb3 f3f8 	udiv	r3, r3, r8
 8000dd2:	011f      	lsls	r7, r3, #4
 8000dd4:	f7ff fdd6 	bl	8000984 <HAL_RCC_GetPCLK2Freq>
 8000dd8:	6865      	ldr	r5, [r4, #4]
 8000dda:	fb09 f000 	mul.w	r0, r9, r0
 8000dde:	006d      	lsls	r5, r5, #1
 8000de0:	fbb0 f5f5 	udiv	r5, r0, r5
 8000de4:	f7ff fdce 	bl	8000984 <HAL_RCC_GetPCLK2Freq>
 8000de8:	6866      	ldr	r6, [r4, #4]
 8000dea:	fb09 f000 	mul.w	r0, r9, r0
 8000dee:	0076      	lsls	r6, r6, #1
 8000df0:	fbb0 f6f6 	udiv	r6, r0, r6
 8000df4:	f7ff fdc6 	bl	8000984 <HAL_RCC_GetPCLK2Freq>
 8000df8:	fbb6 f6f8 	udiv	r6, r6, r8
 8000dfc:	fb08 5616 	mls	r6, r8, r6, r5
 8000e00:	6863      	ldr	r3, [r4, #4]
 8000e02:	00f6      	lsls	r6, r6, #3
 8000e04:	3632      	adds	r6, #50	; 0x32
 8000e06:	fbb6 f6f8 	udiv	r6, r6, r8
 8000e0a:	0076      	lsls	r6, r6, #1
 8000e0c:	fb09 f000 	mul.w	r0, r9, r0
 8000e10:	005b      	lsls	r3, r3, #1
 8000e12:	f406 76f8 	and.w	r6, r6, #496	; 0x1f0
 8000e16:	fbb0 f5f3 	udiv	r5, r0, r3
 8000e1a:	f7ff fdb3 	bl	8000984 <HAL_RCC_GetPCLK2Freq>
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8000e1e:	6863      	ldr	r3, [r4, #4]
 8000e20:	6822      	ldr	r2, [r4, #0]
 8000e22:	fb09 f000 	mul.w	r0, r9, r0
 8000e26:	005b      	lsls	r3, r3, #1
 8000e28:	fbb0 f3f3 	udiv	r3, r0, r3
 8000e2c:	fbb3 f3f8 	udiv	r3, r3, r8
 8000e30:	fb08 5313 	mls	r3, r8, r3, r5
 8000e34:	00db      	lsls	r3, r3, #3
 8000e36:	3332      	adds	r3, #50	; 0x32
 8000e38:	fbb3 f3f8 	udiv	r3, r3, r8
 8000e3c:	f003 0307 	and.w	r3, r3, #7
 8000e40:	443b      	add	r3, r7
 8000e42:	4433      	add	r3, r6
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8000e44:	6093      	str	r3, [r2, #8]
    }
  }
}
 8000e46:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8000e4a:	f7ff fd8b 	bl	8000964 <HAL_RCC_GetPCLK1Freq>
 8000e4e:	6863      	ldr	r3, [r4, #4]
 8000e50:	f04f 0919 	mov.w	r9, #25
 8000e54:	f04f 0864 	mov.w	r8, #100	; 0x64
 8000e58:	fb09 f000 	mul.w	r0, r9, r0
 8000e5c:	005b      	lsls	r3, r3, #1
 8000e5e:	fbb0 f3f3 	udiv	r3, r0, r3
 8000e62:	fbb3 f3f8 	udiv	r3, r3, r8
 8000e66:	011f      	lsls	r7, r3, #4
 8000e68:	f7ff fd7c 	bl	8000964 <HAL_RCC_GetPCLK1Freq>
 8000e6c:	6865      	ldr	r5, [r4, #4]
 8000e6e:	fb09 f000 	mul.w	r0, r9, r0
 8000e72:	006d      	lsls	r5, r5, #1
 8000e74:	fbb0 f5f5 	udiv	r5, r0, r5
 8000e78:	f7ff fd74 	bl	8000964 <HAL_RCC_GetPCLK1Freq>
 8000e7c:	6866      	ldr	r6, [r4, #4]
 8000e7e:	fb09 f000 	mul.w	r0, r9, r0
 8000e82:	0076      	lsls	r6, r6, #1
 8000e84:	fbb0 f6f6 	udiv	r6, r0, r6
 8000e88:	f7ff fd6c 	bl	8000964 <HAL_RCC_GetPCLK1Freq>
 8000e8c:	fbb6 f6f8 	udiv	r6, r6, r8
 8000e90:	fb08 5616 	mls	r6, r8, r6, r5
 8000e94:	6863      	ldr	r3, [r4, #4]
 8000e96:	00f6      	lsls	r6, r6, #3
 8000e98:	3632      	adds	r6, #50	; 0x32
 8000e9a:	fbb6 f6f8 	udiv	r6, r6, r8
 8000e9e:	0076      	lsls	r6, r6, #1
 8000ea0:	fb09 f000 	mul.w	r0, r9, r0
 8000ea4:	005b      	lsls	r3, r3, #1
 8000ea6:	f406 76f8 	and.w	r6, r6, #496	; 0x1f0
 8000eaa:	fbb0 f5f3 	udiv	r5, r0, r3
 8000eae:	f7ff fd59 	bl	8000964 <HAL_RCC_GetPCLK1Freq>
 8000eb2:	e7b4      	b.n	8000e1e <UART_SetConfig+0xba>
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8000eb4:	4293      	cmp	r3, r2
 8000eb6:	d002      	beq.n	8000ebe <UART_SetConfig+0x15a>
 8000eb8:	4a3f      	ldr	r2, [pc, #252]	; (8000fb8 <UART_SetConfig+0x254>)
 8000eba:	4293      	cmp	r3, r2
 8000ebc:	d146      	bne.n	8000f4c <UART_SetConfig+0x1e8>
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 8000ebe:	f7ff fd61 	bl	8000984 <HAL_RCC_GetPCLK2Freq>
 8000ec2:	6863      	ldr	r3, [r4, #4]
 8000ec4:	f04f 0919 	mov.w	r9, #25
 8000ec8:	f04f 0864 	mov.w	r8, #100	; 0x64
 8000ecc:	fb09 f000 	mul.w	r0, r9, r0
 8000ed0:	009b      	lsls	r3, r3, #2
 8000ed2:	fbb0 f3f3 	udiv	r3, r0, r3
 8000ed6:	fbb3 f3f8 	udiv	r3, r3, r8
 8000eda:	011f      	lsls	r7, r3, #4
 8000edc:	f7ff fd52 	bl	8000984 <HAL_RCC_GetPCLK2Freq>
 8000ee0:	6865      	ldr	r5, [r4, #4]
 8000ee2:	fb09 f000 	mul.w	r0, r9, r0
 8000ee6:	00ad      	lsls	r5, r5, #2
 8000ee8:	fbb0 f5f5 	udiv	r5, r0, r5
 8000eec:	f7ff fd4a 	bl	8000984 <HAL_RCC_GetPCLK2Freq>
 8000ef0:	6863      	ldr	r3, [r4, #4]
 8000ef2:	fb09 f000 	mul.w	r0, r9, r0
 8000ef6:	009b      	lsls	r3, r3, #2
 8000ef8:	fbb0 f3f3 	udiv	r3, r0, r3
 8000efc:	fbb3 f3f8 	udiv	r3, r3, r8
 8000f00:	fb08 5313 	mls	r3, r8, r3, r5
 8000f04:	011b      	lsls	r3, r3, #4
 8000f06:	3332      	adds	r3, #50	; 0x32
 8000f08:	fbb3 f3f8 	udiv	r3, r3, r8
 8000f0c:	f003 06f0 	and.w	r6, r3, #240	; 0xf0
 8000f10:	f7ff fd38 	bl	8000984 <HAL_RCC_GetPCLK2Freq>
 8000f14:	6863      	ldr	r3, [r4, #4]
 8000f16:	fb09 f000 	mul.w	r0, r9, r0
 8000f1a:	009b      	lsls	r3, r3, #2
 8000f1c:	fbb0 f5f3 	udiv	r5, r0, r3
 8000f20:	f7ff fd30 	bl	8000984 <HAL_RCC_GetPCLK2Freq>
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8000f24:	6863      	ldr	r3, [r4, #4]
 8000f26:	6822      	ldr	r2, [r4, #0]
 8000f28:	fb09 f000 	mul.w	r0, r9, r0
 8000f2c:	009b      	lsls	r3, r3, #2
 8000f2e:	fbb0 f3f3 	udiv	r3, r0, r3
 8000f32:	fbb3 f3f8 	udiv	r3, r3, r8
 8000f36:	fb08 5313 	mls	r3, r8, r3, r5
 8000f3a:	011b      	lsls	r3, r3, #4
 8000f3c:	3332      	adds	r3, #50	; 0x32
 8000f3e:	fbb3 f3f8 	udiv	r3, r3, r8
 8000f42:	f003 030f 	and.w	r3, r3, #15
 8000f46:	4333      	orrs	r3, r6
 8000f48:	443b      	add	r3, r7
 8000f4a:	e77b      	b.n	8000e44 <UART_SetConfig+0xe0>
 8000f4c:	f7ff fd0a 	bl	8000964 <HAL_RCC_GetPCLK1Freq>
 8000f50:	6863      	ldr	r3, [r4, #4]
 8000f52:	f04f 0919 	mov.w	r9, #25
 8000f56:	f04f 0864 	mov.w	r8, #100	; 0x64
 8000f5a:	fb09 f000 	mul.w	r0, r9, r0
 8000f5e:	009b      	lsls	r3, r3, #2
 8000f60:	fbb0 f3f3 	udiv	r3, r0, r3
 8000f64:	fbb3 f3f8 	udiv	r3, r3, r8
 8000f68:	011f      	lsls	r7, r3, #4
 8000f6a:	f7ff fcfb 	bl	8000964 <HAL_RCC_GetPCLK1Freq>
 8000f6e:	6865      	ldr	r5, [r4, #4]
 8000f70:	fb09 f000 	mul.w	r0, r9, r0
 8000f74:	00ad      	lsls	r5, r5, #2
 8000f76:	fbb0 f5f5 	udiv	r5, r0, r5
 8000f7a:	f7ff fcf3 	bl	8000964 <HAL_RCC_GetPCLK1Freq>
 8000f7e:	6863      	ldr	r3, [r4, #4]
 8000f80:	fb09 f000 	mul.w	r0, r9, r0
 8000f84:	009b      	lsls	r3, r3, #2
 8000f86:	fbb0 f3f3 	udiv	r3, r0, r3
 8000f8a:	fbb3 f3f8 	udiv	r3, r3, r8
 8000f8e:	fb08 5313 	mls	r3, r8, r3, r5
 8000f92:	011b      	lsls	r3, r3, #4
 8000f94:	3332      	adds	r3, #50	; 0x32
 8000f96:	fbb3 f3f8 	udiv	r3, r3, r8
 8000f9a:	f003 06f0 	and.w	r6, r3, #240	; 0xf0
 8000f9e:	f7ff fce1 	bl	8000964 <HAL_RCC_GetPCLK1Freq>
 8000fa2:	6863      	ldr	r3, [r4, #4]
 8000fa4:	fb09 f000 	mul.w	r0, r9, r0
 8000fa8:	009b      	lsls	r3, r3, #2
 8000faa:	fbb0 f5f3 	udiv	r5, r0, r3
 8000fae:	f7ff fcd9 	bl	8000964 <HAL_RCC_GetPCLK1Freq>
 8000fb2:	e7b7      	b.n	8000f24 <UART_SetConfig+0x1c0>
 8000fb4:	40011000 	.word	0x40011000
 8000fb8:	40011400 	.word	0x40011400

08000fbc <HAL_UART_Init>:
{
 8000fbc:	b510      	push	{r4, lr}
  if (huart == NULL)
 8000fbe:	4604      	mov	r4, r0
 8000fc0:	b340      	cbz	r0, 8001014 <HAL_UART_Init+0x58>
  if (huart->gState == HAL_UART_STATE_RESET)
 8000fc2:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 8000fc6:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8000fca:	b91b      	cbnz	r3, 8000fd4 <HAL_UART_Init+0x18>
    huart->Lock = HAL_UNLOCKED;
 8000fcc:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    HAL_UART_MspInit(huart);
 8000fd0:	f000 f902 	bl	80011d8 <HAL_UART_MspInit>
  __HAL_UART_DISABLE(huart);
 8000fd4:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8000fd6:	2324      	movs	r3, #36	; 0x24
 8000fd8:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  __HAL_UART_DISABLE(huart);
 8000fdc:	68d3      	ldr	r3, [r2, #12]
 8000fde:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8000fe2:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 8000fe4:	4620      	mov	r0, r4
 8000fe6:	f7ff febd 	bl	8000d64 <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8000fea:	6823      	ldr	r3, [r4, #0]
 8000fec:	691a      	ldr	r2, [r3, #16]
 8000fee:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8000ff2:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8000ff4:	695a      	ldr	r2, [r3, #20]
 8000ff6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8000ffa:	615a      	str	r2, [r3, #20]
  __HAL_UART_ENABLE(huart);
 8000ffc:	68da      	ldr	r2, [r3, #12]
 8000ffe:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001002:	60da      	str	r2, [r3, #12]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001004:	2000      	movs	r0, #0
  huart->gState = HAL_UART_STATE_READY;
 8001006:	2320      	movs	r3, #32
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001008:	63e0      	str	r0, [r4, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 800100a:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 800100e:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
}
 8001012:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8001014:	2001      	movs	r0, #1
 8001016:	e7fc      	b.n	8001012 <HAL_UART_Init+0x56>

08001018 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001018:	b530      	push	{r4, r5, lr}
 800101a:	b095      	sub	sp, #84	; 0x54
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800101c:	2214      	movs	r2, #20
 800101e:	2100      	movs	r1, #0
 8001020:	a808      	add	r0, sp, #32
 8001022:	f000 f98f 	bl	8001344 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001026:	2214      	movs	r2, #20
 8001028:	2100      	movs	r1, #0
 800102a:	a802      	add	r0, sp, #8
 800102c:	f000 f98a 	bl	8001344 <memset>

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001030:	2500      	movs	r5, #0
 8001032:	4b1c      	ldr	r3, [pc, #112]	; (80010a4 <SystemClock_Config+0x8c>)
 8001034:	9500      	str	r5, [sp, #0]
 8001036:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001038:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800103c:	641a      	str	r2, [r3, #64]	; 0x40
 800103e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8001040:	4a19      	ldr	r2, [pc, #100]	; (80010a8 <SystemClock_Config+0x90>)
  __HAL_RCC_PWR_CLK_ENABLE();
 8001042:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001046:	9300      	str	r3, [sp, #0]
 8001048:	9b00      	ldr	r3, [sp, #0]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 800104a:	9501      	str	r5, [sp, #4]
 800104c:	6813      	ldr	r3, [r2, #0]
 800104e:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001052:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001056:	6013      	str	r3, [r2, #0]
 8001058:	6813      	ldr	r3, [r2, #0]
 800105a:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800105e:	9301      	str	r3, [sp, #4]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001060:	2201      	movs	r2, #1
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8001062:	9b01      	ldr	r3, [sp, #4]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001064:	2310      	movs	r3, #16
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001066:	2402      	movs	r4, #2
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001068:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
  RCC_OscInitStruct.PLL.PLLM = 16;
 800106c:	930f      	str	r3, [sp, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 336;
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 800106e:	f44f 71a8 	mov.w	r1, #336	; 0x150
 8001072:	2304      	movs	r3, #4
  RCC_OscInitStruct.PLL.PLLQ = 2;
  RCC_OscInitStruct.PLL.PLLR = 2;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001074:	a807      	add	r0, sp, #28
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8001076:	e9cd 1310 	strd	r1, r3, [sp, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800107a:	e9cd 450d 	strd	r4, r5, [sp, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLR = 2;
 800107e:	e9cd 4412 	strd	r4, r4, [sp, #72]	; 0x48
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001082:	9407      	str	r4, [sp, #28]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001084:	f7ff fcd6 	bl	8000a34 <HAL_RCC_OscConfig>
  {
    Error_Handler();
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001088:	230f      	movs	r3, #15
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800108a:	e9cd 3402 	strd	r3, r4, [sp, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800108e:	4621      	mov	r1, r4
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001090:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001094:	a802      	add	r0, sp, #8
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001096:	e9cd 3505 	strd	r3, r5, [sp, #20]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800109a:	9504      	str	r5, [sp, #16]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800109c:	f7ff fbca 	bl	8000834 <HAL_RCC_ClockConfig>
  {
    Error_Handler();
  }
}
 80010a0:	b015      	add	sp, #84	; 0x54
 80010a2:	bd30      	pop	{r4, r5, pc}
 80010a4:	40023800 	.word	0x40023800
 80010a8:	40007000 	.word	0x40007000

080010ac <main>:
{
 80010ac:	b500      	push	{lr}
 80010ae:	b08b      	sub	sp, #44	; 0x2c
  HAL_Init();
 80010b0:	f7ff fa4e 	bl	8000550 <HAL_Init>
  SystemClock_Config();
 80010b4:	f7ff ffb0 	bl	8001018 <SystemClock_Config>
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010b8:	2214      	movs	r2, #20
 80010ba:	2100      	movs	r1, #0
 80010bc:	eb0d 0002 	add.w	r0, sp, r2
 80010c0:	f000 f940 	bl	8001344 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80010c4:	2400      	movs	r4, #0
 80010c6:	4b30      	ldr	r3, [pc, #192]	; (8001188 <main+0xdc>)
 80010c8:	9401      	str	r4, [sp, #4]
 80010ca:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  __HAL_RCC_GPIOH_CLK_ENABLE();
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Pin_Led_Verde_GPIO_Port, Pin_Led_Verde_Pin, GPIO_PIN_RESET);
 80010cc:	482f      	ldr	r0, [pc, #188]	; (800118c <main+0xe0>)
	  if( HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13) == GPIO_PIN_SET )
 80010ce:	4d30      	ldr	r5, [pc, #192]	; (8001190 <main+0xe4>)
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80010d0:	f042 0204 	orr.w	r2, r2, #4
 80010d4:	631a      	str	r2, [r3, #48]	; 0x30
 80010d6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80010d8:	f002 0204 	and.w	r2, r2, #4
 80010dc:	9201      	str	r2, [sp, #4]
 80010de:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80010e0:	9402      	str	r4, [sp, #8]
 80010e2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80010e4:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80010e8:	631a      	str	r2, [r3, #48]	; 0x30
 80010ea:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80010ec:	f002 0280 	and.w	r2, r2, #128	; 0x80
 80010f0:	9202      	str	r2, [sp, #8]
 80010f2:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80010f4:	9403      	str	r4, [sp, #12]
 80010f6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80010f8:	f042 0201 	orr.w	r2, r2, #1
 80010fc:	631a      	str	r2, [r3, #48]	; 0x30
 80010fe:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001100:	f002 0201 	and.w	r2, r2, #1
 8001104:	9203      	str	r2, [sp, #12]
 8001106:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001108:	9404      	str	r4, [sp, #16]
 800110a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800110c:	f042 0202 	orr.w	r2, r2, #2
 8001110:	631a      	str	r2, [r3, #48]	; 0x30
 8001112:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001114:	f003 0302 	and.w	r3, r3, #2
  HAL_GPIO_WritePin(Pin_Led_Verde_GPIO_Port, Pin_Led_Verde_Pin, GPIO_PIN_RESET);
 8001118:	4622      	mov	r2, r4
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800111a:	9304      	str	r3, [sp, #16]
  HAL_GPIO_WritePin(Pin_Led_Verde_GPIO_Port, Pin_Led_Verde_Pin, GPIO_PIN_RESET);
 800111c:	2120      	movs	r1, #32
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800111e:	9b04      	ldr	r3, [sp, #16]
  HAL_GPIO_WritePin(Pin_Led_Verde_GPIO_Port, Pin_Led_Verde_Pin, GPIO_PIN_RESET);
 8001120:	f7ff fb82 	bl	8000828 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : Pin_Pulsador_Pin */
  GPIO_InitStruct.Pin = Pin_Pulsador_Pin;
 8001124:	f44f 5300 	mov.w	r3, #8192	; 0x2000
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(Pin_Pulsador_GPIO_Port, &GPIO_InitStruct);
 8001128:	4819      	ldr	r0, [pc, #100]	; (8001190 <main+0xe4>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800112a:	9407      	str	r4, [sp, #28]
  HAL_GPIO_Init(Pin_Pulsador_GPIO_Port, &GPIO_InitStruct);
 800112c:	a905      	add	r1, sp, #20
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800112e:	e9cd 3405 	strd	r3, r4, [sp, #20]
  HAL_GPIO_Init(Pin_Pulsador_GPIO_Port, &GPIO_InitStruct);
 8001132:	f7ff fa91 	bl	8000658 <HAL_GPIO_Init>

  /*Configure GPIO pin : Pin_Led_Verde_Pin */
  GPIO_InitStruct.Pin = Pin_Led_Verde_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001136:	2220      	movs	r2, #32
 8001138:	2301      	movs	r3, #1
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(Pin_Led_Verde_GPIO_Port, &GPIO_InitStruct);
 800113a:	4814      	ldr	r0, [pc, #80]	; (800118c <main+0xe0>)
 800113c:	a905      	add	r1, sp, #20
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800113e:	e9cd 2305 	strd	r2, r3, [sp, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001142:	e9cd 4407 	strd	r4, r4, [sp, #28]
  HAL_GPIO_Init(Pin_Led_Verde_GPIO_Port, &GPIO_InitStruct);
 8001146:	f7ff fa87 	bl	8000658 <HAL_GPIO_Init>
  huart2.Instance = USART2;
 800114a:	4812      	ldr	r0, [pc, #72]	; (8001194 <main+0xe8>)
  huart2.Init.BaudRate = 115200;
 800114c:	4912      	ldr	r1, [pc, #72]	; (8001198 <main+0xec>)
  huart2.Init.Parity = UART_PARITY_NONE;
 800114e:	6104      	str	r4, [r0, #16]
  huart2.Init.BaudRate = 115200;
 8001150:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 8001154:	e9c0 1300 	strd	r1, r3, [r0]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001158:	230c      	movs	r3, #12
  huart2.Init.StopBits = UART_STOPBITS_1;
 800115a:	e9c0 4402 	strd	r4, r4, [r0, #8]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800115e:	e9c0 3405 	strd	r3, r4, [r0, #20]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001162:	61c4      	str	r4, [r0, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001164:	f7ff ff2a 	bl	8000fbc <HAL_UART_Init>
		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
 8001168:	4c08      	ldr	r4, [pc, #32]	; (800118c <main+0xe0>)
	  if( HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13) == GPIO_PIN_SET )
 800116a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800116e:	4628      	mov	r0, r5
 8001170:	f7ff fb54 	bl	800081c <HAL_GPIO_ReadPin>
 8001174:	2801      	cmp	r0, #1
		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 8001176:	bf0c      	ite	eq
 8001178:	2200      	moveq	r2, #0
		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
 800117a:	2201      	movne	r2, #1
 800117c:	2120      	movs	r1, #32
 800117e:	4620      	mov	r0, r4
 8001180:	f7ff fb52 	bl	8000828 <HAL_GPIO_WritePin>
 8001184:	e7f1      	b.n	800116a <main+0xbe>
 8001186:	bf00      	nop
 8001188:	40023800 	.word	0x40023800
 800118c:	40020000 	.word	0x40020000
 8001190:	40020800 	.word	0x40020800
 8001194:	2000002c 	.word	0x2000002c
 8001198:	40004400 	.word	0x40004400

0800119c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800119c:	b082      	sub	sp, #8
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800119e:	4b0d      	ldr	r3, [pc, #52]	; (80011d4 <HAL_MspInit+0x38>)
 80011a0:	2100      	movs	r1, #0
 80011a2:	9100      	str	r1, [sp, #0]
 80011a4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80011a6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80011aa:	645a      	str	r2, [r3, #68]	; 0x44
 80011ac:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80011ae:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 80011b2:	9200      	str	r2, [sp, #0]
 80011b4:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 80011b6:	9101      	str	r1, [sp, #4]
 80011b8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80011ba:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80011be:	641a      	str	r2, [r3, #64]	; 0x40
 80011c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80011c6:	9301      	str	r3, [sp, #4]
 80011c8:	9b01      	ldr	r3, [sp, #4]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80011ca:	2007      	movs	r0, #7
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80011cc:	b002      	add	sp, #8
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80011ce:	f7ff b9eb 	b.w	80005a8 <HAL_NVIC_SetPriorityGrouping>
 80011d2:	bf00      	nop
 80011d4:	40023800 	.word	0x40023800

080011d8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80011d8:	b510      	push	{r4, lr}
 80011da:	4604      	mov	r4, r0
 80011dc:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011de:	2214      	movs	r2, #20
 80011e0:	2100      	movs	r1, #0
 80011e2:	a803      	add	r0, sp, #12
 80011e4:	f000 f8ae 	bl	8001344 <memset>
  if(huart->Instance==USART2)
 80011e8:	6822      	ldr	r2, [r4, #0]
 80011ea:	4b15      	ldr	r3, [pc, #84]	; (8001240 <HAL_UART_MspInit+0x68>)
 80011ec:	429a      	cmp	r2, r3
 80011ee:	d124      	bne.n	800123a <HAL_UART_MspInit+0x62>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80011f0:	f503 33fa 	add.w	r3, r3, #128000	; 0x1f400
 80011f4:	2100      	movs	r1, #0
 80011f6:	9101      	str	r1, [sp, #4]
 80011f8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_PULLUP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011fa:	4812      	ldr	r0, [pc, #72]	; (8001244 <HAL_UART_MspInit+0x6c>)
    __HAL_RCC_USART2_CLK_ENABLE();
 80011fc:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8001200:	641a      	str	r2, [r3, #64]	; 0x40
 8001202:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001204:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
 8001208:	9201      	str	r2, [sp, #4]
 800120a:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800120c:	9102      	str	r1, [sp, #8]
 800120e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001210:	f042 0201 	orr.w	r2, r2, #1
 8001214:	631a      	str	r2, [r3, #48]	; 0x30
 8001216:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001218:	f003 0301 	and.w	r3, r3, #1
 800121c:	9302      	str	r3, [sp, #8]
 800121e:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001220:	220c      	movs	r2, #12
 8001222:	2302      	movs	r3, #2
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001224:	2101      	movs	r1, #1
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001226:	e9cd 2303 	strd	r2, r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800122a:	2303      	movs	r3, #3
 800122c:	e9cd 1305 	strd	r1, r3, [sp, #20]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001230:	2307      	movs	r3, #7
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001232:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001234:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001236:	f7ff fa0f 	bl	8000658 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800123a:	b008      	add	sp, #32
 800123c:	bd10      	pop	{r4, pc}
 800123e:	bf00      	nop
 8001240:	40004400 	.word	0x40004400
 8001244:	40020000 	.word	0x40020000

08001248 <NMI_Handler>:

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001248:	4770      	bx	lr

0800124a <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800124a:	e7fe      	b.n	800124a <HardFault_Handler>

0800124c <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800124c:	e7fe      	b.n	800124c <MemManage_Handler>

0800124e <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800124e:	e7fe      	b.n	800124e <BusFault_Handler>

08001250 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001250:	e7fe      	b.n	8001250 <UsageFault_Handler>

08001252 <SVC_Handler>:
 8001252:	4770      	bx	lr

08001254 <DebugMon_Handler>:
 8001254:	4770      	bx	lr

08001256 <PendSV_Handler>:
 8001256:	4770      	bx	lr

08001258 <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001258:	f7ff b994 	b.w	8000584 <HAL_IncTick>

0800125c <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800125c:	490f      	ldr	r1, [pc, #60]	; (800129c <SystemInit+0x40>)
 800125e:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 8001262:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001266:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 800126a:	4b0d      	ldr	r3, [pc, #52]	; (80012a0 <SystemInit+0x44>)
 800126c:	681a      	ldr	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 800126e:	2000      	movs	r0, #0
  RCC->CR |= (uint32_t)0x00000001;
 8001270:	f042 0201 	orr.w	r2, r2, #1
 8001274:	601a      	str	r2, [r3, #0]
  RCC->CFGR = 0x00000000;
 8001276:	6098      	str	r0, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8001278:	681a      	ldr	r2, [r3, #0]
 800127a:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 800127e:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8001282:	601a      	str	r2, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8001284:	4a07      	ldr	r2, [pc, #28]	; (80012a4 <SystemInit+0x48>)
 8001286:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8001288:	681a      	ldr	r2, [r3, #0]
 800128a:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800128e:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8001290:	60d8      	str	r0, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001292:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8001296:	608b      	str	r3, [r1, #8]
#endif
}
 8001298:	4770      	bx	lr
 800129a:	bf00      	nop
 800129c:	e000ed00 	.word	0xe000ed00
 80012a0:	40023800 	.word	0x40023800
 80012a4:	24003010 	.word	0x24003010

080012a8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80012a8:	f8df d034 	ldr.w	sp, [pc, #52]	; 80012e0 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80012ac:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80012ae:	e003      	b.n	80012b8 <LoopCopyDataInit>

080012b0 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80012b0:	4b0c      	ldr	r3, [pc, #48]	; (80012e4 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80012b2:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80012b4:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80012b6:	3104      	adds	r1, #4

080012b8 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80012b8:	480b      	ldr	r0, [pc, #44]	; (80012e8 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80012ba:	4b0c      	ldr	r3, [pc, #48]	; (80012ec <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80012bc:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80012be:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80012c0:	d3f6      	bcc.n	80012b0 <CopyDataInit>
  ldr  r2, =_sbss
 80012c2:	4a0b      	ldr	r2, [pc, #44]	; (80012f0 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80012c4:	e002      	b.n	80012cc <LoopFillZerobss>

080012c6 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80012c6:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80012c8:	f842 3b04 	str.w	r3, [r2], #4

080012cc <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80012cc:	4b09      	ldr	r3, [pc, #36]	; (80012f4 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80012ce:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80012d0:	d3f9      	bcc.n	80012c6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80012d2:	f7ff ffc3 	bl	800125c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80012d6:	f000 f811 	bl	80012fc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80012da:	f7ff fee7 	bl	80010ac <main>
  bx  lr    
 80012de:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80012e0:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 80012e4:	08001394 	.word	0x08001394
  ldr  r0, =_sdata
 80012e8:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80012ec:	2000000c 	.word	0x2000000c
  ldr  r2, =_sbss
 80012f0:	2000000c 	.word	0x2000000c
  ldr  r3, = _ebss
 80012f4:	2000006c 	.word	0x2000006c

080012f8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80012f8:	e7fe      	b.n	80012f8 <ADC_IRQHandler>
	...

080012fc <__libc_init_array>:
 80012fc:	b570      	push	{r4, r5, r6, lr}
 80012fe:	4d0d      	ldr	r5, [pc, #52]	; (8001334 <__libc_init_array+0x38>)
 8001300:	4c0d      	ldr	r4, [pc, #52]	; (8001338 <__libc_init_array+0x3c>)
 8001302:	1b64      	subs	r4, r4, r5
 8001304:	10a4      	asrs	r4, r4, #2
 8001306:	2600      	movs	r6, #0
 8001308:	42a6      	cmp	r6, r4
 800130a:	d109      	bne.n	8001320 <__libc_init_array+0x24>
 800130c:	4d0b      	ldr	r5, [pc, #44]	; (800133c <__libc_init_array+0x40>)
 800130e:	4c0c      	ldr	r4, [pc, #48]	; (8001340 <__libc_init_array+0x44>)
 8001310:	f000 f820 	bl	8001354 <_init>
 8001314:	1b64      	subs	r4, r4, r5
 8001316:	10a4      	asrs	r4, r4, #2
 8001318:	2600      	movs	r6, #0
 800131a:	42a6      	cmp	r6, r4
 800131c:	d105      	bne.n	800132a <__libc_init_array+0x2e>
 800131e:	bd70      	pop	{r4, r5, r6, pc}
 8001320:	f855 3b04 	ldr.w	r3, [r5], #4
 8001324:	4798      	blx	r3
 8001326:	3601      	adds	r6, #1
 8001328:	e7ee      	b.n	8001308 <__libc_init_array+0xc>
 800132a:	f855 3b04 	ldr.w	r3, [r5], #4
 800132e:	4798      	blx	r3
 8001330:	3601      	adds	r6, #1
 8001332:	e7f2      	b.n	800131a <__libc_init_array+0x1e>
 8001334:	0800138c 	.word	0x0800138c
 8001338:	0800138c 	.word	0x0800138c
 800133c:	0800138c 	.word	0x0800138c
 8001340:	08001390 	.word	0x08001390

08001344 <memset>:
 8001344:	4402      	add	r2, r0
 8001346:	4603      	mov	r3, r0
 8001348:	4293      	cmp	r3, r2
 800134a:	d100      	bne.n	800134e <memset+0xa>
 800134c:	4770      	bx	lr
 800134e:	f803 1b01 	strb.w	r1, [r3], #1
 8001352:	e7f9      	b.n	8001348 <memset+0x4>

08001354 <_init>:
 8001354:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001356:	bf00      	nop
 8001358:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800135a:	bc08      	pop	{r3}
 800135c:	469e      	mov	lr, r3
 800135e:	4770      	bx	lr

08001360 <_fini>:
 8001360:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001362:	bf00      	nop
 8001364:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001366:	bc08      	pop	{r3}
 8001368:	469e      	mov	lr, r3
 800136a:	4770      	bx	lr
